'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var bignumber = require('@ethersproject/bignumber');
var address = require('@ethersproject/address');
var constants = require('@ethersproject/constants');
var events = require('events');
var contracts = require('@ethersproject/contracts');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P
            ? value
            : new P(function (resolve) {
                  resolve(value);
              });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator['throw'](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var commonjsGlobal =
    typeof globalThis !== 'undefined'
        ? globalThis
        : typeof window !== 'undefined'
        ? window
        : typeof global !== 'undefined'
        ? global
        : typeof self !== 'undefined'
        ? self
        : {};

var lodash_clonedeep = { exports: {} };

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

(function (module, exports) {
    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag] =
        cloneableTags[arrayTag] =
        cloneableTags[arrayBufferTag] =
        cloneableTags[dataViewTag] =
        cloneableTags[boolTag] =
        cloneableTags[dateTag] =
        cloneableTags[float32Tag] =
        cloneableTags[float64Tag] =
        cloneableTags[int8Tag] =
        cloneableTags[int16Tag] =
        cloneableTags[int32Tag] =
        cloneableTags[mapTag] =
        cloneableTags[numberTag] =
        cloneableTags[objectTag] =
        cloneableTags[regexpTag] =
        cloneableTags[setTag] =
        cloneableTags[stringTag] =
        cloneableTags[symbolTag] =
        cloneableTags[uint8Tag] =
        cloneableTags[uint8ClampedTag] =
        cloneableTags[uint16Tag] =
        cloneableTags[uint32Tag] =
            true;
    cloneableTags[errorTag] =
        cloneableTags[funcTag] =
        cloneableTags[weakMapTag] =
            false;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal =
        typeof commonjsGlobal == 'object' &&
        commonjsGlobal &&
        commonjsGlobal.Object === Object &&
        commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf =
        typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule =
        freeExports &&
        'object' == 'object' &&
        module &&
        !module.nodeType &&
        module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /**
     * Adds the key-value `pair` to `map`.
     *
     * @private
     * @param {Object} map The map to modify.
     * @param {Array} pair The key-value pair to add.
     * @returns {Object} Returns `map`.
     */
    function addMapEntry(map, pair) {
        // Don't return `map.set` because it's not chainable in IE 11.
        map.set(pair[0], pair[1]);
        return map;
    }

    /**
     * Adds `value` to `set`.
     *
     * @private
     * @param {Object} set The set to modify.
     * @param {*} value The value to add.
     * @returns {Object} Returns `set`.
     */
    function addSetEntry(set, value) {
        // Don't return `set.add` because it's not chainable in IE 11.
        set.add(value);
        return set;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
        var index = -1,
            length = array ? array.length : 0;

        while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
                break;
            }
        }
        return array;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
        var index = -1,
            length = values.length,
            offset = array.length;

        while (++index < length) {
            array[offset + index] = values[index];
        }
        return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1,
            length = array ? array.length : 0;

        if (initAccum && length) {
            accumulator = array[++index];
        }
        while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
        var index = -1,
            result = Array(n);

        while (++index < n) {
            result[index] = iteratee(index);
        }
        return result;
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
        return object == null ? undefined : object[key];
    }

    /**
     * Checks if `value` is a host object in IE < 9.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
     */
    function isHostObject(value) {
        // Many host objects are `Object` objects that can coerce to strings
        // despite having improperly defined `toString` methods.
        var result = false;
        if (value != null && typeof value.toString != 'function') {
            try {
                result = !!(value + '');
            } catch (e) {}
        }
        return result;
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
        var index = -1,
            result = Array(map.size);

        map.forEach(function (value, key) {
            result[++index] = [key, value];
        });
        return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
        return function (arg) {
            return func(transform(arg));
        };
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
        var index = -1,
            result = Array(set.size);

        set.forEach(function (value) {
            result[++index] = value;
        });
        return result;
    }

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = root['__core-js_shared__'];

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function () {
        var uid = /[^.]+$/.exec(
            (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ''
        );
        return uid ? 'Symbol(src)_1.' + uid : '';
    })();

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp(
        '^' +
            funcToString
                .call(hasOwnProperty)
                .replace(reRegExpChar, '\\$&')
                .replace(
                    /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                    '$1.*?'
                ) +
            '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined,
        Symbol = root.Symbol,
        Uint8Array = root.Uint8Array,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeKeys = overArg(Object.keys, Object);

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(root, 'DataView'),
        Map = getNative(root, 'Map'),
        Promise = getNative(root, 'Promise'),
        Set = getNative(root, 'Set'),
        WeakMap = getNative(root, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
        var index = -1,
            length = entries ? entries.length : 0;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
        return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? undefined : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
        var data = this.__data__;
        return nativeCreate
            ? data[key] !== undefined
            : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
        var data = this.__data__;
        data[key] =
            nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
        var index = -1,
            length = entries ? entries.length : 0;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
        this.__data__ = [];
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
            return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
            data.pop();
        } else {
            splice.call(data, index, 1);
        }
        return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
            data.push([key, value]);
        } else {
            data[index][1] = value;
        }
        return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
        var index = -1,
            length = entries ? entries.length : 0;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
        this.__data__ = {
            hash: new Hash(),
            map: new (Map || ListCache)(),
            string: new Hash(),
        };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
        return getMapData(this, key)['delete'](key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
        return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
        return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
        getMapData(this, key).set(key, value);
        return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
        this.__data__ = new ListCache(entries);
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
        this.__data__ = new ListCache();
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
        return this.__data__['delete'](key);
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
        return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
        return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
        var cache = this.__data__;
        if (cache instanceof ListCache) {
            var pairs = cache.__data__;
            if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                return this;
            }
            cache = this.__data__ = new MapCache(pairs);
        }
        cache.set(key, value);
        return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
        // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
        // Safari 9 makes `arguments.length` enumerable in strict mode.
        var result =
            isArray(value) || isArguments(value)
                ? baseTimes(value.length, String)
                : [];

        var length = result.length,
            skipIndexes = !!length;

        for (var key in value) {
            if (
                (inherited || hasOwnProperty.call(value, key)) &&
                !(skipIndexes && (key == 'length' || isIndex(key, length)))
            ) {
                result.push(key);
            }
        }
        return result;
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
        var objValue = object[key];
        if (
            !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
            (value === undefined && !(key in object))
        ) {
            object[key] = value;
        }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
            if (eq(array[length][0], key)) {
                return length;
            }
        }
        return -1;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {boolean} [isFull] Specify a clone including symbols.
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
        var result;
        if (customizer) {
            result = object
                ? customizer(value, key, object, stack)
                : customizer(value);
        }
        if (result !== undefined) {
            return result;
        }
        if (!isObject(value)) {
            return value;
        }
        var isArr = isArray(value);
        if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
                return copyArray(value, result);
            }
        } else {
            var tag = getTag(value),
                isFunc = tag == funcTag || tag == genTag;

            if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                if (isHostObject(value)) {
                    return object ? value : {};
                }
                result = initCloneObject(isFunc ? {} : value);
                if (!isDeep) {
                    return copySymbols(value, baseAssign(result, value));
                }
            } else {
                if (!cloneableTags[tag]) {
                    return object ? value : {};
                }
                result = initCloneByTag(value, tag, baseClone, isDeep);
            }
        }
        // Check for circular references and return its corresponding clone.
        stack || (stack = new Stack());
        var stacked = stack.get(value);
        if (stacked) {
            return stacked;
        }
        stack.set(value, result);

        if (!isArr) {
            var props = isFull ? getAllKeys(value) : keys(value);
        }
        arrayEach(props || value, function (subValue, key) {
            if (props) {
                key = subValue;
                subValue = value[key];
            }
            // Recursively populate clone (susceptible to call stack limits).
            assignValue(
                result,
                key,
                baseClone(
                    subValue,
                    isDeep,
                    isFull,
                    customizer,
                    key,
                    value,
                    stack
                )
            );
        });
        return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(proto) {
        return isObject(proto) ? objectCreate(proto) : {};
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object)
            ? result
            : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
        return objectToString.call(value);
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
            return false;
        }
        var pattern =
            isFunction(value) || isHostObject(value)
                ? reIsNative
                : reIsHostCtor;
        return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
        if (!isPrototype(object)) {
            return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
            if (hasOwnProperty.call(object, key) && key != 'constructor') {
                result.push(key);
            }
        }
        return result;
    }

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
            return buffer.slice();
        }
        var result = new buffer.constructor(buffer.length);
        buffer.copy(result);
        return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
        var buffer = isDeep
            ? cloneArrayBuffer(dataView.buffer)
            : dataView.buffer;
        return new dataView.constructor(
            buffer,
            dataView.byteOffset,
            dataView.byteLength
        );
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
        var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
        return arrayReduce(array, addMapEntry, new map.constructor());
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
        var result = new regexp.constructor(
            regexp.source,
            reFlags.exec(regexp)
        );
        result.lastIndex = regexp.lastIndex;
        return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
        var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
        return arrayReduce(array, addSetEntry, new set.constructor());
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep
            ? cloneArrayBuffer(typedArray.buffer)
            : typedArray.buffer;
        return new typedArray.constructor(
            buffer,
            typedArray.byteOffset,
            typedArray.length
        );
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
        var index = -1,
            length = source.length;

        array || (array = Array(length));
        while (++index < length) {
            array[index] = source[index];
        }
        return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
        object || (object = {});

        var index = -1,
            length = props.length;

        while (++index < length) {
            var key = props[index];

            var newValue = customizer
                ? customizer(object[key], source[key], key, object, source)
                : undefined;

            assignValue(
                object,
                key,
                newValue === undefined ? source[key] : newValue
            );
        }
        return object;
    }

    /**
     * Copies own symbol properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key)
            ? data[typeof key == 'string' ? 'string' : 'hash']
            : data.map;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
    }

    /**
     * Creates an array of the own enumerable symbol properties of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = nativeGetSymbols
        ? overArg(nativeGetSymbols, Object)
        : stubArray;

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11,
    // for data views in Edge < 14, and promises in Node.js.
    if (
        (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map()) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set()) != setTag) ||
        (WeakMap && getTag(new WeakMap()) != weakMapTag)
    ) {
        getTag = function (value) {
            var result = objectToString.call(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : undefined;

            if (ctorString) {
                switch (ctorString) {
                    case dataViewCtorString:
                        return dataViewTag;
                    case mapCtorString:
                        return mapTag;
                    case promiseCtorString:
                        return promiseTag;
                    case setCtorString:
                        return setTag;
                    case weakMapCtorString:
                        return weakMapTag;
                }
            }
            return result;
        };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
        var length = array.length,
            result = array.constructor(length);

        // Add properties assigned by `RegExp#exec`.
        if (
            length &&
            typeof array[0] == 'string' &&
            hasOwnProperty.call(array, 'index')
        ) {
            result.index = array.index;
            result.input = array.input;
        }
        return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object)
            ? baseCreate(getPrototype(object))
            : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
            case arrayBufferTag:
                return cloneArrayBuffer(object);

            case boolTag:
            case dateTag:
                return new Ctor(+object);

            case dataViewTag:
                return cloneDataView(object, isDeep);

            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
                return cloneTypedArray(object, isDeep);

            case mapTag:
                return cloneMap(object, isDeep, cloneFunc);

            case numberTag:
            case stringTag:
                return new Ctor(object);

            case regexpTag:
                return cloneRegExp(object);

            case setTag:
                return cloneSet(object, isDeep, cloneFunc);

            case symbolTag:
                return cloneSymbol(object);
        }
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length;
        return (
            !!length &&
            (typeof value == 'number' || reIsUint.test(value)) &&
            value > -1 &&
            value % 1 == 0 &&
            value < length
        );
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
        var type = typeof value;
        return type == 'string' ||
            type == 'number' ||
            type == 'symbol' ||
            type == 'boolean'
            ? value !== '__proto__'
            : value === null;
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
    }

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto =
                (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

        return value === proto;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to process.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
        if (func != null) {
            try {
                return funcToString.call(func);
            } catch (e) {}
            try {
                return func + '';
            } catch (e) {}
        }
        return '';
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
        return baseClone(value, true, true);
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
        return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
        // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
        return (
            isArrayLikeObject(value) &&
            hasOwnProperty.call(value, 'callee') &&
            (!propertyIsEnumerable.call(value, 'callee') ||
                objectToString.call(value) == argsTag)
        );
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 8-9 which returns 'object' for typed array and other constructors.
        var tag = isObject(value) ? objectToString.call(value) : '';
        return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
        return (
            typeof value == 'number' &&
            value > -1 &&
            value % 1 == 0 &&
            value <= MAX_SAFE_INTEGER
        );
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
        var type = typeof value;
        return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
        return !!value && typeof value == 'object';
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
        return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
        return false;
    }

    module.exports = cloneDeep;
})(lodash_clonedeep, lodash_clonedeep.exports);

var cloneDeep = lodash_clonedeep.exports;

/*
 *      bignumber.js v9.0.1
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |  sum
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */

var isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
    mathceil = Math.ceil,
    mathfloor = Math.floor,
    bignumberError = '[BigNumber Error] ',
    tooManyDigits =
        bignumberError +
        'Number primitive has more than 15 significant digits: ',
    BASE = 1e14,
    LOG_BASE = 14,
    MAX_SAFE_INTEGER = 0x1fffffffffffff, // 2^53 - 1
    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [
        1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13,
    ],
    SQRT_BASE = 1e7,
    // EDITABLE
    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
    MAX = 1e9; // 0 to MAX_INT32

/*
 * Create and return a BigNumber constructor.
 */
function clone(configObject) {
    var div,
        convertBase,
        parseNumeric,
        P = (BigNumber.prototype = {
            constructor: BigNumber,
            toString: null,
            valueOf: null,
        }),
        ONE = new BigNumber(1),
        //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------

        // The default values below must be integers within the inclusive ranges stated.
        // The values can also be changed at run-time using BigNumber.set.

        // The maximum number of decimal places for operations involving division.
        DECIMAL_PLACES = 20, // 0 to MAX
        // The rounding mode used when rounding to the above decimal places, and when using
        // toExponential, toFixed, toFormat and toPrecision, and round (default value).
        // UP         0 Away from zero.
        // DOWN       1 Towards zero.
        // CEIL       2 Towards +Infinity.
        // FLOOR      3 Towards -Infinity.
        // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
        // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
        // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
        // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
        // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
        ROUNDING_MODE = 4, // 0 to 8
        // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

        // The exponent value at and beneath which toString returns exponential notation.
        // Number type: -7
        TO_EXP_NEG = -7, // 0 to -MAX
        // The exponent value at and above which toString returns exponential notation.
        // Number type: 21
        TO_EXP_POS = 21, // 0 to MAX
        // RANGE : [MIN_EXP, MAX_EXP]

        // The minimum exponent value, beneath which underflow to zero occurs.
        // Number type: -324  (5e-324)
        MIN_EXP = -1e7, // -1 to -MAX
        // The maximum exponent value, above which overflow to Infinity occurs.
        // Number type:  308  (1.7976931348623157e+308)
        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
        MAX_EXP = 1e7, // 1 to MAX
        // Whether to use cryptographically-secure random number generation, if available.
        CRYPTO = false, // true or false
        // The modulo mode used when calculating the modulus: a mod n.
        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
        // The remainder (r) is calculated as: r = a - n * q.
        //
        // UP        0 The remainder is positive if the dividend is negative, else is negative.
        // DOWN      1 The remainder has the same sign as the dividend.
        //             This modulo mode is commonly known as 'truncated division' and is
        //             equivalent to (a % n) in JavaScript.
        // FLOOR     3 The remainder has the same sign as the divisor (Python %).
        // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
        // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
        //             The remainder is always positive.
        //
        // The truncated division, floored division, Euclidian division and IEEE 754 remainder
        // modes are commonly used for the modulus operation.
        // Although the other rounding modes can also be used, they may not give useful results.
        MODULO_MODE = 1, // 0 to 9
        // The maximum number of significant digits of the result of the exponentiatedBy operation.
        // If POW_PRECISION is 0, there will be unlimited significant digits.
        POW_PRECISION = 0, // 0 to MAX
        // The format specification used by the BigNumber.prototype.toFormat method.
        FORMAT = {
            prefix: '',
            groupSize: 3,
            secondaryGroupSize: 0,
            groupSeparator: ',',
            decimalSeparator: '.',
            fractionGroupSize: 0,
            fractionGroupSeparator: '\xA0', // non-breaking space
            suffix: '',
        },
        // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
        // '-', '.', whitespace, or repeated character.
        // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';

    //------------------------------------------------------------------------------------------

    // CONSTRUCTOR

    /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * v {number|string|BigNumber} A numeric value.
     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
     */
    function BigNumber(v, b) {
        var alphabet,
            c,
            caseChanged,
            e,
            i,
            isNum,
            len,
            str,
            x = this;

        // Enable constructor call without `new`.
        if (!(x instanceof BigNumber)) return new BigNumber(v, b);

        if (b == null) {
            if (v && v._isBigNumber === true) {
                x.s = v.s;

                if (!v.c || v.e > MAX_EXP) {
                    x.c = x.e = null;
                } else if (v.e < MIN_EXP) {
                    x.c = [(x.e = 0)];
                } else {
                    x.e = v.e;
                    x.c = v.c.slice();
                }

                return;
            }

            if ((isNum = typeof v == 'number') && v * 0 == 0) {
                // Use `1 / n` to handle minus zero also.
                x.s = 1 / v < 0 ? ((v = -v), -1) : 1;

                // Fast path for integers, where n < 2147483648 (2**31).
                if (v === ~~v) {
                    for (e = 0, i = v; i >= 10; i /= 10, e++);

                    if (e > MAX_EXP) {
                        x.c = x.e = null;
                    } else {
                        x.e = e;
                        x.c = [v];
                    }

                    return;
                }

                str = String(v);
            } else {
                if (!isNumeric.test((str = String(v))))
                    return parseNumeric(x, str, isNum);

                x.s = str.charCodeAt(0) == 45 ? ((str = str.slice(1)), -1) : 1;
            }

            // Decimal point?
            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

            // Exponential form?
            if ((i = str.search(/e/i)) > 0) {
                // Determine exponent.
                if (e < 0) e = i;
                e += +str.slice(i + 1);
                str = str.substring(0, i);
            } else if (e < 0) {
                // Integer.
                e = str.length;
            }
        } else {
            // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
            intCheck(b, 2, ALPHABET.length, 'Base');

            // Allow exponential notation to be used with base 10 argument, while
            // also rounding to DECIMAL_PLACES as with other bases.
            if (b == 10) {
                x = new BigNumber(v);
                return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }

            str = String(v);

            if ((isNum = typeof v == 'number')) {
                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

                x.s = 1 / v < 0 ? ((str = str.slice(1)), -1) : 1;

                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                if (
                    BigNumber.DEBUG &&
                    str.replace(/^0\.0*|\./, '').length > 15
                ) {
                    throw Error(tooManyDigits + v);
                }
            } else {
                x.s = str.charCodeAt(0) === 45 ? ((str = str.slice(1)), -1) : 1;
            }

            alphabet = ALPHABET.slice(0, b);
            e = i = 0;

            // Check that str is a valid base b number.
            // Don't use RegExp, so alphabet can contain special characters.
            for (len = str.length; i < len; i++) {
                if (alphabet.indexOf((c = str.charAt(i))) < 0) {
                    if (c == '.') {
                        // If '.' is not the first character and it has not be found before.
                        if (i > e) {
                            e = len;
                            continue;
                        }
                    } else if (!caseChanged) {
                        // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                        if (
                            (str == str.toUpperCase() &&
                                (str = str.toLowerCase())) ||
                            (str == str.toLowerCase() &&
                                (str = str.toUpperCase()))
                        ) {
                            caseChanged = true;
                            i = -1;
                            e = 0;
                            continue;
                        }
                    }

                    return parseNumeric(x, String(v), isNum, b);
                }
            }

            // Prevent later check for length on converted number.
            isNum = false;
            str = convertBase(str, b, 10, x.s);

            // Decimal point?
            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
            else e = str.length;
        }

        // Determine leading zeros.
        for (i = 0; str.charCodeAt(i) === 48; i++);

        // Determine trailing zeros.
        for (len = str.length; str.charCodeAt(--len) === 48; );

        if ((str = str.slice(i, ++len))) {
            len -= i;

            // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
            if (
                isNum &&
                BigNumber.DEBUG &&
                len > 15 &&
                (v > MAX_SAFE_INTEGER || v !== mathfloor(v))
            ) {
                throw Error(tooManyDigits + x.s * v);
            }

            // Overflow?
            if ((e = e - i - 1) > MAX_EXP) {
                // Infinity.
                x.c = x.e = null;

                // Underflow?
            } else if (e < MIN_EXP) {
                // Zero.
                x.c = [(x.e = 0)];
            } else {
                x.e = e;
                x.c = [];

                // Transform base

                // e is the base 10 exponent.
                // i is where to slice str to get the first element of the coefficient array.
                i = (e + 1) % LOG_BASE;
                if (e < 0) i += LOG_BASE; // i < 1

                if (i < len) {
                    if (i) x.c.push(+str.slice(0, i));

                    for (len -= LOG_BASE; i < len; ) {
                        x.c.push(+str.slice(i, (i += LOG_BASE)));
                    }

                    i = LOG_BASE - (str = str.slice(i)).length;
                } else {
                    i -= len;
                }

                for (; i--; str += '0');
                x.c.push(+str);
            }
        } else {
            // Zero.
            x.c = [(x.e = 0)];
        }
    }

    // CONSTRUCTOR PROPERTIES

    BigNumber.clone = clone;

    BigNumber.ROUND_UP = 0;
    BigNumber.ROUND_DOWN = 1;
    BigNumber.ROUND_CEIL = 2;
    BigNumber.ROUND_FLOOR = 3;
    BigNumber.ROUND_HALF_UP = 4;
    BigNumber.ROUND_HALF_DOWN = 5;
    BigNumber.ROUND_HALF_EVEN = 6;
    BigNumber.ROUND_HALF_CEIL = 7;
    BigNumber.ROUND_HALF_FLOOR = 8;
    BigNumber.EUCLID = 9;

    /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                     not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *     prefix                 {string}
     *     groupSize              {number}
     *     secondaryGroupSize     {number}
     *     groupSeparator         {string}
     *     decimalSeparator       {string}
     *     fractionGroupSize      {number}
     *     fractionGroupSeparator {string}
     *     suffix                 {string}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */
    BigNumber.config = BigNumber.set = function (obj) {
        var p, v;

        if (obj != null) {
            if (typeof obj == 'object') {
                // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                if (obj.hasOwnProperty((p = 'DECIMAL_PLACES'))) {
                    v = obj[p];
                    intCheck(v, 0, MAX, p);
                    DECIMAL_PLACES = v;
                }

                // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                if (obj.hasOwnProperty((p = 'ROUNDING_MODE'))) {
                    v = obj[p];
                    intCheck(v, 0, 8, p);
                    ROUNDING_MODE = v;
                }

                // EXPONENTIAL_AT {number|number[]}
                // Integer, -MAX to MAX inclusive or
                // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                if (obj.hasOwnProperty((p = 'EXPONENTIAL_AT'))) {
                    v = obj[p];
                    if (v && v.pop) {
                        intCheck(v[0], -MAX, 0, p);
                        intCheck(v[1], 0, MAX, p);
                        TO_EXP_NEG = v[0];
                        TO_EXP_POS = v[1];
                    } else {
                        intCheck(v, -MAX, MAX, p);
                        TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                    }
                }

                // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                if (obj.hasOwnProperty((p = 'RANGE'))) {
                    v = obj[p];
                    if (v && v.pop) {
                        intCheck(v[0], -MAX, -1, p);
                        intCheck(v[1], 1, MAX, p);
                        MIN_EXP = v[0];
                        MAX_EXP = v[1];
                    } else {
                        intCheck(v, -MAX, MAX, p);
                        if (v) {
                            MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                        } else {
                            throw Error(
                                bignumberError + p + ' cannot be zero: ' + v
                            );
                        }
                    }
                }

                // CRYPTO {boolean} true or false.
                // '[BigNumber Error] CRYPTO not true or false: {v}'
                // '[BigNumber Error] crypto unavailable'
                if (obj.hasOwnProperty((p = 'CRYPTO'))) {
                    v = obj[p];
                    if (v === !!v) {
                        if (v) {
                            if (
                                typeof crypto != 'undefined' &&
                                crypto &&
                                (crypto.getRandomValues || crypto.randomBytes)
                            ) {
                                CRYPTO = v;
                            } else {
                                CRYPTO = !v;
                                throw Error(
                                    bignumberError + 'crypto unavailable'
                                );
                            }
                        } else {
                            CRYPTO = v;
                        }
                    } else {
                        throw Error(
                            bignumberError + p + ' not true or false: ' + v
                        );
                    }
                }

                // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                if (obj.hasOwnProperty((p = 'MODULO_MODE'))) {
                    v = obj[p];
                    intCheck(v, 0, 9, p);
                    MODULO_MODE = v;
                }

                // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                if (obj.hasOwnProperty((p = 'POW_PRECISION'))) {
                    v = obj[p];
                    intCheck(v, 0, MAX, p);
                    POW_PRECISION = v;
                }

                // FORMAT {object}
                // '[BigNumber Error] FORMAT not an object: {v}'
                if (obj.hasOwnProperty((p = 'FORMAT'))) {
                    v = obj[p];
                    if (typeof v == 'object') FORMAT = v;
                    else
                        throw Error(
                            bignumberError + p + ' not an object: ' + v
                        );
                }

                // ALPHABET {string}
                // '[BigNumber Error] ALPHABET invalid: {v}'
                if (obj.hasOwnProperty((p = 'ALPHABET'))) {
                    v = obj[p];

                    // Disallow if only one character,
                    // or if it contains '+', '-', '.', whitespace, or a repeated character.
                    if (
                        typeof v == 'string' &&
                        !/^.$|[+-.\s]|(.).*\1/.test(v)
                    ) {
                        ALPHABET = v;
                    } else {
                        throw Error(bignumberError + p + ' invalid: ' + v);
                    }
                }
            } else {
                // '[BigNumber Error] Object expected: {v}'
                throw Error(bignumberError + 'Object expected: ' + obj);
            }
        }

        return {
            DECIMAL_PLACES: DECIMAL_PLACES,
            ROUNDING_MODE: ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO: CRYPTO,
            MODULO_MODE: MODULO_MODE,
            POW_PRECISION: POW_PRECISION,
            FORMAT: FORMAT,
            ALPHABET: ALPHABET,
        };
    };

    /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
     *
     * v {any}
     *
     * '[BigNumber Error] Invalid BigNumber: {v}'
     */
    BigNumber.isBigNumber = function (v) {
        if (!v || v._isBigNumber !== true) return false;
        if (!BigNumber.DEBUG) return true;

        var i,
            n,
            c = v.c,
            e = v.e,
            s = v.s;

        out: if ({}.toString.call(c) == '[object Array]') {
            if (
                (s === 1 || s === -1) &&
                e >= -MAX &&
                e <= MAX &&
                e === mathfloor(e)
            ) {
                // If the first element is zero, the BigNumber value must be zero.
                if (c[0] === 0) {
                    if (e === 0 && c.length === 1) return true;
                    break out;
                }

                // Calculate number of digits that c[0] should have, based on the exponent.
                i = (e + 1) % LOG_BASE;
                if (i < 1) i += LOG_BASE;

                // Calculate number of digits of c[0].
                //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
                if (String(c[0]).length == i) {
                    for (i = 0; i < c.length; i++) {
                        n = c[i];
                        if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                    }

                    // Last element cannot be zero, unless it is the only element.
                    if (n !== 0) return true;
                }
            }

            // Infinity/NaN
        } else if (
            c === null &&
            e === null &&
            (s === null || s === 1 || s === -1)
        ) {
            return true;
        }

        throw Error(bignumberError + 'Invalid BigNumber: ' + v);
    };

    /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.maximum = BigNumber.max = function () {
        return maxOrMin(arguments, P.lt);
    };

    /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.minimum = BigNumber.min = function () {
        return maxOrMin(arguments, P.gt);
    };

    /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */
    BigNumber.random = (function () {
        var pow2_53 = 0x20000000000000;

        // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
        // Check if Math.random() produces more than 32 bits of randomness.
        // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
        // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
        var random53bitInt =
            (Math.random() * pow2_53) & 0x1fffff
                ? function () {
                      return mathfloor(Math.random() * pow2_53);
                  }
                : function () {
                      return (
                          ((Math.random() * 0x40000000) | 0) * 0x800000 +
                          ((Math.random() * 0x800000) | 0)
                      );
                  };

        return function (dp) {
            var a,
                b,
                e,
                k,
                v,
                i = 0,
                c = [],
                rand = new BigNumber(ONE);

            if (dp == null) dp = DECIMAL_PLACES;
            else intCheck(dp, 0, MAX);

            k = mathceil(dp / LOG_BASE);

            if (CRYPTO) {
                // Browsers supporting crypto.getRandomValues.
                if (crypto.getRandomValues) {
                    a = crypto.getRandomValues(new Uint32Array((k *= 2)));

                    for (; i < k; ) {
                        // 53 bits:
                        // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                        // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                        // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                        //                                     11111 11111111 11111111
                        // 0x20000 is 2^21.
                        v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                        // Rejection sampling:
                        // 0 <= v < 9007199254740992
                        // Probability that v >= 9e15, is
                        // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                        if (v >= 9e15) {
                            b = crypto.getRandomValues(new Uint32Array(2));
                            a[i] = b[0];
                            a[i + 1] = b[1];
                        } else {
                            // 0 <= v <= 8999999999999999
                            // 0 <= (v % 1e14) <= 99999999999999
                            c.push(v % 1e14);
                            i += 2;
                        }
                    }
                    i = k / 2;

                    // Node.js supporting crypto.randomBytes.
                } else if (crypto.randomBytes) {
                    // buffer
                    a = crypto.randomBytes((k *= 7));

                    for (; i < k; ) {
                        // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                        // 0x100000000 is 2^32, 0x1000000 is 2^24
                        // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                        // 0 <= v < 9007199254740992
                        v =
                            (a[i] & 31) * 0x1000000000000 +
                            a[i + 1] * 0x10000000000 +
                            a[i + 2] * 0x100000000 +
                            a[i + 3] * 0x1000000 +
                            (a[i + 4] << 16) +
                            (a[i + 5] << 8) +
                            a[i + 6];

                        if (v >= 9e15) {
                            crypto.randomBytes(7).copy(a, i);
                        } else {
                            // 0 <= (v % 1e14) <= 99999999999999
                            c.push(v % 1e14);
                            i += 7;
                        }
                    }
                    i = k / 7;
                } else {
                    CRYPTO = false;
                    throw Error(bignumberError + 'crypto unavailable');
                }
            }

            // Use Math.random.
            if (!CRYPTO) {
                for (; i < k; ) {
                    v = random53bitInt();
                    if (v < 9e15) c[i++] = v % 1e14;
                }
            }

            k = c[--i];
            dp %= LOG_BASE;

            // Convert trailing digits to zeros according to dp.
            if (k && dp) {
                v = POWS_TEN[LOG_BASE - dp];
                c[i] = mathfloor(k / v) * v;
            }

            // Remove trailing elements which are zero.
            for (; c[i] === 0; c.pop(), i--);

            // Zero?
            if (i < 0) {
                c = [(e = 0)];
            } else {
                // Remove leading elements which are zero and adjust exponent accordingly.
                for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

                // Count the digits of the first element of c to determine leading zeros, and...
                for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

                // adjust the exponent accordingly.
                if (i < LOG_BASE) e -= LOG_BASE - i;
            }

            rand.e = e;
            rand.c = c;
            return rand;
        };
    })();

    /*
     * Return a BigNumber whose value is the sum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.sum = function () {
        var i = 1,
            args = arguments,
            sum = new BigNumber(args[0]);
        for (; i < args.length; ) sum = sum.plus(args[i++]);
        return sum;
    };

    // PRIVATE FUNCTIONS

    // Called by BigNumber and BigNumber.prototype.toString.
    convertBase = (function () {
        var decimal = '0123456789';

        /*
         * Convert string of baseIn to an array of numbers of baseOut.
         * Eg. toBaseOut('255', 10, 16) returns [15, 15].
         * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
         */
        function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j,
                arr = [0],
                arrL,
                i = 0,
                len = str.length;

            for (; i < len; ) {
                for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

                arr[0] += alphabet.indexOf(str.charAt(i++));

                for (j = 0; j < arr.length; j++) {
                    if (arr[j] > baseOut - 1) {
                        if (arr[j + 1] == null) arr[j + 1] = 0;
                        arr[j + 1] += (arr[j] / baseOut) | 0;
                        arr[j] %= baseOut;
                    }
                }
            }

            return arr.reverse();
        }

        // Convert a numeric string of baseIn to a numeric string of baseOut.
        // If the caller is toString, we are converting from base 10 to baseOut.
        // If the caller is BigNumber, we are converting from baseIn to base 10.
        return function (str, baseIn, baseOut, sign, callerIsToString) {
            var alphabet,
                d,
                e,
                k,
                r,
                x,
                xc,
                y,
                i = str.indexOf('.'),
                dp = DECIMAL_PLACES,
                rm = ROUNDING_MODE;

            // Non-integer.
            if (i >= 0) {
                k = POW_PRECISION;

                // Unlimited precision.
                POW_PRECISION = 0;
                str = str.replace('.', '');
                y = new BigNumber(baseIn);
                x = y.pow(str.length - i);
                POW_PRECISION = k;

                // Convert str as if an integer, then restore the fraction part by dividing the
                // result by its base raised to a power.

                y.c = toBaseOut(
                    toFixedPoint(coeffToString(x.c), x.e, '0'),
                    10,
                    baseOut,
                    decimal
                );
                y.e = y.c.length;
            }

            // Convert the number as integer.

            xc = toBaseOut(
                str,
                baseIn,
                baseOut,
                callerIsToString
                    ? ((alphabet = ALPHABET), decimal)
                    : ((alphabet = decimal), ALPHABET)
            );

            // xc now represents str as an integer and converted to baseOut. e is the exponent.
            e = k = xc.length;

            // Remove trailing zeros.
            for (; xc[--k] == 0; xc.pop());

            // Zero?
            if (!xc[0]) return alphabet.charAt(0);

            // Does str represent an integer? If so, no need for the division.
            if (i < 0) {
                --e;
            } else {
                x.c = xc;
                x.e = e;

                // The sign is needed for correct rounding.
                x.s = sign;
                x = div(x, y, dp, rm, baseOut);
                xc = x.c;
                r = x.r;
                e = x.e;
            }

            // xc now represents str converted to baseOut.

            // THe index of the rounding digit.
            d = e + dp + 1;

            // The rounding digit: the digit to the right of the digit that may be rounded up.
            i = xc[d];

            // Look at the rounding digits and mode to determine whether to round up.

            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;

            r =
                rm < 4
                    ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                    : i > k ||
                      (i == k &&
                          (rm == 4 ||
                              r ||
                              (rm == 6 && xc[d - 1] & 1) ||
                              rm == (x.s < 0 ? 8 : 7)));

            // If the index of the rounding digit is not greater than zero, or xc represents
            // zero, then the result of the base conversion is zero or, if rounding up, a value
            // such as 0.00001.
            if (d < 1 || !xc[0]) {
                // 1^-dp or 0
                str = r
                    ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))
                    : alphabet.charAt(0);
            } else {
                // Truncate xc to the required number of decimal places.
                xc.length = d;

                // Round up?
                if (r) {
                    // Rounding up may mean the previous digit has to be rounded up and so on.
                    for (--baseOut; ++xc[--d] > baseOut; ) {
                        xc[d] = 0;

                        if (!d) {
                            ++e;
                            xc = [1].concat(xc);
                        }
                    }
                }

                // Determine trailing zeros.
                for (k = xc.length; !xc[--k]; );

                // E.g. [4, 11, 15] becomes 4bf.
                for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

                // Add leading zeros, decimal point and trailing zeros as required.
                str = toFixedPoint(str, e, alphabet.charAt(0));
            }

            // The caller will add the sign.
            return str;
        };
    })();

    // Perform division in the specified base. Called by div and convertBase.
    div = (function () {
        // Assume non-zero x and k.
        function multiply(x, k, base) {
            var m,
                temp,
                xlo,
                xhi,
                carry = 0,
                i = x.length,
                klo = k % SQRT_BASE,
                khi = (k / SQRT_BASE) | 0;

            for (x = x.slice(); i--; ) {
                xlo = x[i] % SQRT_BASE;
                xhi = (x[i] / SQRT_BASE) | 0;
                m = khi * xlo + xhi * klo;
                temp = klo * xlo + (m % SQRT_BASE) * SQRT_BASE + carry;
                carry = ((temp / base) | 0) + ((m / SQRT_BASE) | 0) + khi * xhi;
                x[i] = temp % base;
            }

            if (carry) x = [carry].concat(x);

            return x;
        }

        function compare(a, b, aL, bL) {
            var i, cmp;

            if (aL != bL) {
                cmp = aL > bL ? 1 : -1;
            } else {
                for (i = cmp = 0; i < aL; i++) {
                    if (a[i] != b[i]) {
                        cmp = a[i] > b[i] ? 1 : -1;
                        break;
                    }
                }
            }

            return cmp;
        }

        function subtract(a, b, aL, base) {
            var i = 0;

            // Subtract b from a.
            for (; aL--; ) {
                a[aL] -= i;
                i = a[aL] < b[aL] ? 1 : 0;
                a[aL] = i * base + a[aL] - b[aL];
            }

            // Remove leading zeros.
            for (; !a[0] && a.length > 1; a.splice(0, 1));
        }

        // x: dividend, y: divisor.
        return function (x, y, dp, rm, base) {
            var cmp,
                e,
                i,
                more,
                n,
                prod,
                prodL,
                q,
                qc,
                rem,
                remL,
                rem0,
                xi,
                xL,
                yc0,
                yL,
                yz,
                s = x.s == y.s ? 1 : -1,
                xc = x.c,
                yc = y.c;

            // Either NaN, Infinity or 0?
            if (!xc || !xc[0] || !yc || !yc[0]) {
                return new BigNumber(
                    // Return NaN if either NaN, or both Infinity or 0.
                    !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc)
                        ? NaN
                        : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                        (xc && xc[0] == 0) || !yc
                        ? s * 0
                        : s / 0
                );
            }

            q = new BigNumber(s);
            qc = q.c = [];
            e = x.e - y.e;
            s = dp + e + 1;

            if (!base) {
                base = BASE;
                e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                s = (s / LOG_BASE) | 0;
            }

            // Result exponent may be one less then the current value of e.
            // The coefficients of the BigNumbers from convertBase may have trailing zeros.
            for (i = 0; yc[i] == (xc[i] || 0); i++);

            if (yc[i] > (xc[i] || 0)) e--;

            if (s < 0) {
                qc.push(1);
                more = true;
            } else {
                xL = xc.length;
                yL = yc.length;
                i = 0;
                s += 2;

                // Normalise xc and yc so highest order digit of yc is >= base / 2.

                n = mathfloor(base / (yc[0] + 1));

                // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
                // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
                if (n > 1) {
                    yc = multiply(yc, n, base);
                    xc = multiply(xc, n, base);
                    yL = yc.length;
                    xL = xc.length;
                }

                xi = yL;
                rem = xc.slice(0, yL);
                remL = rem.length;

                // Add zeros to make remainder as long as divisor.
                for (; remL < yL; rem[remL++] = 0);
                yz = yc.slice();
                yz = [0].concat(yz);
                yc0 = yc[0];
                if (yc[1] >= base / 2) yc0++;
                // Not necessary, but to prevent trial digit n > base, when using base 3.
                // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

                do {
                    n = 0;

                    // Compare divisor and remainder.
                    cmp = compare(yc, rem, yL, remL);

                    // If divisor < remainder.
                    if (cmp < 0) {
                        // Calculate trial digit, n.

                        rem0 = rem[0];
                        if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                        // n is how many times the divisor goes into the current remainder.
                        n = mathfloor(rem0 / yc0);

                        //  Algorithm:
                        //  product = divisor multiplied by trial digit (n).
                        //  Compare product and remainder.
                        //  If product is greater than remainder:
                        //    Subtract divisor from product, decrement trial digit.
                        //  Subtract product from remainder.
                        //  If product was less than remainder at the last compare:
                        //    Compare new remainder and divisor.
                        //    If remainder is greater than divisor:
                        //      Subtract divisor from remainder, increment trial digit.

                        if (n > 1) {
                            // n may be > base only when base is 3.
                            if (n >= base) n = base - 1;

                            // product = divisor * trial digit.
                            prod = multiply(yc, n, base);
                            prodL = prod.length;
                            remL = rem.length;

                            // Compare product and remainder.
                            // If product > remainder then trial digit n too high.
                            // n is 1 too high about 5% of the time, and is not known to have
                            // ever been more than 1 too high.
                            while (compare(prod, rem, prodL, remL) == 1) {
                                n--;

                                // Subtract divisor from product.
                                subtract(
                                    prod,
                                    yL < prodL ? yz : yc,
                                    prodL,
                                    base
                                );
                                prodL = prod.length;
                                cmp = 1;
                            }
                        } else {
                            // n is 0 or 1, cmp is -1.
                            // If n is 0, there is no need to compare yc and rem again below,
                            // so change cmp to 1 to avoid it.
                            // If n is 1, leave cmp as -1, so yc and rem are compared again.
                            if (n == 0) {
                                // divisor < remainder, so n must be at least 1.
                                cmp = n = 1;
                            }

                            // product = divisor
                            prod = yc.slice();
                            prodL = prod.length;
                        }

                        if (prodL < remL) prod = [0].concat(prod);

                        // Subtract product from remainder.
                        subtract(rem, prod, remL, base);
                        remL = rem.length;

                        // If product was < remainder.
                        if (cmp == -1) {
                            // Compare divisor and new remainder.
                            // If divisor < new remainder, subtract divisor from remainder.
                            // Trial digit n too low.
                            // n is 1 too low about 5% of the time, and very rarely 2 too low.
                            while (compare(yc, rem, yL, remL) < 1) {
                                n++;

                                // Subtract divisor from remainder.
                                subtract(rem, yL < remL ? yz : yc, remL, base);
                                remL = rem.length;
                            }
                        }
                    } else if (cmp === 0) {
                        n++;
                        rem = [0];
                    } // else cmp === 1 and n will be 0

                    // Add the next digit, n, to the result array.
                    qc[i++] = n;

                    // Update the remainder.
                    if (rem[0]) {
                        rem[remL++] = xc[xi] || 0;
                    } else {
                        rem = [xc[xi]];
                        remL = 1;
                    }
                } while ((xi++ < xL || rem[0] != null) && s--);

                more = rem[0] != null;

                // Leading zero?
                if (!qc[0]) qc.splice(0, 1);
            }

            if (base == BASE) {
                // To calculate q.e, first get the number of digits of qc[0].
                for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

                round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

                // Caller is convertBase.
            } else {
                q.e = e;
                q.r = +more;
            }

            return q;
        };
    })();

    /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */
    function format(n, i, rm, id) {
        var c0, e, ne, len, str;

        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);

        if (!n.c) return n.toString();

        c0 = n.c[0];
        ne = n.e;

        if (i == null) {
            str = coeffToString(n.c);
            str =
                id == 1 || (id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS))
                    ? toExponential(str, ne)
                    : toFixedPoint(str, ne, '0');
        } else {
            n = round(new BigNumber(n), i, rm);

            // n.e may have changed if the value was rounded up.
            e = n.e;

            str = coeffToString(n.c);
            len = str.length;

            // toPrecision returns exponential notation if the number of significant digits
            // specified is less than the number of digits necessary to represent the integer
            // part of the value in fixed-point notation.

            // Exponential notation.
            if (id == 1 || (id == 2 && (i <= e || e <= TO_EXP_NEG))) {
                // Append zeros?
                for (; len < i; str += '0', len++);
                str = toExponential(str, e);

                // Fixed-point notation.
            } else {
                i -= ne;
                str = toFixedPoint(str, e, '0');

                // Append zeros?
                if (e + 1 > len) {
                    if (--i > 0) for (str += '.'; i--; str += '0');
                } else {
                    i += e - len;
                    if (i > 0) {
                        if (e + 1 == len) str += '.';
                        for (; i--; str += '0');
                    }
                }
            }
        }

        return n.s < 0 && c0 ? '-' + str : str;
    }

    // Handle BigNumber.max and BigNumber.min.
    function maxOrMin(args, method) {
        var n,
            i = 1,
            m = new BigNumber(args[0]);

        for (; i < args.length; i++) {
            n = new BigNumber(args[i]);

            // If any number is NaN, return NaN.
            if (!n.s) {
                m = n;
                break;
            } else if (method.call(m, n)) {
                m = n;
            }
        }

        return m;
    }

    /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */
    function normalise(n, c, e) {
        var i = 1,
            j = c.length;

        // Remove trailing zeros.
        for (; !c[--j]; c.pop());

        // Calculate the base 10 exponent. First get the number of digits of c[0].
        for (j = c[0]; j >= 10; j /= 10, i++);

        // Overflow?
        if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
            // Infinity.
            n.c = n.e = null;

            // Underflow?
        } else if (e < MIN_EXP) {
            // Zero.
            n.c = [(n.e = 0)];
        } else {
            n.e = e;
            n.c = c;
        }

        return n;
    }

    // Handle values that fail the validity test in BigNumber.
    parseNumeric = (function () {
        var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
            dotAfter = /^([^.]+)\.$/,
            dotBefore = /^\.([^.]+)$/,
            isInfinityOrNaN = /^-?(Infinity|NaN)$/,
            whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

        return function (x, str, isNum, b) {
            var base,
                s = isNum ? str : str.replace(whitespaceOrPlus, '');

            // No exception on ±Infinity or NaN.
            if (isInfinityOrNaN.test(s)) {
                x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
                if (!isNum) {
                    // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                    s = s.replace(basePrefix, function (m, p1, p2) {
                        base =
                            (p2 = p2.toLowerCase()) == 'x'
                                ? 16
                                : p2 == 'b'
                                ? 2
                                : 8;
                        return !b || b == base ? p1 : m;
                    });

                    if (b) {
                        base = b;

                        // E.g. '1.' to '1', '.1' to '0.1'
                        s = s
                            .replace(dotAfter, '$1')
                            .replace(dotBefore, '0.$1');
                    }

                    if (str != s) return new BigNumber(s, base);
                }

                // '[BigNumber Error] Not a number: {n}'
                // '[BigNumber Error] Not a base {b} number: {n}'
                if (BigNumber.DEBUG) {
                    throw Error(
                        bignumberError +
                            'Not a' +
                            (b ? ' base ' + b : '') +
                            ' number: ' +
                            str
                    );
                }

                // NaN
                x.s = null;
            }

            x.c = x.e = null;
        };
    })();

    /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */
    function round(x, sd, rm, r) {
        var d,
            i,
            j,
            k,
            n,
            ni,
            rd,
            xc = x.c,
            pows10 = POWS_TEN;

        // if x is not Infinity or NaN...
        if (xc) {
            // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
            // n is a base 1e14 number, the value of the element of array x.c containing rd.
            // ni is the index of n within x.c.
            // d is the number of digits of n.
            // i is the index of rd within n including leading zeros.
            // j is the actual index of rd within n (if < 0, rd is a leading zero).
            out: {
                // Get the number of digits of the first element of xc.
                for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
                i = sd - d;

                // If the rounding digit is in the first element of xc...
                if (i < 0) {
                    i += LOG_BASE;
                    j = sd;
                    n = xc[(ni = 0)];

                    // Get the rounding digit at index j of n.
                    rd = (n / pows10[d - j - 1]) % 10 | 0;
                } else {
                    ni = mathceil((i + 1) / LOG_BASE);

                    if (ni >= xc.length) {
                        if (r) {
                            // Needed by sqrt.
                            for (; xc.length <= ni; xc.push(0));
                            n = rd = 0;
                            d = 1;
                            i %= LOG_BASE;
                            j = i - LOG_BASE + 1;
                        } else {
                            break out;
                        }
                    } else {
                        n = k = xc[ni];

                        // Get the number of digits of n.
                        for (d = 1; k >= 10; k /= 10, d++);

                        // Get the index of rd within n.
                        i %= LOG_BASE;

                        // Get the index of rd within n, adjusted for leading zeros.
                        // The number of leading zeros of n is given by LOG_BASE - d.
                        j = i - LOG_BASE + d;

                        // Get the rounding digit at index j of n.
                        rd = j < 0 ? 0 : (n / pows10[d - j - 1]) % 10 | 0;
                    }
                }

                r =
                    r ||
                    sd < 0 ||
                    // Are there any non-zero digits after the rounding digit?
                    // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                    xc[ni + 1] != null ||
                    (j < 0 ? n : n % pows10[d - j - 1]);

                r =
                    rm < 4
                        ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                        : rd > 5 ||
                          (rd == 5 &&
                              (rm == 4 ||
                                  r ||
                                  (rm == 6 &&
                                      // Check whether the digit to the left of the rounding digit is odd.
                                      (i > 0
                                          ? j > 0
                                              ? n / pows10[d - j]
                                              : 0
                                          : xc[ni - 1]) %
                                          10 &
                                          1) ||
                                  rm == (x.s < 0 ? 8 : 7)));

                if (sd < 1 || !xc[0]) {
                    xc.length = 0;

                    if (r) {
                        // Convert sd to decimal places.
                        sd -= x.e + 1;

                        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                        xc[0] = pows10[(LOG_BASE - (sd % LOG_BASE)) % LOG_BASE];
                        x.e = -sd || 0;
                    } else {
                        // Zero.
                        xc[0] = x.e = 0;
                    }

                    return x;
                }

                // Remove excess digits.
                if (i == 0) {
                    xc.length = ni;
                    k = 1;
                    ni--;
                } else {
                    xc.length = ni + 1;
                    k = pows10[LOG_BASE - i];

                    // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                    // j > 0 means i > number of leading zeros of n.
                    xc[ni] =
                        j > 0
                            ? mathfloor((n / pows10[d - j]) % pows10[j]) * k
                            : 0;
                }

                // Round up?
                if (r) {
                    for (;;) {
                        // If the digit to be rounded up is in the first element of xc...
                        if (ni == 0) {
                            // i will be the length of xc[0] before k is added.
                            for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                            j = xc[0] += k;
                            for (k = 1; j >= 10; j /= 10, k++);

                            // if i != k the length has increased.
                            if (i != k) {
                                x.e++;
                                if (xc[0] == BASE) xc[0] = 1;
                            }

                            break;
                        } else {
                            xc[ni] += k;
                            if (xc[ni] != BASE) break;
                            xc[ni--] = 0;
                            k = 1;
                        }
                    }
                }

                // Remove trailing zeros.
                for (i = xc.length; xc[--i] === 0; xc.pop());
            }

            // Overflow? Infinity.
            if (x.e > MAX_EXP) {
                x.c = x.e = null;

                // Underflow? Zero.
            } else if (x.e < MIN_EXP) {
                x.c = [(x.e = 0)];
            }
        }

        return x;
    }

    function valueOf(n) {
        var str,
            e = n.e;

        if (e === null) return n.toString();

        str = coeffToString(n.c);

        str =
            e <= TO_EXP_NEG || e >= TO_EXP_POS
                ? toExponential(str, e)
                : toFixedPoint(str, e, '0');

        return n.s < 0 ? '-' + str : str;
    }

    // PROTOTYPE/INSTANCE METHODS

    /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */
    P.absoluteValue = P.abs = function () {
        var x = new BigNumber(this);
        if (x.s < 0) x.s = 1;
        return x;
    };

    /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */
    P.comparedTo = function (y, b) {
        return compare(this, new BigNumber(y, b));
    };

    /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.decimalPlaces = P.dp = function (dp, rm) {
        var c,
            n,
            v,
            x = this;

        if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);

            return round(new BigNumber(x), dp + x.e + 1, rm);
        }

        if (!(c = x.c)) return null;
        n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

        // Subtract the number of trailing zeros of the last number.
        if ((v = c[v])) for (; v % 10 == 0; v /= 10, n--);
        if (n < 0) n = 0;

        return n;
    };

    /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
    P.dividedBy = P.div = function (y, b) {
        return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
    };

    /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */
    P.dividedToIntegerBy = P.idiv = function (y, b) {
        return div(this, new BigNumber(y, b), 0, 1);
    };

    /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */
    P.exponentiatedBy = P.pow = function (n, m) {
        var half,
            isModExp,
            i,
            k,
            more,
            nIsBig,
            nIsNeg,
            nIsOdd,
            y,
            x = this;

        n = new BigNumber(n);

        // Allow NaN and ±Infinity, but not other non-integers.
        if (n.c && !n.isInteger()) {
            throw Error(
                bignumberError + 'Exponent not an integer: ' + valueOf(n)
            );
        }

        if (m != null) m = new BigNumber(m);

        // Exponent of MAX_SAFE_INTEGER is 15.
        nIsBig = n.e > 14;

        // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
        if (
            !x.c ||
            !x.c[0] ||
            (x.c[0] == 1 && !x.e && x.c.length == 1) ||
            !n.c ||
            !n.c[0]
        ) {
            // The sign of the result of pow when x is negative depends on the evenness of n.
            // If +n overflows to ±Infinity, the evenness of n would be not be known.
            y = new BigNumber(
                Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n))
            );
            return m ? y.mod(m) : y;
        }

        nIsNeg = n.s < 0;

        if (m) {
            // x % m returns NaN if abs(m) is zero, or m is NaN.
            if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

            isModExp = !nIsNeg && x.isInteger() && m.isInteger();

            if (isModExp) x = x.mod(m);

            // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
            // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
        } else if (
            n.e > 9 &&
            (x.e > 0 ||
                x.e < -1 ||
                (x.e == 0
                    ? // [1, 240000000]
                      x.c[0] > 1 || (nIsBig && x.c[1] >= 24e7)
                    : // [80000000000000]  [99999750000000]
                      x.c[0] < 8e13 || (nIsBig && x.c[0] <= 9999975e7)))
        ) {
            // If x is negative and n is odd, k = -0, else k = 0.
            k = x.s < 0 && isOdd(n) ? -0 : 0;

            // If x >= 1, k = ±Infinity.
            if (x.e > -1) k = 1 / k;

            // If n is negative return ±0, else return ±Infinity.
            return new BigNumber(nIsNeg ? 1 / k : k);
        } else if (POW_PRECISION) {
            // Truncating each coefficient array to a length of k after each multiplication
            // equates to truncating significant digits to POW_PRECISION + [28, 41],
            // i.e. there will be a minimum of 28 guard digits retained.
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
        }

        if (nIsBig) {
            half = new BigNumber(0.5);
            if (nIsNeg) n.s = 1;
            nIsOdd = isOdd(n);
        } else {
            i = Math.abs(+valueOf(n));
            nIsOdd = i % 2;
        }

        y = new BigNumber(ONE);

        // Performs 54 loop iterations for n of 9007199254740991.
        for (;;) {
            if (nIsOdd) {
                y = y.times(x);
                if (!y.c) break;

                if (k) {
                    if (y.c.length > k) y.c.length = k;
                } else if (isModExp) {
                    y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
                }
            }

            if (i) {
                i = mathfloor(i / 2);
                if (i === 0) break;
                nIsOdd = i % 2;
            } else {
                n = n.times(half);
                round(n, n.e + 1, 1);

                if (n.e > 14) {
                    nIsOdd = isOdd(n);
                } else {
                    i = +valueOf(n);
                    if (i === 0) break;
                    nIsOdd = i % 2;
                }
            }

            x = x.times(x);

            if (k) {
                if (x.c && x.c.length > k) x.c.length = k;
            } else if (isModExp) {
                x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
            }
        }

        if (isModExp) return y;
        if (nIsNeg) y = ONE.div(y);

        return m
            ? y.mod(m)
            : k
            ? round(y, POW_PRECISION, ROUNDING_MODE, more)
            : y;
    };

    /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */
    P.integerValue = function (rm) {
        var n = new BigNumber(this);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);
        return round(n, n.e + 1, rm);
    };

    /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isEqualTo = P.eq = function (y, b) {
        return compare(this, new BigNumber(y, b)) === 0;
    };

    /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */
    P.isFinite = function () {
        return !!this.c;
    };

    /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isGreaterThan = P.gt = function (y, b) {
        return compare(this, new BigNumber(y, b)) > 0;
    };

    /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
        return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
    };

    /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */
    P.isInteger = function () {
        return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    };

    /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isLessThan = P.lt = function (y, b) {
        return compare(this, new BigNumber(y, b)) < 0;
    };

    /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
    P.isLessThanOrEqualTo = P.lte = function (y, b) {
        return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
    };

    /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */
    P.isNaN = function () {
        return !this.s;
    };

    /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */
    P.isNegative = function () {
        return this.s < 0;
    };

    /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */
    P.isPositive = function () {
        return this.s > 0;
    };

    /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */
    P.isZero = function () {
        return !!this.c && this.c[0] == 0;
    };

    /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */
    P.minus = function (y, b) {
        var i,
            j,
            t,
            xLTy,
            x = this,
            a = x.s;

        y = new BigNumber(y, b);
        b = y.s;

        // Either NaN?
        if (!a || !b) return new BigNumber(NaN);

        // Signs differ?
        if (a != b) {
            y.s = -b;
            return x.plus(y);
        }

        var xe = x.e / LOG_BASE,
            ye = y.e / LOG_BASE,
            xc = x.c,
            yc = y.c;

        if (!xe || !ye) {
            // Either Infinity?
            if (!xc || !yc)
                return xc ? ((y.s = -b), y) : new BigNumber(yc ? x : NaN);

            // Either zero?
            if (!xc[0] || !yc[0]) {
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                return yc[0]
                    ? ((y.s = -b), y)
                    : new BigNumber(
                          xc[0]
                              ? x
                              : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                              ROUNDING_MODE == 3
                              ? -0
                              : 0
                      );
            }
        }

        xe = bitFloor(xe);
        ye = bitFloor(ye);
        xc = xc.slice();

        // Determine which is the bigger number.
        if ((a = xe - ye)) {
            if ((xLTy = a < 0)) {
                a = -a;
                t = xc;
            } else {
                ye = xe;
                t = yc;
            }

            t.reverse();

            // Prepend zeros to equalise exponents.
            for (b = a; b--; t.push(0));
            t.reverse();
        } else {
            // Exponents equal. Check digit by digit.
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

            for (a = b = 0; b < j; b++) {
                if (xc[b] != yc[b]) {
                    xLTy = xc[b] < yc[b];
                    break;
                }
            }
        }

        // x < y? Point xc to the array of the bigger number.
        if (xLTy) (t = xc), (xc = yc), (yc = t), (y.s = -y.s);

        b = (j = yc.length) - (i = xc.length);

        // Append zeros to xc if shorter.
        // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
        if (b > 0) for (; b--; xc[i++] = 0);
        b = BASE - 1;

        // Subtract yc from xc.
        for (; j > a; ) {
            if (xc[--j] < yc[j]) {
                for (i = j; i && !xc[--i]; xc[i] = b);
                --xc[i];
                xc[j] += BASE;
            }

            xc[j] -= yc[j];
        }

        // Remove leading zeros and adjust exponent accordingly.
        for (; xc[0] == 0; xc.splice(0, 1), --ye);

        // Zero?
        if (!xc[0]) {
            // Following IEEE 754 (2008) 6.3,
            // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [(y.e = 0)];
            return y;
        }

        // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
        // for finite x and y.
        return normalise(y, xc, ye);
    };

    /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */
    P.modulo = P.mod = function (y, b) {
        var q,
            s,
            x = this;

        y = new BigNumber(y, b);

        // Return NaN if x is Infinity or NaN, or y is NaN or zero.
        if (!x.c || !y.s || (y.c && !y.c[0])) {
            return new BigNumber(NaN);

            // Return x if y is Infinity or x is zero.
        } else if (!y.c || (x.c && !x.c[0])) {
            return new BigNumber(x);
        }

        if (MODULO_MODE == 9) {
            // Euclidian division: q = sign(y) * floor(x / abs(y))
            // r = x - qy    where  0 <= r < abs(y)
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
        } else {
            q = div(x, y, 0, MODULO_MODE);
        }

        y = x.minus(q.times(y));

        // To match JavaScript %, ensure sign of zero is sign of dividend.
        if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

        return y;
    };

    /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */
    P.multipliedBy = P.times = function (y, b) {
        var c,
            e,
            i,
            j,
            k,
            m,
            xcL,
            xlo,
            xhi,
            ycL,
            ylo,
            yhi,
            zc,
            base,
            sqrtBase,
            x = this,
            xc = x.c,
            yc = (y = new BigNumber(y, b)).c;

        // Either NaN, ±Infinity or ±0?
        if (!xc || !yc || !xc[0] || !yc[0]) {
            // Return NaN if either is NaN, or one is 0 and the other is Infinity.
            if (
                !x.s ||
                !y.s ||
                (xc && !xc[0] && !yc) ||
                (yc && !yc[0] && !xc)
            ) {
                y.c = y.e = y.s = null;
            } else {
                y.s *= x.s;

                // Return ±Infinity if either is ±Infinity.
                if (!xc || !yc) {
                    y.c = y.e = null;

                    // Return ±0 if either is ±0.
                } else {
                    y.c = [0];
                    y.e = 0;
                }
            }

            return y;
        }

        e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
        y.s *= x.s;
        xcL = xc.length;
        ycL = yc.length;

        // Ensure xc points to longer array and xcL to its length.
        if (xcL < ycL)
            (zc = xc), (xc = yc), (yc = zc), (i = xcL), (xcL = ycL), (ycL = i);

        // Initialise the result array with zeros.
        for (i = xcL + ycL, zc = []; i--; zc.push(0));

        base = BASE;
        sqrtBase = SQRT_BASE;

        for (i = ycL; --i >= 0; ) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = (yc[i] / sqrtBase) | 0;

            for (k = xcL, j = i + k; j > i; ) {
                xlo = xc[--k] % sqrtBase;
                xhi = (xc[k] / sqrtBase) | 0;
                m = yhi * xlo + xhi * ylo;
                xlo = ylo * xlo + (m % sqrtBase) * sqrtBase + zc[j] + c;
                c = ((xlo / base) | 0) + ((m / sqrtBase) | 0) + yhi * xhi;
                zc[j--] = xlo % base;
            }

            zc[j] = c;
        }

        if (c) {
            ++e;
        } else {
            zc.splice(0, 1);
        }

        return normalise(y, zc, e);
    };

    /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */
    P.negated = function () {
        var x = new BigNumber(this);
        x.s = -x.s || null;
        return x;
    };

    /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */
    P.plus = function (y, b) {
        var t,
            x = this,
            a = x.s;

        y = new BigNumber(y, b);
        b = y.s;

        // Either NaN?
        if (!a || !b) return new BigNumber(NaN);

        // Signs differ?
        if (a != b) {
            y.s = -b;
            return x.minus(y);
        }

        var xe = x.e / LOG_BASE,
            ye = y.e / LOG_BASE,
            xc = x.c,
            yc = y.c;

        if (!xe || !ye) {
            // Return ±Infinity if either ±Infinity.
            if (!xc || !yc) return new BigNumber(a / 0);

            // Either zero?
            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
            if (!xc[0] || !yc[0])
                return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
        }

        xe = bitFloor(xe);
        ye = bitFloor(ye);
        xc = xc.slice();

        // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
        if ((a = xe - ye)) {
            if (a > 0) {
                ye = xe;
                t = yc;
            } else {
                a = -a;
                t = xc;
            }

            t.reverse();
            for (; a--; t.push(0));
            t.reverse();
        }

        a = xc.length;
        b = yc.length;

        // Point xc to the longer array, and b to the shorter length.
        if (a - b < 0) (t = yc), (yc = xc), (xc = t), (b = a);

        // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
        for (a = 0; b; ) {
            a = ((xc[--b] = xc[b] + yc[b] + a) / BASE) | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
        }

        if (a) {
            xc = [a].concat(xc);
            ++ye;
        }

        // No need to check for zero, as +x + +y != 0 && -x + -y != 0
        // ye = MAX_EXP + 1 possible
        return normalise(y, xc, ye);
    };

    /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
    P.precision = P.sd = function (sd, rm) {
        var c,
            n,
            v,
            x = this;

        if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);

            return round(new BigNumber(x), sd, rm);
        }

        if (!(c = x.c)) return null;
        v = c.length - 1;
        n = v * LOG_BASE + 1;

        if ((v = c[v])) {
            // Subtract the number of trailing zeros of the last element.
            for (; v % 10 == 0; v /= 10, n--);

            // Add the number of digits of the first element.
            for (v = c[0]; v >= 10; v /= 10, n++);
        }

        if (sd && x.e + 1 > n) n = x.e + 1;

        return n;
    };

    /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */
    P.shiftedBy = function (k) {
        intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
        return this.times('1e' + k);
    };

    /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
    P.squareRoot = P.sqrt = function () {
        var m,
            n,
            r,
            rep,
            t,
            x = this,
            c = x.c,
            s = x.s,
            e = x.e,
            dp = DECIMAL_PLACES + 4,
            half = new BigNumber('0.5');

        // Negative/NaN/Infinity/zero?
        if (s !== 1 || !c || !c[0]) {
            return new BigNumber(
                !s || (s < 0 && (!c || c[0])) ? NaN : c ? x : 1 / 0
            );
        }

        // Initial estimate.
        s = Math.sqrt(+valueOf(x));

        // Math.sqrt underflow/overflow?
        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
        if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0) n += '0';
            s = Math.sqrt(+n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

            if (s == 1 / 0) {
                n = '5e' + e;
            } else {
                n = s.toExponential();
                n = n.slice(0, n.indexOf('e') + 1) + e;
            }

            r = new BigNumber(n);
        } else {
            r = new BigNumber(s + '');
        }

        // Check for zero.
        // r could be zero if MIN_EXP is changed after the this value was created.
        // This would cause a division by zero (x/t) and hence Infinity below, which would cause
        // coeffToString to throw.
        if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3) s = 0;

            // Newton-Raphson iteration.
            for (;;) {
                t = r;
                r = half.times(t.plus(div(x, t, dp, 1)));

                if (
                    coeffToString(t.c).slice(0, s) ===
                    (n = coeffToString(r.c)).slice(0, s)
                ) {
                    // The exponent of r may here be one less than the final result exponent,
                    // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                    // are indexed correctly.
                    if (r.e < e) --s;
                    n = n.slice(s - 3, s + 1);

                    // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                    // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                    // iteration.
                    if (n == '9999' || (!rep && n == '4999')) {
                        // On the first iteration only, check to see if rounding up gives the
                        // exact result as the nines may infinitely repeat.
                        if (!rep) {
                            round(t, t.e + DECIMAL_PLACES + 2, 0);

                            if (t.times(t).eq(x)) {
                                r = t;
                                break;
                            }
                        }

                        dp += 4;
                        s += 4;
                        rep = 1;
                    } else {
                        // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                        // result. If not, then there are further digits and m will be truthy.
                        if (!+n || (!+n.slice(1) && n.charAt(0) == '5')) {
                            // Truncate to the first rounding digit.
                            round(r, r.e + DECIMAL_PLACES + 2, 1);
                            m = !r.times(r).eq(x);
                        }

                        break;
                    }
                }
            }
        }

        return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
    };

    /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.toExponential = function (dp, rm) {
        if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
        }
        return format(this, dp, rm, 1);
    };

    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.toFixed = function (dp, rm) {
        if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
        }
        return format(this, dp, rm);
    };

    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the format or FORMAT object (see BigNumber.set).
     *
     * The formatting object may contain some or all of the properties shown below.
     *
     * FORMAT = {
     *   prefix: '',
     *   groupSize: 3,
     *   secondaryGroupSize: 0,
     *   groupSeparator: ',',
     *   decimalSeparator: '.',
     *   fractionGroupSize: 0,
     *   fractionGroupSeparator: '\xA0',      // non-breaking space
     *   suffix: ''
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     * [format] {object} Formatting options. See FORMAT pbject above.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     * '[BigNumber Error] Argument not an object: {format}'
     */
    P.toFormat = function (dp, rm, format) {
        var str,
            x = this;

        if (format == null) {
            if (dp != null && rm && typeof rm == 'object') {
                format = rm;
                rm = null;
            } else if (dp && typeof dp == 'object') {
                format = dp;
                dp = rm = null;
            } else {
                format = FORMAT;
            }
        } else if (typeof format != 'object') {
            throw Error(bignumberError + 'Argument not an object: ' + format);
        }

        str = x.toFixed(dp, rm);

        if (x.c) {
            var i,
                arr = str.split('.'),
                g1 = +format.groupSize,
                g2 = +format.secondaryGroupSize,
                groupSeparator = format.groupSeparator || '',
                intPart = arr[0],
                fractionPart = arr[1],
                isNeg = x.s < 0,
                intDigits = isNeg ? intPart.slice(1) : intPart,
                len = intDigits.length;

            if (g2) (i = g1), (g1 = g2), (g2 = i), (len -= i);

            if (g1 > 0 && len > 0) {
                i = len % g1 || g1;
                intPart = intDigits.substr(0, i);
                for (; i < len; i += g1)
                    intPart += groupSeparator + intDigits.substr(i, g1);
                if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                if (isNeg) intPart = '-' + intPart;
            }

            str = fractionPart
                ? intPart +
                  (format.decimalSeparator || '') +
                  ((g2 = +format.fractionGroupSize)
                      ? fractionPart.replace(
                            new RegExp('\\d{' + g2 + '}\\B', 'g'),
                            '$&' + (format.fractionGroupSeparator || '')
                        )
                      : fractionPart)
                : intPart;
        }

        return (format.prefix || '') + str + (format.suffix || '');
    };

    /*
     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
     * fraction with an integer numerator and an integer denominator.
     * The denominator will be a positive non-zero value less than or equal to the specified
     * maximum denominator. If a maximum denominator is not specified, the denominator will be
     * the lowest value necessary to represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */
    P.toFraction = function (md) {
        var d,
            d0,
            d1,
            d2,
            e,
            exp,
            n,
            n0,
            n1,
            q,
            r,
            s,
            x = this,
            xc = x.c;

        if (md != null) {
            n = new BigNumber(md);

            // Throw if md is less than one or is not an integer, unless it is Infinity.
            if ((!n.isInteger() && (n.c || n.s !== 1)) || n.lt(ONE)) {
                throw Error(
                    bignumberError +
                        'Argument ' +
                        (n.isInteger()
                            ? 'out of range: '
                            : 'not an integer: ') +
                        valueOf(n)
                );
            }
        }

        if (!xc) return new BigNumber(x);

        d = new BigNumber(ONE);
        n1 = d0 = new BigNumber(ONE);
        d1 = n0 = new BigNumber(ONE);
        s = coeffToString(xc);

        // Determine initial denominator.
        // d is a power of 10 and the minimum max denominator that specifies the value exactly.
        e = d.e = s.length - x.e - 1;
        d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
        md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

        exp = MAX_EXP;
        MAX_EXP = 1 / 0;
        n = new BigNumber(s);

        // n0 = d1 = 0
        n0.c[0] = 0;

        for (;;) {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.comparedTo(md) == 1) break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times((d2 = n1)));
            n0 = d2;
            d = n.minus(q.times((d2 = d)));
            n = d2;
        }

        d2 = div(md.minus(d0), d1, 0, 1);
        n0 = n0.plus(d2.times(n1));
        d0 = d0.plus(d2.times(d1));
        n0.s = n1.s = x.s;
        e = e * 2;

        // Determine which fraction is closer to x, n0/d0 or n1/d1
        r =
            div(n1, d1, e, ROUNDING_MODE)
                .minus(x)
                .abs()
                .comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1
                ? [n1, d1]
                : [n0, d0];

        MAX_EXP = exp;

        return r;
    };

    /*
     * Return the value of this BigNumber converted to a number primitive.
     */
    P.toNumber = function () {
        return +valueOf(this);
    };

    /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
    P.toPrecision = function (sd, rm) {
        if (sd != null) intCheck(sd, 1, MAX);
        return format(this, sd, rm, 2);
    };

    /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */
    P.toString = function (b) {
        var str,
            n = this,
            s = n.s,
            e = n.e;

        // Infinity or NaN?
        if (e === null) {
            if (s) {
                str = 'Infinity';
                if (s < 0) str = '-' + str;
            } else {
                str = 'NaN';
            }
        } else {
            if (b == null) {
                str =
                    e <= TO_EXP_NEG || e >= TO_EXP_POS
                        ? toExponential(coeffToString(n.c), e)
                        : toFixedPoint(coeffToString(n.c), e, '0');
            } else if (b === 10) {
                n = round(
                    new BigNumber(n),
                    DECIMAL_PLACES + e + 1,
                    ROUNDING_MODE
                );
                str = toFixedPoint(coeffToString(n.c), n.e, '0');
            } else {
                intCheck(b, 2, ALPHABET.length, 'Base');
                str = convertBase(
                    toFixedPoint(coeffToString(n.c), e, '0'),
                    10,
                    b,
                    s,
                    true
                );
            }

            if (s < 0 && n.c[0]) str = '-' + str;
        }

        return str;
    };

    /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */
    P.valueOf = P.toJSON = function () {
        return valueOf(this);
    };

    P._isBigNumber = true;

    P[Symbol.toStringTag] = 'BigNumber';

    // Node.js v10.12.0+
    P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;

    if (configObject != null) BigNumber.set(configObject);

    return BigNumber;
}

// PRIVATE HELPER FUNCTIONS

// These functions don't need access to variables,
// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.

function bitFloor(n) {
    var i = n | 0;
    return n > 0 || n === i ? i : i - 1;
}

// Return a coefficient array as a string of base 10 digits.
function coeffToString(a) {
    var s,
        z,
        i = 1,
        j = a.length,
        r = a[0] + '';

    for (; i < j; ) {
        s = a[i++] + '';
        z = LOG_BASE - s.length;
        for (; z--; s = '0' + s);
        r += s;
    }

    // Determine trailing zeros.
    for (j = r.length; r.charCodeAt(--j) === 48; );

    return r.slice(0, j + 1 || 1);
}

// Compare the value of BigNumbers x and y.
function compare(x, y) {
    var a,
        b,
        xc = x.c,
        yc = y.c,
        i = x.s,
        j = y.s,
        k = x.e,
        l = y.e;

    // Either NaN?
    if (!i || !j) return null;

    a = xc && !xc[0];
    b = yc && !yc[0];

    // Either zero?
    if (a || b) return a ? (b ? 0 : -j) : i;

    // Signs differ?
    if (i != j) return i;

    a = i < 0;
    b = k == l;

    // Either Infinity?
    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

    // Compare exponents.
    if (!b) return (k > l) ^ a ? 1 : -1;

    j = (k = xc.length) < (l = yc.length) ? k : l;

    // Compare digit by digit.
    for (i = 0; i < j; i++)
        if (xc[i] != yc[i]) return (xc[i] > yc[i]) ^ a ? 1 : -1;

    // Compare lengths.
    return k == l ? 0 : (k > l) ^ a ? 1 : -1;
}

/*
 * Check that n is a primitive number, an integer, and in range, otherwise throw.
 */
function intCheck(n, min, max, name) {
    if (n < min || n > max || n !== mathfloor(n)) {
        throw Error(
            bignumberError +
                (name || 'Argument') +
                (typeof n == 'number'
                    ? n < min || n > max
                        ? ' out of range: '
                        : ' not an integer: '
                    : ' not a primitive number: ') +
                String(n)
        );
    }
}

// Assumes finite n.
function isOdd(n) {
    var k = n.c.length - 1;
    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
}

function toExponential(str, e) {
    return (
        (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
        (e < 0 ? 'e' : 'e+') +
        e
    );
}

function toFixedPoint(str, e, z) {
    var len, zs;

    // Negative exponent?
    if (e < 0) {
        // Prepend zeros.
        for (zs = z + '.'; ++e; zs += z);
        str = zs + str;

        // Positive exponent
    } else {
        len = str.length;

        // Append zeros.
        if (++e > len) {
            for (zs = z, e -= len; --e; zs += z);
            str += zs;
        } else if (e < len) {
            str = str.slice(0, e) + '.' + str.slice(e);
        }
    }

    return str;
}

// EXPORT

var BigNumber = clone();

BigNumber.config({
    EXPONENTIAL_AT: [-100, 100],
    ROUNDING_MODE: 1,
    DECIMAL_PLACES: 18,
});
const ZERO = bnum(0);
const ONE = bnum(1);
const INFINITY = bnum('Infinity');
function scale(input, decimalPlaces) {
    const scalePow = new BigNumber(decimalPlaces.toString());
    const scaleMul = new BigNumber(10).pow(scalePow);
    return input.times(scaleMul);
}
function bnum(val) {
    return new BigNumber(val.toString());
}

const isSameAddress = (address1, address2) =>
    address.getAddress(address1) === address.getAddress(address2);

exports.SwapTypes = void 0;
(function (SwapTypes) {
    SwapTypes[(SwapTypes['SwapExactIn'] = 0)] = 'SwapExactIn';
    SwapTypes[(SwapTypes['SwapExactOut'] = 1)] = 'SwapExactOut';
})(exports.SwapTypes || (exports.SwapTypes = {}));
exports.PoolTypes = void 0;
(function (PoolTypes) {
    PoolTypes[(PoolTypes['Weighted'] = 0)] = 'Weighted';
    PoolTypes[(PoolTypes['Stable'] = 1)] = 'Stable';
    PoolTypes[(PoolTypes['Element'] = 2)] = 'Element';
    PoolTypes[(PoolTypes['MetaStable'] = 3)] = 'MetaStable';
    PoolTypes[(PoolTypes['Linear'] = 4)] = 'Linear';
})(exports.PoolTypes || (exports.PoolTypes = {}));
exports.SwapPairType = void 0;
(function (SwapPairType) {
    SwapPairType[(SwapPairType['Direct'] = 0)] = 'Direct';
    SwapPairType[(SwapPairType['HopIn'] = 1)] = 'HopIn';
    SwapPairType[(SwapPairType['HopOut'] = 2)] = 'HopOut';
})(exports.SwapPairType || (exports.SwapPairType = {}));
exports.PoolFilter = void 0;
(function (PoolFilter) {
    PoolFilter['All'] = 'All';
    PoolFilter['Weighted'] = 'Weighted';
    PoolFilter['Stable'] = 'Stable';
    PoolFilter['MetaStable'] = 'MetaStable';
    PoolFilter['LBP'] = 'LiquidityBootstrapping';
    PoolFilter['Investment'] = 'Investment';
    PoolFilter['Element'] = 'Element';
    PoolFilter['AaveLinear'] = 'AaveLinear';
    PoolFilter['StablePhantom'] = 'StablePhantom';
})(exports.PoolFilter || (exports.PoolFilter = {}));

const BZERO = BigInt(0);
const BONE = BigInt(1);
const _require = (b, message) => {
    if (!b) throw new Error(message);
};
class MathSol {
    /**
     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.
     */
    // add(a: bigint, b: bigint): bigint {
    //     const c = a + b;
    //     // _require(c >= a, Errors.ADD_OVERFLOW);
    //     return c;
    // }
    /**
     * @dev Returns the addition of two signed integers, reverting on overflow.
     */
    static add(a, b) {
        const c = a + b;
        _require((b >= 0 && c >= a) || (b < 0 && c < a), 'Errors.ADD_OVERFLOW');
        return c;
    }
    /**
     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.
     */
    static sub(a, b) {
        _require(b <= a, 'Errors.SUB_OVERFLOW');
        const c = a - b;
        return c;
    }
    /**
     * @dev Returns the subtraction of two signed integers, reverting on overflow.
     */
    // sub(int256 a, int256 b) internal pure returns (int256) {
    //     int256 c = a - b;
    //     // _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);
    //     return c;
    // }
    /**
     * @dev Returns the largest of two numbers of 256 bits.
     */
    static max(a, b) {
        return a >= b ? a : b;
    }
    /**
     * @dev Returns the smallest of two numbers of 256 bits.
     */
    static min(a, b) {
        return a < b ? a : b;
    }
    static mul(a, b) {
        const c = a * b;
        _require(a == BZERO || c / a == b, 'Errors.MUL_OVERFLOW');
        return c;
    }
    static div(a, b, roundUp) {
        return roundUp ? this.divUp(a, b) : this.divDown(a, b);
    }
    static divDown(a, b) {
        _require(b != BZERO, 'Errors.ZERO_DIVISION');
        return a / b;
    }
    static divUp(a, b) {
        _require(b != BZERO, 'Errors.ZERO_DIVISION');
        if (a == BZERO) {
            return BZERO;
        } else {
            return BONE + (a - BONE) / b;
        }
    }
    static mulUpFixed(a, b) {
        const product = a * b;
        _require(a == BZERO || product / a == b, 'Errors.MUL_OVERFLOW');
        if (product == BZERO) {
            return BZERO;
        } else {
            // The traditional divUp formula is:
            // divUp(x, y) := (x + y - 1) / y
            // To avoid intermediate overflow in the addition, we distribute the division and get:
            // divUp(x, y) := (x - 1) / y + 1
            // Note that this requires x != 0, which we already tested for.
            return (product - BONE) / this.ONE + BONE;
        }
    }
    // Modification: Taken from the fixed point class
    static divDownFixed(a, b) {
        _require(b != BZERO, 'Errors.ZERO_DIVISION');
        if (a == BZERO) {
            return BZERO;
        } else {
            const aInflated = a * this.ONE;
            // _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow
            return aInflated / b;
        }
    }
    // Modification: Taken from the fixed point class
    static divUpFixed(a, b) {
        _require(b != BZERO, 'Errors.ZERO_DIVISION');
        if (a == BZERO) {
            return BZERO;
        } else {
            const aInflated = a * this.ONE;
            _require(aInflated / a == this.ONE, 'Errors.DIV_INTERNAL'); // mul overflow
            // The traditional divUp formula is:
            // divUp(x, y) := (x + y - 1) / y
            // To avoid intermediate overflow in the addition, we distribute the division and get:
            // divUp(x, y) := (x - 1) / y + 1
            // Note that this requires x != 0, which we already tested for.
            return (aInflated - BONE) / b + BONE;
        }
    }
    // Modification: Taken from the fixed point class
    static powUpFixed(x, y) {
        const raw = LogExpMath.pow(x, y);
        const maxError = this.add(
            this.mulUpFixed(raw, this.MAX_POW_RELATIVE_ERROR),
            BONE
        );
        return this.add(raw, maxError);
    }
    // Modification: Taken from the fixed point class
    static complementFixed(x) {
        return x < this.ONE ? this.ONE - x : BZERO;
    }
    static mulDownFixed(a, b) {
        const product = a * b;
        _require(a == BZERO || product / a == b, 'Errors.MUL_OVERFLOW');
        return product / this.ONE;
    }
}
// Modification: Taken from the fixed point class
MathSol.ONE = BigInt('1000000000000000000'); // 18 decimal places
MathSol.MAX_POW_RELATIVE_ERROR = BigInt(10000);
class LogExpMath {
    // All arguments and return values are 18 decimal fixed point numbers.
    static pow(x, y) {
        if (y === BZERO) {
            // We solve the 0^0 indetermination by making it equal one.
            return this.ONE_18;
        }
        if (x == BZERO) {
            return BZERO;
        }
        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to
        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means
        // x^y = exp(y * ln(x)).
        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.
        _require(
            x <
                BigInt(
                    '57896044618658097711785492504343953926634992332820282019728792003956564819968'
                ),
            'Errors.X_OUT_OF_BOUNDS'
        );
        const x_int256 = x;
        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In
        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.
        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.
        _require(y < this.MILD_EXPONENT_BOUND, 'Errors.Y_OUT_OF_BOUNDS');
        const y_int256 = y;
        let logx_times_y;
        if (
            this.LN_36_LOWER_BOUND < x_int256 &&
            x_int256 < this.LN_36_UPPER_BOUND
        ) {
            const ln_36_x = this._ln_36(x_int256);
            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just
            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal
            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the
            // (downscaled) last 18 decimals.
            logx_times_y =
                (ln_36_x / this.ONE_18) * y_int256 +
                ((ln_36_x % this.ONE_18) * y_int256) / this.ONE_18;
        } else {
            logx_times_y = this._ln(x_int256) * y_int256;
        }
        logx_times_y /= this.ONE_18;
        // Finally, we compute exp(y * ln(x)) to arrive at x^y
        _require(
            this.MIN_NATURAL_EXPONENT <= logx_times_y &&
                logx_times_y <= this.MAX_NATURAL_EXPONENT,
            'Errors.PRODUCT_OUT_OF_BOUNDS'
        );
        // return uint256(exp(logx_times_y));
        return this.exp(logx_times_y);
    }
    static exp(x) {
        _require(
            x >= this.MIN_NATURAL_EXPONENT && x <= this.MAX_NATURAL_EXPONENT,
            'Errors.INVALID_EXPONENT'
        );
        if (x < 0) {
            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it
            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).
            // Fixed point division requires multiplying by ONE_18.
            return (this.ONE_18 * this.ONE_18) / this.exp(BigInt(-1) * x);
        }
        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,
        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7
        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the
        // decomposition.
        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this
        // decomposition, which will be lower than the smallest x_n.
        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.
        // We mutate x by subtracting x_n, making it the remainder of the decomposition.
        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause
        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.
        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the
        // decomposition.
        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct
        // it and compute the accumulated product.
        let firstAN;
        if (x >= this.x0) {
            x -= this.x0;
            firstAN = this.a0;
        } else if (x >= this.x1) {
            x -= this.x1;
            firstAN = this.a1;
        } else {
            firstAN = BigInt(1); // One with no decimal places
        }
        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the
        // smaller terms.
        x *= BigInt(100);
        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point
        // one. Recall that fixed point multiplication requires dividing by ONE_20.
        let product = this.ONE_20;
        if (x >= this.x2) {
            x -= this.x2;
            product = (product * this.a2) / this.ONE_20;
        }
        if (x >= this.x3) {
            x -= this.x3;
            product = (product * this.a3) / this.ONE_20;
        }
        if (x >= this.x4) {
            x -= this.x4;
            product = (product * this.a4) / this.ONE_20;
        }
        if (x >= this.x5) {
            x -= this.x5;
            product = (product * this.a5) / this.ONE_20;
        }
        if (x >= this.x6) {
            x -= this.x6;
            product = (product * this.a6) / this.ONE_20;
        }
        if (x >= this.x7) {
            x -= this.x7;
            product = (product * this.a7) / this.ONE_20;
        }
        if (x >= this.x8) {
            x -= this.x8;
            product = (product * this.a8) / this.ONE_20;
        }
        if (x >= this.x9) {
            x -= this.x9;
            product = (product * this.a9) / this.ONE_20;
        }
        // x10 and x11 are unnecessary here since we have high enough precision already.
        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series
        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).
        let seriesSum = this.ONE_20; // The initial one in the sum, with 20 decimal places.
        let term; // Each term in the sum, where the nth term is (x^n / n!).
        // The first term is simply x.
        term = x;
        seriesSum += term;
        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,
        // multiplying by it requires dividing by this.ONE_20, but dividing by the non-fixed point n values does not.
        term = (term * x) / this.ONE_20 / BigInt(2);
        seriesSum += term;
        term = (term * x) / this.ONE_20 / BigInt(3);
        seriesSum += term;
        term = (term * x) / this.ONE_20 / BigInt(4);
        seriesSum += term;
        term = (term * x) / this.ONE_20 / BigInt(5);
        seriesSum += term;
        term = (term * x) / this.ONE_20 / BigInt(6);
        seriesSum += term;
        term = (term * x) / this.ONE_20 / BigInt(7);
        seriesSum += term;
        term = (term * x) / this.ONE_20 / BigInt(8);
        seriesSum += term;
        term = (term * x) / this.ONE_20 / BigInt(9);
        seriesSum += term;
        term = (term * x) / this.ONE_20 / BigInt(10);
        seriesSum += term;
        term = (term * x) / this.ONE_20 / BigInt(11);
        seriesSum += term;
        term = (term * x) / this.ONE_20 / BigInt(12);
        seriesSum += term;
        // 12 Taylor terms are sufficient for 18 decimal precision.
        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor
        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply
        // all three (one 20 decimal fixed point multiplication, dividing by this.ONE_20, and one integer multiplication),
        // and then drop two digits to return an 18 decimal value.
        return (((product * seriesSum) / this.ONE_20) * firstAN) / BigInt(100);
    }
    static _ln_36(x) {
        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits
        // worthwhile.
        // First, we transform x to a 36 digit fixed point value.
        x *= this.ONE_18;
        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).
        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))
        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires
        // division by ONE_36.
        const z = ((x - this.ONE_36) * this.ONE_36) / (x + this.ONE_36);
        const z_squared = (z * z) / this.ONE_36;
        // num is the numerator of the series: the z^(2 * n + 1) term
        let num = z;
        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z
        let seriesSum = num;
        // In each step, the numerator is multiplied by z^2
        num = (num * z_squared) / this.ONE_36;
        seriesSum += num / BigInt(3);
        num = (num * z_squared) / this.ONE_36;
        seriesSum += num / BigInt(5);
        num = (num * z_squared) / this.ONE_36;
        seriesSum += num / BigInt(7);
        num = (num * z_squared) / this.ONE_36;
        seriesSum += num / BigInt(9);
        num = (num * z_squared) / this.ONE_36;
        seriesSum += num / BigInt(11);
        num = (num * z_squared) / this.ONE_36;
        seriesSum += num / BigInt(13);
        num = (num * z_squared) / this.ONE_36;
        seriesSum += num / BigInt(15);
        // 8 Taylor terms are sufficient for 36 decimal precision.
        // All that remains is multiplying by 2 (non fixed point).
        return seriesSum * BigInt(2);
    }
    /**
     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.
     */
    static _ln(a) {
        if (a < this.ONE_18) {
            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less
            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.
            // Fixed point division requires multiplying by this.ONE_18.
            return BigInt(-1) * this._ln((this.ONE_18 * this.ONE_18) / a);
        }
        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which
        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,
        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot
        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.
        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this
        // decomposition, which will be lower than the smallest a_n.
        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.
        // We mutate a by subtracting a_n, making it the remainder of the decomposition.
        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point
        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by
        // this.ONE_18 to convert them to fixed point.
        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide
        // by it and compute the accumulated sum.
        let sum = BZERO;
        if (a >= this.a0 * this.ONE_18) {
            a /= this.a0; // Integer, not fixed point division
            sum += this.x0;
        }
        if (a >= this.a1 * this.ONE_18) {
            a /= this.a1; // Integer, not fixed point division
            sum += this.x1;
        }
        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.
        sum *= BigInt(100);
        a *= BigInt(100);
        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.
        if (a >= this.a2) {
            a = (a * this.ONE_20) / this.a2;
            sum += this.x2;
        }
        if (a >= this.a3) {
            a = (a * this.ONE_20) / this.a3;
            sum += this.x3;
        }
        if (a >= this.a4) {
            a = (a * this.ONE_20) / this.a4;
            sum += this.x4;
        }
        if (a >= this.a5) {
            a = (a * this.ONE_20) / this.a5;
            sum += this.x5;
        }
        if (a >= this.a6) {
            a = (a * this.ONE_20) / this.a6;
            sum += this.x6;
        }
        if (a >= this.a7) {
            a = (a * this.ONE_20) / this.a7;
            sum += this.x7;
        }
        if (a >= this.a8) {
            a = (a * this.ONE_20) / this.a8;
            sum += this.x8;
        }
        if (a >= this.a9) {
            a = (a * this.ONE_20) / this.a9;
            sum += this.x9;
        }
        if (a >= this.a10) {
            a = (a * this.ONE_20) / this.a10;
            sum += this.x10;
        }
        if (a >= this.a11) {
            a = (a * this.ONE_20) / this.a11;
            sum += this.x11;
        }
        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series
        // that converges rapidly for values of `a` close to one - the same one used in ln_36.
        // Let z = (a - 1) / (a + 1).
        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))
        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires
        // division by ONE_20.
        const z = ((a - this.ONE_20) * this.ONE_20) / (a + this.ONE_20);
        const z_squared = (z * z) / this.ONE_20;
        // num is the numerator of the series: the z^(2 * n + 1) term
        let num = z;
        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z
        let seriesSum = num;
        // In each step, the numerator is multiplied by z^2
        num = (num * z_squared) / this.ONE_20;
        seriesSum += num / BigInt(3);
        num = (num * z_squared) / this.ONE_20;
        seriesSum += num / BigInt(5);
        num = (num * z_squared) / this.ONE_20;
        seriesSum += num / BigInt(7);
        num = (num * z_squared) / this.ONE_20;
        seriesSum += num / BigInt(9);
        num = (num * z_squared) / this.ONE_20;
        seriesSum += num / BigInt(11);
        // 6 Taylor terms are sufficient for 36 decimal precision.
        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)
        seriesSum *= BigInt(2);
        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both
        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal
        // value.
        return (sum + seriesSum) / BigInt(100);
    }
}
// All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying
// two numbers, and multiply by ONE when dividing them.
// All arguments and return values are 18 decimal fixed point numbers.
LogExpMath.ONE_18 = BigInt('1000000000000000000');
// Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the
// case of ln36, 36 decimals.
LogExpMath.ONE_20 = BigInt('100000000000000000000');
LogExpMath.ONE_36 = BigInt('1000000000000000000000000000000000000');
// The domain of natural exponentiation is bound by the word size and number of decimals used.
//
// Because internally the result will be stored using 20 decimals, the largest possible result is
// (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.
// The smallest possible result is 10^(-18), which makes largest negative argument
// ln(10^(-18)) = -41.446531673892822312.
// We use 130.0 and -41.0 to have some safety margin.
LogExpMath.MAX_NATURAL_EXPONENT = BigInt('130000000000000000000');
LogExpMath.MIN_NATURAL_EXPONENT = BigInt('-41000000000000000000');
// Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point
// 256 bit integer.
LogExpMath.LN_36_LOWER_BOUND =
    BigInt(LogExpMath.ONE_18) - BigInt('100000000000000000');
LogExpMath.LN_36_UPPER_BOUND =
    BigInt(LogExpMath.ONE_18) + BigInt('100000000000000000');
LogExpMath.MILD_EXPONENT_BOUND = BigInt(2) ** BigInt(254) / LogExpMath.ONE_20;
// 18 decimal constants
LogExpMath.x0 = BigInt('128000000000000000000'); // 2ˆ7
LogExpMath.a0 = BigInt(
    '38877084059945950922200000000000000000000000000000000000'
); // eˆ(x0) (no decimals)
LogExpMath.x1 = BigInt('64000000000000000000'); // 2ˆ6
LogExpMath.a1 = BigInt('6235149080811616882910000000'); // eˆ(x1) (no decimals)
// 20 decimal constants
LogExpMath.x2 = BigInt('3200000000000000000000'); // 2ˆ5
LogExpMath.a2 = BigInt('7896296018268069516100000000000000'); // eˆ(x2)
LogExpMath.x3 = BigInt('1600000000000000000000'); // 2ˆ4
LogExpMath.a3 = BigInt('888611052050787263676000000'); // eˆ(x3)
LogExpMath.x4 = BigInt('800000000000000000000'); // 2ˆ3
LogExpMath.a4 = BigInt('298095798704172827474000'); // eˆ(x4)
LogExpMath.x5 = BigInt('400000000000000000000'); // 2ˆ2
LogExpMath.a5 = BigInt('5459815003314423907810'); // eˆ(x5)
LogExpMath.x6 = BigInt('200000000000000000000'); // 2ˆ1
LogExpMath.a6 = BigInt('738905609893065022723'); // eˆ(x6)
LogExpMath.x7 = BigInt('100000000000000000000'); // 2ˆ0
LogExpMath.a7 = BigInt('271828182845904523536'); // eˆ(x7)
LogExpMath.x8 = BigInt('50000000000000000000'); // 2ˆ-1
LogExpMath.a8 = BigInt('164872127070012814685'); // eˆ(x8)
LogExpMath.x9 = BigInt('25000000000000000000'); // 2ˆ-2
LogExpMath.a9 = BigInt('128402541668774148407'); // eˆ(x9)
LogExpMath.x10 = BigInt('12500000000000000000'); // 2ˆ-3
LogExpMath.a10 = BigInt('113314845306682631683'); // eˆ(x10)
LogExpMath.x11 = BigInt('6250000000000000000'); // 2ˆ-4
LogExpMath.a11 = BigInt('106449445891785942956'); // eˆ(x11)

// The following function are BigInt versions implemented by Sergio.
// BigInt was requested from integrators as it is more efficient.
// Swap outcomes formulas should match exactly those from smart contracts.
// PairType = 'token->token'
// SwapType = 'swapExactIn'
function _calcOutGivenIn$1(
    balanceIn,
    weightIn,
    balanceOut,
    weightOut,
    amountIn,
    fee
) {
    // is it necessary to check ranges of variables? same for the other functions
    amountIn = subtractFee$1(amountIn, fee);
    const exponent = MathSol.divDownFixed(weightIn, weightOut);
    const denominator = MathSol.add(balanceIn, amountIn);
    const base = MathSol.divUpFixed(balanceIn, denominator);
    const power = MathSol.powUpFixed(base, exponent);
    return MathSol.mulDownFixed(balanceOut, MathSol.complementFixed(power));
}
// PairType = 'token->token'
// SwapType = 'swapExactOut'
function _calcInGivenOut$1(
    balanceIn,
    weightIn,
    balanceOut,
    weightOut,
    amountOut,
    fee
) {
    const base = MathSol.divUpFixed(balanceOut, balanceOut - amountOut);
    const exponent = MathSol.divUpFixed(weightOut, weightIn);
    const power = MathSol.powUpFixed(base, exponent);
    const ratio = MathSol.sub(power, MathSol.ONE);
    const amountIn = MathSol.mulUpFixed(balanceIn, ratio);
    return addFee$1(amountIn, fee);
}
function subtractFee$1(amount, fee) {
    const feeAmount = MathSol.mulUpFixed(amount, fee);
    return amount - feeAmount;
}
function addFee$1(amount, fee) {
    return MathSol.divUpFixed(amount, MathSol.complementFixed(fee));
}
// The following functions are TS versions originally implemented by Fernando
// All functions came from https://www.wolframcloud.com/obj/fernando.martinel/Published/SOR_equations_published.nb
// PairType = 'token->BPT'
// SwapType = 'swapExactOut'
function _spotPriceAfterSwapTokenInForExactBPTOut$3(amount, poolPairData) {
    const Bi = parseFloat(
        bignumber.formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)
    );
    const Bbpt = parseFloat(bignumber.formatFixed(poolPairData.balanceOut, 18));
    const wi = parseFloat(bignumber.formatFixed(poolPairData.weightIn, 18));
    const Aobpt = amount.toNumber();
    const f = parseFloat(bignumber.formatFixed(poolPairData.swapFee, 18));
    return bnum(
        (((Aobpt + Bbpt) / Bbpt) ** (1 / wi) * Bi) /
            ((Aobpt + Bbpt) * (1 + f * (-1 + wi)) * wi)
    );
}
/////////
///  Derivatives of spotPriceAfterSwap
/////////
// PairType = 'token->token'
// SwapType = 'swapExactIn'
function _derivativeSpotPriceAfterSwapExactTokenInForTokenOut$4(
    amount,
    poolPairData
) {
    const Bi = parseFloat(
        bignumber.formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)
    );
    const Bo = parseFloat(
        bignumber.formatFixed(poolPairData.balanceOut, poolPairData.decimalsOut)
    );
    const wi = parseFloat(bignumber.formatFixed(poolPairData.weightIn, 18));
    const wo = parseFloat(bignumber.formatFixed(poolPairData.weightOut, 18));
    const Ai = amount.toNumber();
    const f = parseFloat(bignumber.formatFixed(poolPairData.swapFee, 18));
    return bnum((wi + wo) / (Bo * (Bi / (Ai + Bi - Ai * f)) ** (wi / wo) * wi));
}
// PairType = 'token->token'
// SwapType = 'swapExactOut'
function _derivativeSpotPriceAfterSwapTokenInForExactTokenOut$4(
    amount,
    poolPairData
) {
    const Bi = parseFloat(
        bignumber.formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)
    );
    const Bo = parseFloat(
        bignumber.formatFixed(poolPairData.balanceOut, poolPairData.decimalsOut)
    );
    const wi = parseFloat(bignumber.formatFixed(poolPairData.weightIn, 18));
    const wo = parseFloat(bignumber.formatFixed(poolPairData.weightOut, 18));
    const Ao = amount.toNumber();
    const f = parseFloat(bignumber.formatFixed(poolPairData.swapFee, 18));
    return bnum(
        -(
            (Bi * (Bo / (-Ao + Bo)) ** (wo / wi) * wo * (wi + wo)) /
            ((Ao - Bo) ** 2 * (-1 + f) * wi ** 2)
        )
    );
}
// PairType = 'token->token'
// SwapType = 'swapExactIn'
function _spotPriceAfterSwapExactTokenInForTokenOut$4(amount, poolPairData) {
    const Bi = parseFloat(
        bignumber.formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)
    );
    const Bo = parseFloat(
        bignumber.formatFixed(poolPairData.balanceOut, poolPairData.decimalsOut)
    );
    const wi = parseFloat(bignumber.formatFixed(poolPairData.weightIn, 18));
    const wo = parseFloat(bignumber.formatFixed(poolPairData.weightOut, 18));
    const Ai = amount.toNumber();
    const f = parseFloat(bignumber.formatFixed(poolPairData.swapFee, 18));
    return bnum(
        -(
            (Bi * wo) /
            (Bo * (-1 + f) * (Bi / (Ai + Bi - Ai * f)) ** ((wi + wo) / wo) * wi)
        )
    );
}
// PairType = 'token->token'
// SwapType = 'swapExactOut'
function _spotPriceAfterSwapTokenInForExactTokenOut$4(amount, poolPairData) {
    const Bi = parseFloat(
        bignumber.formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)
    );
    const Bo = parseFloat(
        bignumber.formatFixed(poolPairData.balanceOut, poolPairData.decimalsOut)
    );
    const wi = parseFloat(bignumber.formatFixed(poolPairData.weightIn, 18));
    const wo = parseFloat(bignumber.formatFixed(poolPairData.weightOut, 18));
    const Ao = amount.toNumber();
    const f = parseFloat(bignumber.formatFixed(poolPairData.swapFee, 18));
    return bnum(
        -(
            (Bi * (Bo / (-Ao + Bo)) ** ((wi + wo) / wi) * wo) /
            (Bo * (-1 + f) * wi)
        )
    );
}

var lodash = { exports: {} };

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

(function (module, exports) {
    (function () {
        /** Used as a safe reference for `undefined` in pre-ES5 environments. */
        var undefined$1;

        /** Used as the semantic version number. */
        var VERSION = '4.17.20';

        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200;

        /** Error message constants. */
        var CORE_ERROR_TEXT =
                'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
            FUNC_ERROR_TEXT = 'Expected a function';

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';

        /** Used as the maximum memoize cache size. */
        var MAX_MEMOIZE_SIZE = 500;

        /** Used as the internal argument placeholder. */
        var PLACEHOLDER = '__lodash_placeholder__';

        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1,
            CLONE_FLAT_FLAG = 2,
            CLONE_SYMBOLS_FLAG = 4;

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
            WRAP_BIND_KEY_FLAG = 2,
            WRAP_CURRY_BOUND_FLAG = 4,
            WRAP_CURRY_FLAG = 8,
            WRAP_CURRY_RIGHT_FLAG = 16,
            WRAP_PARTIAL_FLAG = 32,
            WRAP_PARTIAL_RIGHT_FLAG = 64,
            WRAP_ARY_FLAG = 128,
            WRAP_REARG_FLAG = 256,
            WRAP_FLIP_FLAG = 512;

        /** Used as default options for `_.truncate`. */
        var DEFAULT_TRUNC_LENGTH = 30,
            DEFAULT_TRUNC_OMISSION = '...';

        /** Used to detect hot functions by number of calls within a span of milliseconds. */
        var HOT_COUNT = 800,
            HOT_SPAN = 16;

        /** Used to indicate the type of lazy iteratees. */
        var LAZY_FILTER_FLAG = 1,
            LAZY_MAP_FLAG = 2,
            LAZY_WHILE_FLAG = 3;

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0,
            MAX_SAFE_INTEGER = 9007199254740991,
            MAX_INTEGER = 1.7976931348623157e308,
            NAN = 0 / 0;

        /** Used as references for the maximum length and index of an array. */
        var MAX_ARRAY_LENGTH = 4294967295,
            MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
            HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

        /** Used to associate wrap methods with their bit flags. */
        var wrapFlags = [
            ['ary', WRAP_ARY_FLAG],
            ['bind', WRAP_BIND_FLAG],
            ['bindKey', WRAP_BIND_KEY_FLAG],
            ['curry', WRAP_CURRY_FLAG],
            ['curryRight', WRAP_CURRY_RIGHT_FLAG],
            ['flip', WRAP_FLIP_FLAG],
            ['partial', WRAP_PARTIAL_FLAG],
            ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
            ['rearg', WRAP_REARG_FLAG],
        ];

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]',
            arrayTag = '[object Array]',
            asyncTag = '[object AsyncFunction]',
            boolTag = '[object Boolean]',
            dateTag = '[object Date]',
            domExcTag = '[object DOMException]',
            errorTag = '[object Error]',
            funcTag = '[object Function]',
            genTag = '[object GeneratorFunction]',
            mapTag = '[object Map]',
            numberTag = '[object Number]',
            nullTag = '[object Null]',
            objectTag = '[object Object]',
            promiseTag = '[object Promise]',
            proxyTag = '[object Proxy]',
            regexpTag = '[object RegExp]',
            setTag = '[object Set]',
            stringTag = '[object String]',
            symbolTag = '[object Symbol]',
            undefinedTag = '[object Undefined]',
            weakMapTag = '[object WeakMap]',
            weakSetTag = '[object WeakSet]';

        var arrayBufferTag = '[object ArrayBuffer]',
            dataViewTag = '[object DataView]',
            float32Tag = '[object Float32Array]',
            float64Tag = '[object Float64Array]',
            int8Tag = '[object Int8Array]',
            int16Tag = '[object Int16Array]',
            int32Tag = '[object Int32Array]',
            uint8Tag = '[object Uint8Array]',
            uint8ClampedTag = '[object Uint8ClampedArray]',
            uint16Tag = '[object Uint16Array]',
            uint32Tag = '[object Uint32Array]';

        /** Used to match empty string literals in compiled template source. */
        var reEmptyStringLeading = /\b__p \+= '';/g,
            reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
            reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

        /** Used to match HTML entities and HTML characters. */
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
            reUnescapedHtml = /[&<>"']/g,
            reHasEscapedHtml = RegExp(reEscapedHtml.source),
            reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

        /** Used to match template delimiters. */
        var reEscape = /<%-([\s\S]+?)%>/g,
            reEvaluate = /<%([\s\S]+?)%>/g,
            reInterpolate = /<%=([\s\S]+?)%>/g;

        /** Used to match property names within property paths. */
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            reIsPlainProp = /^\w*$/,
            rePropName =
                /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
            reHasRegExpChar = RegExp(reRegExpChar.source);

        /** Used to match leading and trailing whitespace. */
        var reTrim = /^\s+|\s+$/g,
            reTrimStart = /^\s+/,
            reTrimEnd = /\s+$/;

        /** Used to match wrap detail comments. */
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
            reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
            reSplitDetails = /,? & /;

        /** Used to match words composed of alphanumeric characters. */
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

        /** Used to match backslashes in property paths. */
        var reEscapeChar = /\\(\\)?/g;

        /**
         * Used to match
         * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
         */
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

        /** Used to match `RegExp` flags from their coerced string values. */
        var reFlags = /\w*$/;

        /** Used to detect bad signed hexadecimal string values. */
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

        /** Used to detect binary string values. */
        var reIsBinary = /^0b[01]+$/i;

        /** Used to detect host constructors (Safari). */
        var reIsHostCtor = /^\[object .+?Constructor\]$/;

        /** Used to detect octal string values. */
        var reIsOctal = /^0o[0-7]+$/i;

        /** Used to detect unsigned integer values. */
        var reIsUint = /^(?:0|[1-9]\d*)$/;

        /** Used to match Latin Unicode letters (excluding mathematical operators). */
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

        /** Used to ensure capturing order of template delimiters. */
        var reNoMatch = /($^)/;

        /** Used to match unescaped characters in compiled string literals. */
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

        /** Used to compose unicode character classes. */
        var rsAstralRange = '\\ud800-\\udfff',
            rsComboMarksRange = '\\u0300-\\u036f',
            reComboHalfMarksRange = '\\ufe20-\\ufe2f',
            rsComboSymbolsRange = '\\u20d0-\\u20ff',
            rsComboRange =
                rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
            rsDingbatRange = '\\u2700-\\u27bf',
            rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
            rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
            rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
            rsPunctuationRange = '\\u2000-\\u206f',
            rsSpaceRange =
                ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
            rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
            rsVarRange = '\\ufe0e\\ufe0f',
            rsBreakRange =
                rsMathOpRange +
                rsNonCharRange +
                rsPunctuationRange +
                rsSpaceRange;

        /** Used to compose unicode capture groups. */
        var rsApos = "['\u2019]",
            rsAstral = '[' + rsAstralRange + ']',
            rsBreak = '[' + rsBreakRange + ']',
            rsCombo = '[' + rsComboRange + ']',
            rsDigits = '\\d+',
            rsDingbat = '[' + rsDingbatRange + ']',
            rsLower = '[' + rsLowerRange + ']',
            rsMisc =
                '[^' +
                rsAstralRange +
                rsBreakRange +
                rsDigits +
                rsDingbatRange +
                rsLowerRange +
                rsUpperRange +
                ']',
            rsFitz = '\\ud83c[\\udffb-\\udfff]',
            rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
            rsNonAstral = '[^' + rsAstralRange + ']',
            rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
            rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
            rsUpper = '[' + rsUpperRange + ']',
            rsZWJ = '\\u200d';

        /** Used to compose unicode regexes. */
        var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
            rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
            rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
            rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
            reOptMod = rsModifier + '?',
            rsOptVar = '[' + rsVarRange + ']?',
            rsOptJoin =
                '(?:' +
                rsZWJ +
                '(?:' +
                [rsNonAstral, rsRegional, rsSurrPair].join('|') +
                ')' +
                rsOptVar +
                reOptMod +
                ')*',
            rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
            rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
            rsSeq = rsOptVar + reOptMod + rsOptJoin,
            rsEmoji =
                '(?:' +
                [rsDingbat, rsRegional, rsSurrPair].join('|') +
                ')' +
                rsSeq,
            rsSymbol =
                '(?:' +
                [
                    rsNonAstral + rsCombo + '?',
                    rsCombo,
                    rsRegional,
                    rsSurrPair,
                    rsAstral,
                ].join('|') +
                ')';

        /** Used to match apostrophes. */
        var reApos = RegExp(rsApos, 'g');

        /**
         * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
         * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
         */
        var reComboMark = RegExp(rsCombo, 'g');

        /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
        var reUnicode = RegExp(
            rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq,
            'g'
        );

        /** Used to match complex or compound words. */
        var reUnicodeWord = RegExp(
            [
                rsUpper +
                    '?' +
                    rsLower +
                    '+' +
                    rsOptContrLower +
                    '(?=' +
                    [rsBreak, rsUpper, '$'].join('|') +
                    ')',
                rsMiscUpper +
                    '+' +
                    rsOptContrUpper +
                    '(?=' +
                    [rsBreak, rsUpper + rsMiscLower, '$'].join('|') +
                    ')',
                rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
                rsUpper + '+' + rsOptContrUpper,
                rsOrdUpper,
                rsOrdLower,
                rsDigits,
                rsEmoji,
            ].join('|'),
            'g'
        );

        /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
        var reHasUnicode = RegExp(
            '[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']'
        );

        /** Used to detect strings that need a more robust regexp to match words. */
        var reHasUnicodeWord =
            /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

        /** Used to assign default `context` object properties. */
        var contextProps = [
            'Array',
            'Buffer',
            'DataView',
            'Date',
            'Error',
            'Float32Array',
            'Float64Array',
            'Function',
            'Int8Array',
            'Int16Array',
            'Int32Array',
            'Map',
            'Math',
            'Object',
            'Promise',
            'RegExp',
            'Set',
            'String',
            'Symbol',
            'TypeError',
            'Uint8Array',
            'Uint8ClampedArray',
            'Uint16Array',
            'Uint32Array',
            'WeakMap',
            '_',
            'clearTimeout',
            'isFinite',
            'parseInt',
            'setTimeout',
        ];

        /** Used to make template sourceURLs easier to identify. */
        var templateCounter = -1;

        /** Used to identify `toStringTag` values of typed arrays. */
        var typedArrayTags = {};
        typedArrayTags[float32Tag] =
            typedArrayTags[float64Tag] =
            typedArrayTags[int8Tag] =
            typedArrayTags[int16Tag] =
            typedArrayTags[int32Tag] =
            typedArrayTags[uint8Tag] =
            typedArrayTags[uint8ClampedTag] =
            typedArrayTags[uint16Tag] =
            typedArrayTags[uint32Tag] =
                true;
        typedArrayTags[argsTag] =
            typedArrayTags[arrayTag] =
            typedArrayTags[arrayBufferTag] =
            typedArrayTags[boolTag] =
            typedArrayTags[dataViewTag] =
            typedArrayTags[dateTag] =
            typedArrayTags[errorTag] =
            typedArrayTags[funcTag] =
            typedArrayTags[mapTag] =
            typedArrayTags[numberTag] =
            typedArrayTags[objectTag] =
            typedArrayTags[regexpTag] =
            typedArrayTags[setTag] =
            typedArrayTags[stringTag] =
            typedArrayTags[weakMapTag] =
                false;

        /** Used to identify `toStringTag` values supported by `_.clone`. */
        var cloneableTags = {};
        cloneableTags[argsTag] =
            cloneableTags[arrayTag] =
            cloneableTags[arrayBufferTag] =
            cloneableTags[dataViewTag] =
            cloneableTags[boolTag] =
            cloneableTags[dateTag] =
            cloneableTags[float32Tag] =
            cloneableTags[float64Tag] =
            cloneableTags[int8Tag] =
            cloneableTags[int16Tag] =
            cloneableTags[int32Tag] =
            cloneableTags[mapTag] =
            cloneableTags[numberTag] =
            cloneableTags[objectTag] =
            cloneableTags[regexpTag] =
            cloneableTags[setTag] =
            cloneableTags[stringTag] =
            cloneableTags[symbolTag] =
            cloneableTags[uint8Tag] =
            cloneableTags[uint8ClampedTag] =
            cloneableTags[uint16Tag] =
            cloneableTags[uint32Tag] =
                true;
        cloneableTags[errorTag] =
            cloneableTags[funcTag] =
            cloneableTags[weakMapTag] =
                false;

        /** Used to map Latin Unicode letters to basic Latin letters. */
        var deburredLetters = {
            // Latin-1 Supplement block.
            '\xc0': 'A',
            '\xc1': 'A',
            '\xc2': 'A',
            '\xc3': 'A',
            '\xc4': 'A',
            '\xc5': 'A',
            '\xe0': 'a',
            '\xe1': 'a',
            '\xe2': 'a',
            '\xe3': 'a',
            '\xe4': 'a',
            '\xe5': 'a',
            '\xc7': 'C',
            '\xe7': 'c',
            '\xd0': 'D',
            '\xf0': 'd',
            '\xc8': 'E',
            '\xc9': 'E',
            '\xca': 'E',
            '\xcb': 'E',
            '\xe8': 'e',
            '\xe9': 'e',
            '\xea': 'e',
            '\xeb': 'e',
            '\xcc': 'I',
            '\xcd': 'I',
            '\xce': 'I',
            '\xcf': 'I',
            '\xec': 'i',
            '\xed': 'i',
            '\xee': 'i',
            '\xef': 'i',
            '\xd1': 'N',
            '\xf1': 'n',
            '\xd2': 'O',
            '\xd3': 'O',
            '\xd4': 'O',
            '\xd5': 'O',
            '\xd6': 'O',
            '\xd8': 'O',
            '\xf2': 'o',
            '\xf3': 'o',
            '\xf4': 'o',
            '\xf5': 'o',
            '\xf6': 'o',
            '\xf8': 'o',
            '\xd9': 'U',
            '\xda': 'U',
            '\xdb': 'U',
            '\xdc': 'U',
            '\xf9': 'u',
            '\xfa': 'u',
            '\xfb': 'u',
            '\xfc': 'u',
            '\xdd': 'Y',
            '\xfd': 'y',
            '\xff': 'y',
            '\xc6': 'Ae',
            '\xe6': 'ae',
            '\xde': 'Th',
            '\xfe': 'th',
            '\xdf': 'ss',
            // Latin Extended-A block.
            '\u0100': 'A',
            '\u0102': 'A',
            '\u0104': 'A',
            '\u0101': 'a',
            '\u0103': 'a',
            '\u0105': 'a',
            '\u0106': 'C',
            '\u0108': 'C',
            '\u010a': 'C',
            '\u010c': 'C',
            '\u0107': 'c',
            '\u0109': 'c',
            '\u010b': 'c',
            '\u010d': 'c',
            '\u010e': 'D',
            '\u0110': 'D',
            '\u010f': 'd',
            '\u0111': 'd',
            '\u0112': 'E',
            '\u0114': 'E',
            '\u0116': 'E',
            '\u0118': 'E',
            '\u011a': 'E',
            '\u0113': 'e',
            '\u0115': 'e',
            '\u0117': 'e',
            '\u0119': 'e',
            '\u011b': 'e',
            '\u011c': 'G',
            '\u011e': 'G',
            '\u0120': 'G',
            '\u0122': 'G',
            '\u011d': 'g',
            '\u011f': 'g',
            '\u0121': 'g',
            '\u0123': 'g',
            '\u0124': 'H',
            '\u0126': 'H',
            '\u0125': 'h',
            '\u0127': 'h',
            '\u0128': 'I',
            '\u012a': 'I',
            '\u012c': 'I',
            '\u012e': 'I',
            '\u0130': 'I',
            '\u0129': 'i',
            '\u012b': 'i',
            '\u012d': 'i',
            '\u012f': 'i',
            '\u0131': 'i',
            '\u0134': 'J',
            '\u0135': 'j',
            '\u0136': 'K',
            '\u0137': 'k',
            '\u0138': 'k',
            '\u0139': 'L',
            '\u013b': 'L',
            '\u013d': 'L',
            '\u013f': 'L',
            '\u0141': 'L',
            '\u013a': 'l',
            '\u013c': 'l',
            '\u013e': 'l',
            '\u0140': 'l',
            '\u0142': 'l',
            '\u0143': 'N',
            '\u0145': 'N',
            '\u0147': 'N',
            '\u014a': 'N',
            '\u0144': 'n',
            '\u0146': 'n',
            '\u0148': 'n',
            '\u014b': 'n',
            '\u014c': 'O',
            '\u014e': 'O',
            '\u0150': 'O',
            '\u014d': 'o',
            '\u014f': 'o',
            '\u0151': 'o',
            '\u0154': 'R',
            '\u0156': 'R',
            '\u0158': 'R',
            '\u0155': 'r',
            '\u0157': 'r',
            '\u0159': 'r',
            '\u015a': 'S',
            '\u015c': 'S',
            '\u015e': 'S',
            '\u0160': 'S',
            '\u015b': 's',
            '\u015d': 's',
            '\u015f': 's',
            '\u0161': 's',
            '\u0162': 'T',
            '\u0164': 'T',
            '\u0166': 'T',
            '\u0163': 't',
            '\u0165': 't',
            '\u0167': 't',
            '\u0168': 'U',
            '\u016a': 'U',
            '\u016c': 'U',
            '\u016e': 'U',
            '\u0170': 'U',
            '\u0172': 'U',
            '\u0169': 'u',
            '\u016b': 'u',
            '\u016d': 'u',
            '\u016f': 'u',
            '\u0171': 'u',
            '\u0173': 'u',
            '\u0174': 'W',
            '\u0175': 'w',
            '\u0176': 'Y',
            '\u0177': 'y',
            '\u0178': 'Y',
            '\u0179': 'Z',
            '\u017b': 'Z',
            '\u017d': 'Z',
            '\u017a': 'z',
            '\u017c': 'z',
            '\u017e': 'z',
            '\u0132': 'IJ',
            '\u0133': 'ij',
            '\u0152': 'Oe',
            '\u0153': 'oe',
            '\u0149': "'n",
            '\u017f': 's',
        };

        /** Used to map characters to HTML entities. */
        var htmlEscapes = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
        };

        /** Used to map HTML entities to characters. */
        var htmlUnescapes = {
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': "'",
        };

        /** Used to escape characters for inclusion in compiled string literals. */
        var stringEscapes = {
            '\\': '\\',
            "'": "'",
            '\n': 'n',
            '\r': 'r',
            '\u2028': 'u2028',
            '\u2029': 'u2029',
        };

        /** Built-in method references without a dependency on `root`. */
        var freeParseFloat = parseFloat,
            freeParseInt = parseInt;

        /** Detect free variable `global` from Node.js. */
        var freeGlobal =
            typeof commonjsGlobal == 'object' &&
            commonjsGlobal &&
            commonjsGlobal.Object === Object &&
            commonjsGlobal;

        /** Detect free variable `self`. */
        var freeSelf =
            typeof self == 'object' && self && self.Object === Object && self;

        /** Used as a reference to the global object. */
        var root = freeGlobal || freeSelf || Function('return this')();

        /** Detect free variable `exports`. */
        var freeExports = exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule =
            freeExports &&
            'object' == 'object' &&
            module &&
            !module.nodeType &&
            module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Detect free variable `process` from Node.js. */
        var freeProcess = moduleExports && freeGlobal.process;

        /** Used to access faster Node.js helpers. */
        var nodeUtil = (function () {
            try {
                // Use `util.types` for Node.js 10+.
                var types =
                    freeModule &&
                    freeModule.require &&
                    freeModule.require('util').types;

                if (types) {
                    return types;
                }

                // Legacy `process.binding('util')` for Node.js < 10.
                return (
                    freeProcess &&
                    freeProcess.binding &&
                    freeProcess.binding('util')
                );
            } catch (e) {}
        })();

        /* Node.js helper references. */
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
            nodeIsDate = nodeUtil && nodeUtil.isDate,
            nodeIsMap = nodeUtil && nodeUtil.isMap,
            nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
            nodeIsSet = nodeUtil && nodeUtil.isSet,
            nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

        /*--------------------------------------------------------------------------*/

        /**
         * A faster alternative to `Function#apply`, this function invokes `func`
         * with the `this` binding of `thisArg` and the arguments of `args`.
         *
         * @private
         * @param {Function} func The function to invoke.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} args The arguments to invoke `func` with.
         * @returns {*} Returns the result of `func`.
         */
        function apply(func, thisArg, args) {
            switch (args.length) {
                case 0:
                    return func.call(thisArg);
                case 1:
                    return func.call(thisArg, args[0]);
                case 2:
                    return func.call(thisArg, args[0], args[1]);
                case 3:
                    return func.call(thisArg, args[0], args[1], args[2]);
            }
            return func.apply(thisArg, args);
        }

        /**
         * A specialized version of `baseAggregator` for arrays.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform keys.
         * @param {Object} accumulator The initial aggregated object.
         * @returns {Function} Returns `accumulator`.
         */
        function arrayAggregator(array, setter, iteratee, accumulator) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                var value = array[index];
                setter(accumulator, value, iteratee(value), array);
            }
            return accumulator;
        }

        /**
         * A specialized version of `_.forEach` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEach(array, iteratee) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                if (iteratee(array[index], index, array) === false) {
                    break;
                }
            }
            return array;
        }

        /**
         * A specialized version of `_.forEachRight` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEachRight(array, iteratee) {
            var length = array == null ? 0 : array.length;

            while (length--) {
                if (iteratee(array[length], length, array) === false) {
                    break;
                }
            }
            return array;
        }

        /**
         * A specialized version of `_.every` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         */
        function arrayEvery(array, predicate) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                if (!predicate(array[index], index, array)) {
                    return false;
                }
            }
            return true;
        }

        /**
         * A specialized version of `_.filter` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function arrayFilter(array, predicate) {
            var index = -1,
                length = array == null ? 0 : array.length,
                resIndex = 0,
                result = [];

            while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result[resIndex++] = value;
                }
            }
            return result;
        }

        /**
         * A specialized version of `_.includes` for arrays without support for
         * specifying an index to search from.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */
        function arrayIncludes(array, value) {
            var length = array == null ? 0 : array.length;
            return !!length && baseIndexOf(array, value, 0) > -1;
        }

        /**
         * This function is like `arrayIncludes` except that it accepts a comparator.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */
        function arrayIncludesWith(array, value, comparator) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                if (comparator(value, array[index])) {
                    return true;
                }
            }
            return false;
        }

        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function arrayMap(array, iteratee) {
            var index = -1,
                length = array == null ? 0 : array.length,
                result = Array(length);

            while (++index < length) {
                result[index] = iteratee(array[index], index, array);
            }
            return result;
        }

        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */
        function arrayPush(array, values) {
            var index = -1,
                length = values.length,
                offset = array.length;

            while (++index < length) {
                array[offset + index] = values[index];
            }
            return array;
        }

        /**
         * A specialized version of `_.reduce` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initAccum] Specify using the first element of `array` as
         *  the initial value.
         * @returns {*} Returns the accumulated value.
         */
        function arrayReduce(array, iteratee, accumulator, initAccum) {
            var index = -1,
                length = array == null ? 0 : array.length;

            if (initAccum && length) {
                accumulator = array[++index];
            }
            while (++index < length) {
                accumulator = iteratee(accumulator, array[index], index, array);
            }
            return accumulator;
        }

        /**
         * A specialized version of `_.reduceRight` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initAccum] Specify using the last element of `array` as
         *  the initial value.
         * @returns {*} Returns the accumulated value.
         */
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
            var length = array == null ? 0 : array.length;
            if (initAccum && length) {
                accumulator = array[--length];
            }
            while (length--) {
                accumulator = iteratee(
                    accumulator,
                    array[length],
                    length,
                    array
                );
            }
            return accumulator;
        }

        /**
         * A specialized version of `_.some` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function arraySome(array, predicate) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                if (predicate(array[index], index, array)) {
                    return true;
                }
            }
            return false;
        }

        /**
         * Gets the size of an ASCII `string`.
         *
         * @private
         * @param {string} string The string inspect.
         * @returns {number} Returns the string size.
         */
        var asciiSize = baseProperty('length');

        /**
         * Converts an ASCII `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function asciiToArray(string) {
            return string.split('');
        }

        /**
         * Splits an ASCII `string` into an array of its words.
         *
         * @private
         * @param {string} The string to inspect.
         * @returns {Array} Returns the words of `string`.
         */
        function asciiWords(string) {
            return string.match(reAsciiWord) || [];
        }

        /**
         * The base implementation of methods like `_.findKey` and `_.findLastKey`,
         * without support for iteratee shorthands, which iterates over `collection`
         * using `eachFunc`.
         *
         * @private
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the found element or its key, else `undefined`.
         */
        function baseFindKey(collection, predicate, eachFunc) {
            var result;
            eachFunc(collection, function (value, key, collection) {
                if (predicate(value, key, collection)) {
                    result = key;
                    return false;
                }
            });
            return result;
        }

        /**
         * The base implementation of `_.findIndex` and `_.findLastIndex` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {number} fromIndex The index to search from.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length,
                index = fromIndex + (fromRight ? 1 : -1);

            while (fromRight ? index-- : ++index < length) {
                if (predicate(array[index], index, array)) {
                    return index;
                }
            }
            return -1;
        }

        /**
         * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseIndexOf(array, value, fromIndex) {
            return value === value
                ? strictIndexOf(array, value, fromIndex)
                : baseFindIndex(array, baseIsNaN, fromIndex);
        }

        /**
         * This function is like `baseIndexOf` except that it accepts a comparator.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseIndexOfWith(array, value, fromIndex, comparator) {
            var index = fromIndex - 1,
                length = array.length;

            while (++index < length) {
                if (comparator(array[index], value)) {
                    return index;
                }
            }
            return -1;
        }

        /**
         * The base implementation of `_.isNaN` without support for number objects.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         */
        function baseIsNaN(value) {
            return value !== value;
        }

        /**
         * The base implementation of `_.mean` and `_.meanBy` without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the mean.
         */
        function baseMean(array, iteratee) {
            var length = array == null ? 0 : array.length;
            return length ? baseSum(array, iteratee) / length : NAN;
        }

        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function baseProperty(key) {
            return function (object) {
                return object == null ? undefined$1 : object[key];
            };
        }

        /**
         * The base implementation of `_.propertyOf` without support for deep paths.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyOf(object) {
            return function (key) {
                return object == null ? undefined$1 : object[key];
            };
        }

        /**
         * The base implementation of `_.reduce` and `_.reduceRight`, without support
         * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} accumulator The initial value.
         * @param {boolean} initAccum Specify using the first or last element of
         *  `collection` as the initial value.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the accumulated value.
         */
        function baseReduce(
            collection,
            iteratee,
            accumulator,
            initAccum,
            eachFunc
        ) {
            eachFunc(collection, function (value, index, collection) {
                accumulator = initAccum
                    ? ((initAccum = false), value)
                    : iteratee(accumulator, value, index, collection);
            });
            return accumulator;
        }

        /**
         * The base implementation of `_.sortBy` which uses `comparer` to define the
         * sort order of `array` and replaces criteria objects with their corresponding
         * values.
         *
         * @private
         * @param {Array} array The array to sort.
         * @param {Function} comparer The function to define sort order.
         * @returns {Array} Returns `array`.
         */
        function baseSortBy(array, comparer) {
            var length = array.length;

            array.sort(comparer);
            while (length--) {
                array[length] = array[length].value;
            }
            return array;
        }

        /**
         * The base implementation of `_.sum` and `_.sumBy` without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the sum.
         */
        function baseSum(array, iteratee) {
            var result,
                index = -1,
                length = array.length;

            while (++index < length) {
                var current = iteratee(array[index]);
                if (current !== undefined$1) {
                    result =
                        result === undefined$1 ? current : result + current;
                }
            }
            return result;
        }

        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */
        function baseTimes(n, iteratee) {
            var index = -1,
                result = Array(n);

            while (++index < n) {
                result[index] = iteratee(index);
            }
            return result;
        }

        /**
         * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
         * of key-value pairs for `object` corresponding to the property names of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the key-value pairs.
         */
        function baseToPairs(object, props) {
            return arrayMap(props, function (key) {
                return [key, object[key]];
            });
        }

        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */
        function baseUnary(func) {
            return function (value) {
                return func(value);
            };
        }

        /**
         * The base implementation of `_.values` and `_.valuesIn` which creates an
         * array of `object` property values corresponding to the property names
         * of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the array of property values.
         */
        function baseValues(object, props) {
            return arrayMap(props, function (key) {
                return object[key];
            });
        }

        /**
         * Checks if a `cache` value for `key` exists.
         *
         * @private
         * @param {Object} cache The cache to query.
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function cacheHas(cache, key) {
            return cache.has(key);
        }

        /**
         * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
         * that is not found in the character symbols.
         *
         * @private
         * @param {Array} strSymbols The string symbols to inspect.
         * @param {Array} chrSymbols The character symbols to find.
         * @returns {number} Returns the index of the first unmatched string symbol.
         */
        function charsStartIndex(strSymbols, chrSymbols) {
            var index = -1,
                length = strSymbols.length;

            while (
                ++index < length &&
                baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
            ) {}
            return index;
        }

        /**
         * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
         * that is not found in the character symbols.
         *
         * @private
         * @param {Array} strSymbols The string symbols to inspect.
         * @param {Array} chrSymbols The character symbols to find.
         * @returns {number} Returns the index of the last unmatched string symbol.
         */
        function charsEndIndex(strSymbols, chrSymbols) {
            var index = strSymbols.length;

            while (
                index-- &&
                baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
            ) {}
            return index;
        }

        /**
         * Gets the number of `placeholder` occurrences in `array`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} placeholder The placeholder to search for.
         * @returns {number} Returns the placeholder count.
         */
        function countHolders(array, placeholder) {
            var length = array.length,
                result = 0;

            while (length--) {
                if (array[length] === placeholder) {
                    ++result;
                }
            }
            return result;
        }

        /**
         * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
         * letters to basic Latin letters.
         *
         * @private
         * @param {string} letter The matched letter to deburr.
         * @returns {string} Returns the deburred letter.
         */
        var deburrLetter = basePropertyOf(deburredLetters);

        /**
         * Used by `_.escape` to convert characters to HTML entities.
         *
         * @private
         * @param {string} chr The matched character to escape.
         * @returns {string} Returns the escaped character.
         */
        var escapeHtmlChar = basePropertyOf(htmlEscapes);

        /**
         * Used by `_.template` to escape characters for inclusion in compiled string literals.
         *
         * @private
         * @param {string} chr The matched character to escape.
         * @returns {string} Returns the escaped character.
         */
        function escapeStringChar(chr) {
            return '\\' + stringEscapes[chr];
        }

        /**
         * Gets the value at `key` of `object`.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function getValue(object, key) {
            return object == null ? undefined$1 : object[key];
        }

        /**
         * Checks if `string` contains Unicode symbols.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {boolean} Returns `true` if a symbol is found, else `false`.
         */
        function hasUnicode(string) {
            return reHasUnicode.test(string);
        }

        /**
         * Checks if `string` contains a word composed of Unicode symbols.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {boolean} Returns `true` if a word is found, else `false`.
         */
        function hasUnicodeWord(string) {
            return reHasUnicodeWord.test(string);
        }

        /**
         * Converts `iterator` to an array.
         *
         * @private
         * @param {Object} iterator The iterator to convert.
         * @returns {Array} Returns the converted array.
         */
        function iteratorToArray(iterator) {
            var data,
                result = [];

            while (!(data = iterator.next()).done) {
                result.push(data.value);
            }
            return result;
        }

        /**
         * Converts `map` to its key-value pairs.
         *
         * @private
         * @param {Object} map The map to convert.
         * @returns {Array} Returns the key-value pairs.
         */
        function mapToArray(map) {
            var index = -1,
                result = Array(map.size);

            map.forEach(function (value, key) {
                result[++index] = [key, value];
            });
            return result;
        }

        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */
        function overArg(func, transform) {
            return function (arg) {
                return func(transform(arg));
            };
        }

        /**
         * Replaces all `placeholder` elements in `array` with an internal placeholder
         * and returns an array of their indexes.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {*} placeholder The placeholder to replace.
         * @returns {Array} Returns the new array of placeholder indexes.
         */
        function replaceHolders(array, placeholder) {
            var index = -1,
                length = array.length,
                resIndex = 0,
                result = [];

            while (++index < length) {
                var value = array[index];
                if (value === placeholder || value === PLACEHOLDER) {
                    array[index] = PLACEHOLDER;
                    result[resIndex++] = index;
                }
            }
            return result;
        }

        /**
         * Converts `set` to an array of its values.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the values.
         */
        function setToArray(set) {
            var index = -1,
                result = Array(set.size);

            set.forEach(function (value) {
                result[++index] = value;
            });
            return result;
        }

        /**
         * Converts `set` to its value-value pairs.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the value-value pairs.
         */
        function setToPairs(set) {
            var index = -1,
                result = Array(set.size);

            set.forEach(function (value) {
                result[++index] = [value, value];
            });
            return result;
        }

        /**
         * A specialized version of `_.indexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function strictIndexOf(array, value, fromIndex) {
            var index = fromIndex - 1,
                length = array.length;

            while (++index < length) {
                if (array[index] === value) {
                    return index;
                }
            }
            return -1;
        }

        /**
         * A specialized version of `_.lastIndexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function strictLastIndexOf(array, value, fromIndex) {
            var index = fromIndex + 1;
            while (index--) {
                if (array[index] === value) {
                    return index;
                }
            }
            return index;
        }

        /**
         * Gets the number of symbols in `string`.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {number} Returns the string size.
         */
        function stringSize(string) {
            return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }

        /**
         * Converts `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function stringToArray(string) {
            return hasUnicode(string)
                ? unicodeToArray(string)
                : asciiToArray(string);
        }

        /**
         * Used by `_.unescape` to convert HTML entities to characters.
         *
         * @private
         * @param {string} chr The matched character to unescape.
         * @returns {string} Returns the unescaped character.
         */
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

        /**
         * Gets the size of a Unicode `string`.
         *
         * @private
         * @param {string} string The string inspect.
         * @returns {number} Returns the string size.
         */
        function unicodeSize(string) {
            var result = (reUnicode.lastIndex = 0);
            while (reUnicode.test(string)) {
                ++result;
            }
            return result;
        }

        /**
         * Converts a Unicode `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function unicodeToArray(string) {
            return string.match(reUnicode) || [];
        }

        /**
         * Splits a Unicode `string` into an array of its words.
         *
         * @private
         * @param {string} The string to inspect.
         * @returns {Array} Returns the words of `string`.
         */
        function unicodeWords(string) {
            return string.match(reUnicodeWord) || [];
        }

        /*--------------------------------------------------------------------------*/

        /**
         * Create a new pristine `lodash` function using the `context` object.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Util
         * @param {Object} [context=root] The context object.
         * @returns {Function} Returns a new `lodash` function.
         * @example
         *
         * _.mixin({ 'foo': _.constant('foo') });
         *
         * var lodash = _.runInContext();
         * lodash.mixin({ 'bar': lodash.constant('bar') });
         *
         * _.isFunction(_.foo);
         * // => true
         * _.isFunction(_.bar);
         * // => false
         *
         * lodash.isFunction(lodash.foo);
         * // => false
         * lodash.isFunction(lodash.bar);
         * // => true
         *
         * // Create a suped-up `defer` in Node.js.
         * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
         */
        var runInContext = function runInContext(context) {
            context =
                context == null
                    ? root
                    : _.defaults(
                          root.Object(),
                          context,
                          _.pick(root, contextProps)
                      );

            /** Built-in constructor references. */
            var Array = context.Array,
                Date = context.Date,
                Error = context.Error,
                Function = context.Function,
                Math = context.Math,
                Object = context.Object,
                RegExp = context.RegExp,
                String = context.String,
                TypeError = context.TypeError;

            /** Used for built-in method references. */
            var arrayProto = Array.prototype,
                funcProto = Function.prototype,
                objectProto = Object.prototype;

            /** Used to detect overreaching core-js shims. */
            var coreJsData = context['__core-js_shared__'];

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Used to generate unique IDs. */
            var idCounter = 0;

            /** Used to detect methods masquerading as native. */
            var maskSrcKey = (function () {
                var uid = /[^.]+$/.exec(
                    (coreJsData &&
                        coreJsData.keys &&
                        coreJsData.keys.IE_PROTO) ||
                        ''
                );
                return uid ? 'Symbol(src)_1.' + uid : '';
            })();

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /** Used to infer the `Object` constructor. */
            var objectCtorString = funcToString.call(Object);

            /** Used to restore the original `_` reference in `_.noConflict`. */
            var oldDash = root._;

            /** Used to detect if a method is native. */
            var reIsNative = RegExp(
                '^' +
                    funcToString
                        .call(hasOwnProperty)
                        .replace(reRegExpChar, '\\$&')
                        .replace(
                            /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                            '$1.*?'
                        ) +
                    '$'
            );

            /** Built-in value references. */
            var Buffer = moduleExports ? context.Buffer : undefined$1,
                Symbol = context.Symbol,
                Uint8Array = context.Uint8Array,
                allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
                getPrototype = overArg(Object.getPrototypeOf, Object),
                objectCreate = Object.create,
                propertyIsEnumerable = objectProto.propertyIsEnumerable,
                splice = arrayProto.splice,
                spreadableSymbol = Symbol
                    ? Symbol.isConcatSpreadable
                    : undefined$1,
                symIterator = Symbol ? Symbol.iterator : undefined$1,
                symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

            var defineProperty = (function () {
                try {
                    var func = getNative(Object, 'defineProperty');
                    func({}, '', {});
                    return func;
                } catch (e) {}
            })();

            /** Mocked built-ins. */
            var ctxClearTimeout =
                    context.clearTimeout !== root.clearTimeout &&
                    context.clearTimeout,
                ctxNow = Date && Date.now !== root.Date.now && Date.now,
                ctxSetTimeout =
                    context.setTimeout !== root.setTimeout &&
                    context.setTimeout;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeCeil = Math.ceil,
                nativeFloor = Math.floor,
                nativeGetSymbols = Object.getOwnPropertySymbols,
                nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
                nativeIsFinite = context.isFinite,
                nativeJoin = arrayProto.join,
                nativeKeys = overArg(Object.keys, Object),
                nativeMax = Math.max,
                nativeMin = Math.min,
                nativeNow = Date.now,
                nativeParseInt = context.parseInt,
                nativeRandom = Math.random,
                nativeReverse = arrayProto.reverse;

            /* Built-in method references that are verified to be native. */
            var DataView = getNative(context, 'DataView'),
                Map = getNative(context, 'Map'),
                Promise = getNative(context, 'Promise'),
                Set = getNative(context, 'Set'),
                WeakMap = getNative(context, 'WeakMap'),
                nativeCreate = getNative(Object, 'create');

            /** Used to store function metadata. */
            var metaMap = WeakMap && new WeakMap();

            /** Used to lookup unminified function names. */
            var realNames = {};

            /** Used to detect maps, sets, and weakmaps. */
            var dataViewCtorString = toSource(DataView),
                mapCtorString = toSource(Map),
                promiseCtorString = toSource(Promise),
                setCtorString = toSource(Set),
                weakMapCtorString = toSource(WeakMap);

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined$1,
                symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
                symbolToString = symbolProto
                    ? symbolProto.toString
                    : undefined$1;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` object which wraps `value` to enable implicit method
             * chain sequences. Methods that operate on and return arrays, collections,
             * and functions can be chained together. Methods that retrieve a single value
             * or may return a primitive value will automatically end the chain sequence
             * and return the unwrapped value. Otherwise, the value must be unwrapped
             * with `_#value`.
             *
             * Explicit chain sequences, which must be unwrapped with `_#value`, may be
             * enabled using `_.chain`.
             *
             * The execution of chained methods is lazy, that is, it's deferred until
             * `_#value` is implicitly or explicitly called.
             *
             * Lazy evaluation allows several methods to support shortcut fusion.
             * Shortcut fusion is an optimization to merge iteratee calls; this avoids
             * the creation of intermediate arrays and can greatly reduce the number of
             * iteratee executions. Sections of a chain sequence qualify for shortcut
             * fusion if the section is applied to an array and iteratees accept only
             * one argument. The heuristic for whether a section qualifies for shortcut
             * fusion is subject to change.
             *
             * Chaining is supported in custom builds as long as the `_#value` method is
             * directly or indirectly included in the build.
             *
             * In addition to lodash methods, wrappers have `Array` and `String` methods.
             *
             * The wrapper `Array` methods are:
             * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
             *
             * The wrapper `String` methods are:
             * `replace` and `split`
             *
             * The wrapper methods that support shortcut fusion are:
             * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
             * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
             * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
             *
             * The chainable wrapper methods are:
             * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
             * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
             * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
             * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
             * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
             * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
             * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
             * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
             * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
             * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
             * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
             * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
             * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
             * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
             * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
             * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
             * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
             * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
             * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
             * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
             * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
             * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
             * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
             * `zipObject`, `zipObjectDeep`, and `zipWith`
             *
             * The wrapper methods that are **not** chainable by default are:
             * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
             * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
             * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
             * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
             * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
             * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
             * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
             * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
             * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
             * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
             * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
             * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
             * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
             * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
             * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
             * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
             * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
             * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
             * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
             * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
             * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
             * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
             * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
             * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
             * `upperFirst`, `value`, and `words`
             *
             * @name _
             * @constructor
             * @category Seq
             * @param {*} value The value to wrap in a `lodash` instance.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2, 3]);
             *
             * // Returns an unwrapped value.
             * wrapped.reduce(_.add);
             * // => 6
             *
             * // Returns a wrapped value.
             * var squares = wrapped.map(square);
             *
             * _.isArray(squares);
             * // => false
             *
             * _.isArray(squares.value());
             * // => true
             */
            function lodash(value) {
                if (
                    isObjectLike(value) &&
                    !isArray(value) &&
                    !(value instanceof LazyWrapper)
                ) {
                    if (value instanceof LodashWrapper) {
                        return value;
                    }
                    if (hasOwnProperty.call(value, '__wrapped__')) {
                        return wrapperClone(value);
                    }
                }
                return new LodashWrapper(value);
            }

            /**
             * The base implementation of `_.create` without support for assigning
             * properties to the created object.
             *
             * @private
             * @param {Object} proto The object to inherit from.
             * @returns {Object} Returns the new object.
             */
            var baseCreate = (function () {
                function object() {}
                return function (proto) {
                    if (!isObject(proto)) {
                        return {};
                    }
                    if (objectCreate) {
                        return objectCreate(proto);
                    }
                    object.prototype = proto;
                    var result = new object();
                    object.prototype = undefined$1;
                    return result;
                };
            })();

            /**
             * The function whose prototype chain sequence wrappers inherit from.
             *
             * @private
             */
            function baseLodash() {
                // No operation performed.
            }

            /**
             * The base constructor for creating `lodash` wrapper objects.
             *
             * @private
             * @param {*} value The value to wrap.
             * @param {boolean} [chainAll] Enable explicit method chain sequences.
             */
            function LodashWrapper(value, chainAll) {
                this.__wrapped__ = value;
                this.__actions__ = [];
                this.__chain__ = !!chainAll;
                this.__index__ = 0;
                this.__values__ = undefined$1;
            }

            /**
             * By default, the template delimiters used by lodash are like those in
             * embedded Ruby (ERB) as well as ES2015 template strings. Change the
             * following template settings to use alternative delimiters.
             *
             * @static
             * @memberOf _
             * @type {Object}
             */
            lodash.templateSettings = {
                /**
                 * Used to detect `data` property values to be HTML-escaped.
                 *
                 * @memberOf _.templateSettings
                 * @type {RegExp}
                 */
                escape: reEscape,

                /**
                 * Used to detect code to be evaluated.
                 *
                 * @memberOf _.templateSettings
                 * @type {RegExp}
                 */
                evaluate: reEvaluate,

                /**
                 * Used to detect `data` property values to inject.
                 *
                 * @memberOf _.templateSettings
                 * @type {RegExp}
                 */
                interpolate: reInterpolate,

                /**
                 * Used to reference the data object in the template text.
                 *
                 * @memberOf _.templateSettings
                 * @type {string}
                 */
                variable: '',

                /**
                 * Used to import variables into the compiled template.
                 *
                 * @memberOf _.templateSettings
                 * @type {Object}
                 */
                imports: {
                    /**
                     * A reference to the `lodash` function.
                     *
                     * @memberOf _.templateSettings.imports
                     * @type {Function}
                     */
                    _: lodash,
                },
            };

            // Ensure wrappers are instances of `baseLodash`.
            lodash.prototype = baseLodash.prototype;
            lodash.prototype.constructor = lodash;

            LodashWrapper.prototype = baseCreate(baseLodash.prototype);
            LodashWrapper.prototype.constructor = LodashWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
             *
             * @private
             * @constructor
             * @param {*} value The value to wrap.
             */
            function LazyWrapper(value) {
                this.__wrapped__ = value;
                this.__actions__ = [];
                this.__dir__ = 1;
                this.__filtered__ = false;
                this.__iteratees__ = [];
                this.__takeCount__ = MAX_ARRAY_LENGTH;
                this.__views__ = [];
            }

            /**
             * Creates a clone of the lazy wrapper object.
             *
             * @private
             * @name clone
             * @memberOf LazyWrapper
             * @returns {Object} Returns the cloned `LazyWrapper` object.
             */
            function lazyClone() {
                var result = new LazyWrapper(this.__wrapped__);
                result.__actions__ = copyArray(this.__actions__);
                result.__dir__ = this.__dir__;
                result.__filtered__ = this.__filtered__;
                result.__iteratees__ = copyArray(this.__iteratees__);
                result.__takeCount__ = this.__takeCount__;
                result.__views__ = copyArray(this.__views__);
                return result;
            }

            /**
             * Reverses the direction of lazy iteration.
             *
             * @private
             * @name reverse
             * @memberOf LazyWrapper
             * @returns {Object} Returns the new reversed `LazyWrapper` object.
             */
            function lazyReverse() {
                if (this.__filtered__) {
                    var result = new LazyWrapper(this);
                    result.__dir__ = -1;
                    result.__filtered__ = true;
                } else {
                    result = this.clone();
                    result.__dir__ *= -1;
                }
                return result;
            }

            /**
             * Extracts the unwrapped value from its lazy wrapper.
             *
             * @private
             * @name value
             * @memberOf LazyWrapper
             * @returns {*} Returns the unwrapped value.
             */
            function lazyValue() {
                var array = this.__wrapped__.value(),
                    dir = this.__dir__,
                    isArr = isArray(array),
                    isRight = dir < 0,
                    arrLength = isArr ? array.length : 0,
                    view = getView(0, arrLength, this.__views__),
                    start = view.start,
                    end = view.end,
                    length = end - start,
                    index = isRight ? end : start - 1,
                    iteratees = this.__iteratees__,
                    iterLength = iteratees.length,
                    resIndex = 0,
                    takeCount = nativeMin(length, this.__takeCount__);

                if (
                    !isArr ||
                    (!isRight && arrLength == length && takeCount == length)
                ) {
                    return baseWrapperValue(array, this.__actions__);
                }
                var result = [];

                outer: while (length-- && resIndex < takeCount) {
                    index += dir;

                    var iterIndex = -1,
                        value = array[index];

                    while (++iterIndex < iterLength) {
                        var data = iteratees[iterIndex],
                            iteratee = data.iteratee,
                            type = data.type,
                            computed = iteratee(value);

                        if (type == LAZY_MAP_FLAG) {
                            value = computed;
                        } else if (!computed) {
                            if (type == LAZY_FILTER_FLAG) {
                                continue outer;
                            } else {
                                break outer;
                            }
                        }
                    }
                    result[resIndex++] = value;
                }
                return result;
            }

            // Ensure `LazyWrapper` is an instance of `baseLodash`.
            LazyWrapper.prototype = baseCreate(baseLodash.prototype);
            LazyWrapper.prototype.constructor = LazyWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Hash(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */
            function hashClear() {
                this.__data__ = nativeCreate ? nativeCreate(null) : {};
                this.size = 0;
            }

            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
                var result = this.has(key) && delete this.__data__[key];
                this.size -= result ? 1 : 0;
                return result;
            }

            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function hashGet(key) {
                var data = this.__data__;
                if (nativeCreate) {
                    var result = data[key];
                    return result === HASH_UNDEFINED ? undefined$1 : result;
                }
                return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
            }

            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function hashHas(key) {
                var data = this.__data__;
                return nativeCreate
                    ? data[key] !== undefined$1
                    : hasOwnProperty.call(data, key);
            }

            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */
            function hashSet(key, value) {
                var data = this.__data__;
                this.size += this.has(key) ? 0 : 1;
                data[key] =
                    nativeCreate && value === undefined$1
                        ? HASH_UNDEFINED
                        : value;
                return this;
            }

            // Add methods to `Hash`.
            Hash.prototype.clear = hashClear;
            Hash.prototype['delete'] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function ListCache(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
                this.__data__ = [];
                this.size = 0;
            }

            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function listCacheDelete(key) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                if (index < 0) {
                    return false;
                }
                var lastIndex = data.length - 1;
                if (index == lastIndex) {
                    data.pop();
                } else {
                    splice.call(data, index, 1);
                }
                --this.size;
                return true;
            }

            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function listCacheGet(key) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                return index < 0 ? undefined$1 : data[index][1];
            }

            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function listCacheHas(key) {
                return assocIndexOf(this.__data__, key) > -1;
            }

            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */
            function listCacheSet(key, value) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                if (index < 0) {
                    ++this.size;
                    data.push([key, value]);
                } else {
                    data[index][1] = value;
                }
                return this;
            }

            // Add methods to `ListCache`.
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype['delete'] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function MapCache(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */
            function mapCacheClear() {
                this.size = 0;
                this.__data__ = {
                    hash: new Hash(),
                    map: new (Map || ListCache)(),
                    string: new Hash(),
                };
            }

            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function mapCacheDelete(key) {
                var result = getMapData(this, key)['delete'](key);
                this.size -= result ? 1 : 0;
                return result;
            }

            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function mapCacheGet(key) {
                return getMapData(this, key).get(key);
            }

            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function mapCacheHas(key) {
                return getMapData(this, key).has(key);
            }

            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */
            function mapCacheSet(key, value) {
                var data = getMapData(this, key),
                    size = data.size;

                data.set(key, value);
                this.size += data.size == size ? 0 : 1;
                return this;
            }

            // Add methods to `MapCache`.
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype['delete'] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             *
             * Creates an array cache object to store unique values.
             *
             * @private
             * @constructor
             * @param {Array} [values] The values to cache.
             */
            function SetCache(values) {
                var index = -1,
                    length = values == null ? 0 : values.length;

                this.__data__ = new MapCache();
                while (++index < length) {
                    this.add(values[index]);
                }
            }

            /**
             * Adds `value` to the array cache.
             *
             * @private
             * @name add
             * @memberOf SetCache
             * @alias push
             * @param {*} value The value to cache.
             * @returns {Object} Returns the cache instance.
             */
            function setCacheAdd(value) {
                this.__data__.set(value, HASH_UNDEFINED);
                return this;
            }

            /**
             * Checks if `value` is in the array cache.
             *
             * @private
             * @name has
             * @memberOf SetCache
             * @param {*} value The value to search for.
             * @returns {number} Returns `true` if `value` is found, else `false`.
             */
            function setCacheHas(value) {
                return this.__data__.has(value);
            }

            // Add methods to `SetCache`.
            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
            SetCache.prototype.has = setCacheHas;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a stack cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Stack(entries) {
                var data = (this.__data__ = new ListCache(entries));
                this.size = data.size;
            }

            /**
             * Removes all key-value entries from the stack.
             *
             * @private
             * @name clear
             * @memberOf Stack
             */
            function stackClear() {
                this.__data__ = new ListCache();
                this.size = 0;
            }

            /**
             * Removes `key` and its value from the stack.
             *
             * @private
             * @name delete
             * @memberOf Stack
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function stackDelete(key) {
                var data = this.__data__,
                    result = data['delete'](key);

                this.size = data.size;
                return result;
            }

            /**
             * Gets the stack value for `key`.
             *
             * @private
             * @name get
             * @memberOf Stack
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function stackGet(key) {
                return this.__data__.get(key);
            }

            /**
             * Checks if a stack value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Stack
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function stackHas(key) {
                return this.__data__.has(key);
            }

            /**
             * Sets the stack `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Stack
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the stack cache instance.
             */
            function stackSet(key, value) {
                var data = this.__data__;
                if (data instanceof ListCache) {
                    var pairs = data.__data__;
                    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                        pairs.push([key, value]);
                        this.size = ++data.size;
                        return this;
                    }
                    data = this.__data__ = new MapCache(pairs);
                }
                data.set(key, value);
                this.size = data.size;
                return this;
            }

            // Add methods to `Stack`.
            Stack.prototype.clear = stackClear;
            Stack.prototype['delete'] = stackDelete;
            Stack.prototype.get = stackGet;
            Stack.prototype.has = stackHas;
            Stack.prototype.set = stackSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of the enumerable property names of the array-like `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @param {boolean} inherited Specify returning inherited property names.
             * @returns {Array} Returns the array of property names.
             */
            function arrayLikeKeys(value, inherited) {
                var isArr = isArray(value),
                    isArg = !isArr && isArguments(value),
                    isBuff = !isArr && !isArg && isBuffer(value),
                    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                    skipIndexes = isArr || isArg || isBuff || isType,
                    result = skipIndexes ? baseTimes(value.length, String) : [],
                    length = result.length;

                for (var key in value) {
                    if (
                        (inherited || hasOwnProperty.call(value, key)) &&
                        !(
                            skipIndexes &&
                            // Safari 9 has enumerable `arguments.length` in strict mode.
                            (key == 'length' ||
                                // Node.js 0.10 has enumerable non-index properties on buffers.
                                (isBuff &&
                                    (key == 'offset' || key == 'parent')) ||
                                // PhantomJS 2 has enumerable non-index properties on typed arrays.
                                (isType &&
                                    (key == 'buffer' ||
                                        key == 'byteLength' ||
                                        key == 'byteOffset')) ||
                                // Skip index properties.
                                isIndex(key, length))
                        )
                    ) {
                        result.push(key);
                    }
                }
                return result;
            }

            /**
             * A specialized version of `_.sample` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @returns {*} Returns the random element.
             */
            function arraySample(array) {
                var length = array.length;
                return length ? array[baseRandom(0, length - 1)] : undefined$1;
            }

            /**
             * A specialized version of `_.sampleSize` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function arraySampleSize(array, n) {
                return shuffleSelf(
                    copyArray(array),
                    baseClamp(n, 0, array.length)
                );
            }

            /**
             * A specialized version of `_.shuffle` for arrays.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function arrayShuffle(array) {
                return shuffleSelf(copyArray(array));
            }

            /**
             * This function is like `assignValue` except that it doesn't assign
             * `undefined` values.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignMergeValue(object, key, value) {
                if (
                    (value !== undefined$1 && !eq(object[key], value)) ||
                    (value === undefined$1 && !(key in object))
                ) {
                    baseAssignValue(object, key, value);
                }
            }

            /**
             * Assigns `value` to `key` of `object` if the existing value is not equivalent
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignValue(object, key, value) {
                var objValue = object[key];
                if (
                    !(
                        hasOwnProperty.call(object, key) && eq(objValue, value)
                    ) ||
                    (value === undefined$1 && !(key in object))
                ) {
                    baseAssignValue(object, key, value);
                }
            }

            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function assocIndexOf(array, key) {
                var length = array.length;
                while (length--) {
                    if (eq(array[length][0], key)) {
                        return length;
                    }
                }
                return -1;
            }

            /**
             * Aggregates elements of `collection` on `accumulator` with keys transformed
             * by `iteratee` and values set by `setter`.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform keys.
             * @param {Object} accumulator The initial aggregated object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseAggregator(collection, setter, iteratee, accumulator) {
                baseEach(collection, function (value, key, collection) {
                    setter(accumulator, value, iteratee(value), collection);
                });
                return accumulator;
            }

            /**
             * The base implementation of `_.assign` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssign(object, source) {
                return object && copyObject(source, keys(source), object);
            }

            /**
             * The base implementation of `_.assignIn` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssignIn(object, source) {
                return object && copyObject(source, keysIn(source), object);
            }

            /**
             * The base implementation of `assignValue` and `assignMergeValue` without
             * value checks.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function baseAssignValue(object, key, value) {
                if (key == '__proto__' && defineProperty) {
                    defineProperty(object, key, {
                        configurable: true,
                        enumerable: true,
                        value: value,
                        writable: true,
                    });
                } else {
                    object[key] = value;
                }
            }

            /**
             * The base implementation of `_.at` without support for individual paths.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {string[]} paths The property paths to pick.
             * @returns {Array} Returns the picked elements.
             */
            function baseAt(object, paths) {
                var index = -1,
                    length = paths.length,
                    result = Array(length),
                    skip = object == null;

                while (++index < length) {
                    result[index] = skip
                        ? undefined$1
                        : get(object, paths[index]);
                }
                return result;
            }

            /**
             * The base implementation of `_.clamp` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             */
            function baseClamp(number, lower, upper) {
                if (number === number) {
                    if (upper !== undefined$1) {
                        number = number <= upper ? number : upper;
                    }
                    if (lower !== undefined$1) {
                        number = number >= lower ? number : lower;
                    }
                }
                return number;
            }

            /**
             * The base implementation of `_.clone` and `_.cloneDeep` which tracks
             * traversed objects.
             *
             * @private
             * @param {*} value The value to clone.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Deep clone
             *  2 - Flatten inherited properties
             *  4 - Clone symbols
             * @param {Function} [customizer] The function to customize cloning.
             * @param {string} [key] The key of `value`.
             * @param {Object} [object] The parent object of `value`.
             * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
             * @returns {*} Returns the cloned value.
             */
            function baseClone(value, bitmask, customizer, key, object, stack) {
                var result,
                    isDeep = bitmask & CLONE_DEEP_FLAG,
                    isFlat = bitmask & CLONE_FLAT_FLAG,
                    isFull = bitmask & CLONE_SYMBOLS_FLAG;

                if (customizer) {
                    result = object
                        ? customizer(value, key, object, stack)
                        : customizer(value);
                }
                if (result !== undefined$1) {
                    return result;
                }
                if (!isObject(value)) {
                    return value;
                }
                var isArr = isArray(value);
                if (isArr) {
                    result = initCloneArray(value);
                    if (!isDeep) {
                        return copyArray(value, result);
                    }
                } else {
                    var tag = getTag(value),
                        isFunc = tag == funcTag || tag == genTag;

                    if (isBuffer(value)) {
                        return cloneBuffer(value, isDeep);
                    }
                    if (
                        tag == objectTag ||
                        tag == argsTag ||
                        (isFunc && !object)
                    ) {
                        result = isFlat || isFunc ? {} : initCloneObject(value);
                        if (!isDeep) {
                            return isFlat
                                ? copySymbolsIn(
                                      value,
                                      baseAssignIn(result, value)
                                  )
                                : copySymbols(value, baseAssign(result, value));
                        }
                    } else {
                        if (!cloneableTags[tag]) {
                            return object ? value : {};
                        }
                        result = initCloneByTag(value, tag, isDeep);
                    }
                }
                // Check for circular references and return its corresponding clone.
                stack || (stack = new Stack());
                var stacked = stack.get(value);
                if (stacked) {
                    return stacked;
                }
                stack.set(value, result);

                if (isSet(value)) {
                    value.forEach(function (subValue) {
                        result.add(
                            baseClone(
                                subValue,
                                bitmask,
                                customizer,
                                subValue,
                                value,
                                stack
                            )
                        );
                    });
                } else if (isMap(value)) {
                    value.forEach(function (subValue, key) {
                        result.set(
                            key,
                            baseClone(
                                subValue,
                                bitmask,
                                customizer,
                                key,
                                value,
                                stack
                            )
                        );
                    });
                }

                var keysFunc = isFull
                    ? isFlat
                        ? getAllKeysIn
                        : getAllKeys
                    : isFlat
                    ? keysIn
                    : keys;

                var props = isArr ? undefined$1 : keysFunc(value);
                arrayEach(props || value, function (subValue, key) {
                    if (props) {
                        key = subValue;
                        subValue = value[key];
                    }
                    // Recursively populate clone (susceptible to call stack limits).
                    assignValue(
                        result,
                        key,
                        baseClone(
                            subValue,
                            bitmask,
                            customizer,
                            key,
                            value,
                            stack
                        )
                    );
                });
                return result;
            }

            /**
             * The base implementation of `_.conforms` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             */
            function baseConforms(source) {
                var props = keys(source);
                return function (object) {
                    return baseConformsTo(object, source, props);
                };
            }

            /**
             * The base implementation of `_.conformsTo` which accepts `props` to check.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             */
            function baseConformsTo(object, source, props) {
                var length = props.length;
                if (object == null) {
                    return !length;
                }
                object = Object(object);
                while (length--) {
                    var key = props[length],
                        predicate = source[key],
                        value = object[key];

                    if (
                        (value === undefined$1 && !(key in object)) ||
                        !predicate(value)
                    ) {
                        return false;
                    }
                }
                return true;
            }

            /**
             * The base implementation of `_.delay` and `_.defer` which accepts `args`
             * to provide to `func`.
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {Array} args The arguments to provide to `func`.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            function baseDelay(func, wait, args) {
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                return setTimeout(function () {
                    func.apply(undefined$1, args);
                }, wait);
            }

            /**
             * The base implementation of methods like `_.difference` without support
             * for excluding multiple arrays or iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Array} values The values to exclude.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             */
            function baseDifference(array, values, iteratee, comparator) {
                var index = -1,
                    includes = arrayIncludes,
                    isCommon = true,
                    length = array.length,
                    result = [],
                    valuesLength = values.length;

                if (!length) {
                    return result;
                }
                if (iteratee) {
                    values = arrayMap(values, baseUnary(iteratee));
                }
                if (comparator) {
                    includes = arrayIncludesWith;
                    isCommon = false;
                } else if (values.length >= LARGE_ARRAY_SIZE) {
                    includes = cacheHas;
                    isCommon = false;
                    values = new SetCache(values);
                }
                outer: while (++index < length) {
                    var value = array[index],
                        computed = iteratee == null ? value : iteratee(value);

                    value = comparator || value !== 0 ? value : 0;
                    if (isCommon && computed === computed) {
                        var valuesIndex = valuesLength;
                        while (valuesIndex--) {
                            if (values[valuesIndex] === computed) {
                                continue outer;
                            }
                        }
                        result.push(value);
                    } else if (!includes(values, computed, comparator)) {
                        result.push(value);
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.forEach` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEach = createBaseEach(baseForOwn);

            /**
             * The base implementation of `_.forEachRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEachRight = createBaseEach(baseForOwnRight, true);

            /**
             * The base implementation of `_.every` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`
             */
            function baseEvery(collection, predicate) {
                var result = true;
                baseEach(collection, function (value, index, collection) {
                    result = !!predicate(value, index, collection);
                    return result;
                });
                return result;
            }

            /**
             * The base implementation of methods like `_.max` and `_.min` which accepts a
             * `comparator` to determine the extremum value.
             *
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} iteratee The iteratee invoked per iteration.
             * @param {Function} comparator The comparator used to compare values.
             * @returns {*} Returns the extremum value.
             */
            function baseExtremum(array, iteratee, comparator) {
                var index = -1,
                    length = array.length;

                while (++index < length) {
                    var value = array[index],
                        current = iteratee(value);

                    if (
                        current != null &&
                        (computed === undefined$1
                            ? current === current && !isSymbol(current)
                            : comparator(current, computed))
                    ) {
                        var computed = current,
                            result = value;
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.fill` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             */
            function baseFill(array, value, start, end) {
                var length = array.length;

                start = toInteger(start);
                if (start < 0) {
                    start = -start > length ? 0 : length + start;
                }
                end =
                    end === undefined$1 || end > length
                        ? length
                        : toInteger(end);
                if (end < 0) {
                    end += length;
                }
                end = start > end ? 0 : toLength(end);
                while (start < end) {
                    array[start++] = value;
                }
                return array;
            }

            /**
             * The base implementation of `_.filter` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             */
            function baseFilter(collection, predicate) {
                var result = [];
                baseEach(collection, function (value, index, collection) {
                    if (predicate(value, index, collection)) {
                        result.push(value);
                    }
                });
                return result;
            }

            /**
             * The base implementation of `_.flatten` with support for restricting flattening.
             *
             * @private
             * @param {Array} array The array to flatten.
             * @param {number} depth The maximum recursion depth.
             * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
             * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
             * @param {Array} [result=[]] The initial result value.
             * @returns {Array} Returns the new flattened array.
             */
            function baseFlatten(array, depth, predicate, isStrict, result) {
                var index = -1,
                    length = array.length;

                predicate || (predicate = isFlattenable);
                result || (result = []);

                while (++index < length) {
                    var value = array[index];
                    if (depth > 0 && predicate(value)) {
                        if (depth > 1) {
                            // Recursively flatten arrays (susceptible to call stack limits).
                            baseFlatten(
                                value,
                                depth - 1,
                                predicate,
                                isStrict,
                                result
                            );
                        } else {
                            arrayPush(result, value);
                        }
                    } else if (!isStrict) {
                        result[result.length] = value;
                    }
                }
                return result;
            }

            /**
             * The base implementation of `baseForOwn` which iterates over `object`
             * properties returned by `keysFunc` and invokes `iteratee` for each property.
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseFor = createBaseFor();

            /**
             * This function is like `baseFor` except that it iterates over properties
             * in the opposite order.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseForRight = createBaseFor(true);

            /**
             * The base implementation of `_.forOwn` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwn(object, iteratee) {
                return object && baseFor(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwnRight(object, iteratee) {
                return object && baseForRight(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.functions` which creates an array of
             * `object` function property names filtered from `props`.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Array} props The property names to filter.
             * @returns {Array} Returns the function names.
             */
            function baseFunctions(object, props) {
                return arrayFilter(props, function (key) {
                    return isFunction(object[key]);
                });
            }

            /**
             * The base implementation of `_.get` without support for default values.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @returns {*} Returns the resolved value.
             */
            function baseGet(object, path) {
                path = castPath(path, object);

                var index = 0,
                    length = path.length;

                while (object != null && index < length) {
                    object = object[toKey(path[index++])];
                }
                return index && index == length ? object : undefined$1;
            }

            /**
             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
             * `keysFunc` and `symbolsFunc` to get the enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @param {Function} symbolsFunc The function to get the symbols of `object`.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                var result = keysFunc(object);
                return isArray(object)
                    ? result
                    : arrayPush(result, symbolsFunc(object));
            }

            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            function baseGetTag(value) {
                if (value == null) {
                    return value === undefined$1 ? undefinedTag : nullTag;
                }
                return symToStringTag && symToStringTag in Object(value)
                    ? getRawTag(value)
                    : objectToString(value);
            }

            /**
             * The base implementation of `_.gt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             */
            function baseGt(value, other) {
                return value > other;
            }

            /**
             * The base implementation of `_.has` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHas(object, key) {
                return object != null && hasOwnProperty.call(object, key);
            }

            /**
             * The base implementation of `_.hasIn` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHasIn(object, key) {
                return object != null && key in Object(object);
            }

            /**
             * The base implementation of `_.inRange` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to check.
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             */
            function baseInRange(number, start, end) {
                return (
                    number >= nativeMin(start, end) &&
                    number < nativeMax(start, end)
                );
            }

            /**
             * The base implementation of methods like `_.intersection`, without support
             * for iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of shared values.
             */
            function baseIntersection(arrays, iteratee, comparator) {
                var includes = comparator ? arrayIncludesWith : arrayIncludes,
                    length = arrays[0].length,
                    othLength = arrays.length,
                    othIndex = othLength,
                    caches = Array(othLength),
                    maxLength = Infinity,
                    result = [];

                while (othIndex--) {
                    var array = arrays[othIndex];
                    if (othIndex && iteratee) {
                        array = arrayMap(array, baseUnary(iteratee));
                    }
                    maxLength = nativeMin(array.length, maxLength);
                    caches[othIndex] =
                        !comparator &&
                        (iteratee || (length >= 120 && array.length >= 120))
                            ? new SetCache(othIndex && array)
                            : undefined$1;
                }
                array = arrays[0];

                var index = -1,
                    seen = caches[0];

                outer: while (++index < length && result.length < maxLength) {
                    var value = array[index],
                        computed = iteratee ? iteratee(value) : value;

                    value = comparator || value !== 0 ? value : 0;
                    if (
                        !(seen
                            ? cacheHas(seen, computed)
                            : includes(result, computed, comparator))
                    ) {
                        othIndex = othLength;
                        while (--othIndex) {
                            var cache = caches[othIndex];
                            if (
                                !(cache
                                    ? cacheHas(cache, computed)
                                    : includes(
                                          arrays[othIndex],
                                          computed,
                                          comparator
                                      ))
                            ) {
                                continue outer;
                            }
                        }
                        if (seen) {
                            seen.push(computed);
                        }
                        result.push(value);
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.invert` and `_.invertBy` which inverts
             * `object` with values transformed by `iteratee` and set by `setter`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform values.
             * @param {Object} accumulator The initial inverted object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseInverter(object, setter, iteratee, accumulator) {
                baseForOwn(object, function (value, key, object) {
                    setter(accumulator, iteratee(value), key, object);
                });
                return accumulator;
            }

            /**
             * The base implementation of `_.invoke` without support for individual
             * method arguments.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {Array} args The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             */
            function baseInvoke(object, path, args) {
                path = castPath(path, object);
                object = parent(object, path);
                var func = object == null ? object : object[toKey(last(path))];
                return func == null ? undefined$1 : apply(func, object, args);
            }

            /**
             * The base implementation of `_.isArguments`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             */
            function baseIsArguments(value) {
                return isObjectLike(value) && baseGetTag(value) == argsTag;
            }

            /**
             * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             */
            function baseIsArrayBuffer(value) {
                return (
                    isObjectLike(value) && baseGetTag(value) == arrayBufferTag
                );
            }

            /**
             * The base implementation of `_.isDate` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             */
            function baseIsDate(value) {
                return isObjectLike(value) && baseGetTag(value) == dateTag;
            }

            /**
             * The base implementation of `_.isEqual` which supports partial comparisons
             * and tracks traversed objects.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Unordered comparison
             *  2 - Partial comparison
             * @param {Function} [customizer] The function to customize comparisons.
             * @param {Object} [stack] Tracks traversed `value` and `other` objects.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             */
            function baseIsEqual(value, other, bitmask, customizer, stack) {
                if (value === other) {
                    return true;
                }
                if (
                    value == null ||
                    other == null ||
                    (!isObjectLike(value) && !isObjectLike(other))
                ) {
                    return value !== value && other !== other;
                }
                return baseIsEqualDeep(
                    value,
                    other,
                    bitmask,
                    customizer,
                    baseIsEqual,
                    stack
                );
            }

            /**
             * A specialized version of `baseIsEqual` for arrays and objects which performs
             * deep comparisons and tracks traversed objects enabling objects with circular
             * references to be compared.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} [stack] Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function baseIsEqualDeep(
                object,
                other,
                bitmask,
                customizer,
                equalFunc,
                stack
            ) {
                var objIsArr = isArray(object),
                    othIsArr = isArray(other),
                    objTag = objIsArr ? arrayTag : getTag(object),
                    othTag = othIsArr ? arrayTag : getTag(other);

                objTag = objTag == argsTag ? objectTag : objTag;
                othTag = othTag == argsTag ? objectTag : othTag;

                var objIsObj = objTag == objectTag,
                    othIsObj = othTag == objectTag,
                    isSameTag = objTag == othTag;

                if (isSameTag && isBuffer(object)) {
                    if (!isBuffer(other)) {
                        return false;
                    }
                    objIsArr = true;
                    objIsObj = false;
                }
                if (isSameTag && !objIsObj) {
                    stack || (stack = new Stack());
                    return objIsArr || isTypedArray(object)
                        ? equalArrays(
                              object,
                              other,
                              bitmask,
                              customizer,
                              equalFunc,
                              stack
                          )
                        : equalByTag(
                              object,
                              other,
                              objTag,
                              bitmask,
                              customizer,
                              equalFunc,
                              stack
                          );
                }
                if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                    var objIsWrapped =
                            objIsObj &&
                            hasOwnProperty.call(object, '__wrapped__'),
                        othIsWrapped =
                            othIsObj &&
                            hasOwnProperty.call(other, '__wrapped__');

                    if (objIsWrapped || othIsWrapped) {
                        var objUnwrapped = objIsWrapped
                                ? object.value()
                                : object,
                            othUnwrapped = othIsWrapped ? other.value() : other;

                        stack || (stack = new Stack());
                        return equalFunc(
                            objUnwrapped,
                            othUnwrapped,
                            bitmask,
                            customizer,
                            stack
                        );
                    }
                }
                if (!isSameTag) {
                    return false;
                }
                stack || (stack = new Stack());
                return equalObjects(
                    object,
                    other,
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                );
            }

            /**
             * The base implementation of `_.isMap` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             */
            function baseIsMap(value) {
                return isObjectLike(value) && getTag(value) == mapTag;
            }

            /**
             * The base implementation of `_.isMatch` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Array} matchData The property names, values, and compare flags to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             */
            function baseIsMatch(object, source, matchData, customizer) {
                var index = matchData.length,
                    length = index,
                    noCustomizer = !customizer;

                if (object == null) {
                    return !length;
                }
                object = Object(object);
                while (index--) {
                    var data = matchData[index];
                    if (
                        noCustomizer && data[2]
                            ? data[1] !== object[data[0]]
                            : !(data[0] in object)
                    ) {
                        return false;
                    }
                }
                while (++index < length) {
                    data = matchData[index];
                    var key = data[0],
                        objValue = object[key],
                        srcValue = data[1];

                    if (noCustomizer && data[2]) {
                        if (objValue === undefined$1 && !(key in object)) {
                            return false;
                        }
                    } else {
                        var stack = new Stack();
                        if (customizer) {
                            var result = customizer(
                                objValue,
                                srcValue,
                                key,
                                object,
                                source,
                                stack
                            );
                        }
                        if (
                            !(result === undefined$1
                                ? baseIsEqual(
                                      srcValue,
                                      objValue,
                                      COMPARE_PARTIAL_FLAG |
                                          COMPARE_UNORDERED_FLAG,
                                      customizer,
                                      stack
                                  )
                                : result)
                        ) {
                            return false;
                        }
                    }
                }
                return true;
            }

            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */
            function baseIsNative(value) {
                if (!isObject(value) || isMasked(value)) {
                    return false;
                }
                var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                return pattern.test(toSource(value));
            }

            /**
             * The base implementation of `_.isRegExp` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             */
            function baseIsRegExp(value) {
                return isObjectLike(value) && baseGetTag(value) == regexpTag;
            }

            /**
             * The base implementation of `_.isSet` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             */
            function baseIsSet(value) {
                return isObjectLike(value) && getTag(value) == setTag;
            }

            /**
             * The base implementation of `_.isTypedArray` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             */
            function baseIsTypedArray(value) {
                return (
                    isObjectLike(value) &&
                    isLength(value.length) &&
                    !!typedArrayTags[baseGetTag(value)]
                );
            }

            /**
             * The base implementation of `_.iteratee`.
             *
             * @private
             * @param {*} [value=_.identity] The value to convert to an iteratee.
             * @returns {Function} Returns the iteratee.
             */
            function baseIteratee(value) {
                // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                if (typeof value == 'function') {
                    return value;
                }
                if (value == null) {
                    return identity;
                }
                if (typeof value == 'object') {
                    return isArray(value)
                        ? baseMatchesProperty(value[0], value[1])
                        : baseMatches(value);
                }
                return property(value);
            }

            /**
             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeys(object) {
                if (!isPrototype(object)) {
                    return nativeKeys(object);
                }
                var result = [];
                for (var key in Object(object)) {
                    if (
                        hasOwnProperty.call(object, key) &&
                        key != 'constructor'
                    ) {
                        result.push(key);
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeysIn(object) {
                if (!isObject(object)) {
                    return nativeKeysIn(object);
                }
                var isProto = isPrototype(object),
                    result = [];

                for (var key in object) {
                    if (
                        !(
                            key == 'constructor' &&
                            (isProto || !hasOwnProperty.call(object, key))
                        )
                    ) {
                        result.push(key);
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.lt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             */
            function baseLt(value, other) {
                return value < other;
            }

            /**
             * The base implementation of `_.map` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function baseMap(collection, iteratee) {
                var index = -1,
                    result = isArrayLike(collection)
                        ? Array(collection.length)
                        : [];

                baseEach(collection, function (value, key, collection) {
                    result[++index] = iteratee(value, key, collection);
                });
                return result;
            }

            /**
             * The base implementation of `_.matches` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatches(source) {
                var matchData = getMatchData(source);
                if (matchData.length == 1 && matchData[0][2]) {
                    return matchesStrictComparable(
                        matchData[0][0],
                        matchData[0][1]
                    );
                }
                return function (object) {
                    return (
                        object === source ||
                        baseIsMatch(object, source, matchData)
                    );
                };
            }

            /**
             * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
             *
             * @private
             * @param {string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatchesProperty(path, srcValue) {
                if (isKey(path) && isStrictComparable(srcValue)) {
                    return matchesStrictComparable(toKey(path), srcValue);
                }
                return function (object) {
                    var objValue = get(object, path);
                    return objValue === undefined$1 && objValue === srcValue
                        ? hasIn(object, path)
                        : baseIsEqual(
                              srcValue,
                              objValue,
                              COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                          );
                };
            }

            /**
             * The base implementation of `_.merge` without support for multiple sources.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} [customizer] The function to customize merged values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMerge(object, source, srcIndex, customizer, stack) {
                if (object === source) {
                    return;
                }
                baseFor(
                    source,
                    function (srcValue, key) {
                        stack || (stack = new Stack());
                        if (isObject(srcValue)) {
                            baseMergeDeep(
                                object,
                                source,
                                key,
                                srcIndex,
                                baseMerge,
                                customizer,
                                stack
                            );
                        } else {
                            var newValue = customizer
                                ? customizer(
                                      safeGet(object, key),
                                      srcValue,
                                      key + '',
                                      object,
                                      source,
                                      stack
                                  )
                                : undefined$1;

                            if (newValue === undefined$1) {
                                newValue = srcValue;
                            }
                            assignMergeValue(object, key, newValue);
                        }
                    },
                    keysIn
                );
            }

            /**
             * A specialized version of `baseMerge` for arrays and objects which performs
             * deep merges and tracks traversed objects enabling objects with circular
             * references to be merged.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {string} key The key of the value to merge.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} mergeFunc The function to merge values.
             * @param {Function} [customizer] The function to customize assigned values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMergeDeep(
                object,
                source,
                key,
                srcIndex,
                mergeFunc,
                customizer,
                stack
            ) {
                var objValue = safeGet(object, key),
                    srcValue = safeGet(source, key),
                    stacked = stack.get(srcValue);

                if (stacked) {
                    assignMergeValue(object, key, stacked);
                    return;
                }
                var newValue = customizer
                    ? customizer(
                          objValue,
                          srcValue,
                          key + '',
                          object,
                          source,
                          stack
                      )
                    : undefined$1;

                var isCommon = newValue === undefined$1;

                if (isCommon) {
                    var isArr = isArray(srcValue),
                        isBuff = !isArr && isBuffer(srcValue),
                        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                    newValue = srcValue;
                    if (isArr || isBuff || isTyped) {
                        if (isArray(objValue)) {
                            newValue = objValue;
                        } else if (isArrayLikeObject(objValue)) {
                            newValue = copyArray(objValue);
                        } else if (isBuff) {
                            isCommon = false;
                            newValue = cloneBuffer(srcValue, true);
                        } else if (isTyped) {
                            isCommon = false;
                            newValue = cloneTypedArray(srcValue, true);
                        } else {
                            newValue = [];
                        }
                    } else if (
                        isPlainObject(srcValue) ||
                        isArguments(srcValue)
                    ) {
                        newValue = objValue;
                        if (isArguments(objValue)) {
                            newValue = toPlainObject(objValue);
                        } else if (
                            !isObject(objValue) ||
                            isFunction(objValue)
                        ) {
                            newValue = initCloneObject(srcValue);
                        }
                    } else {
                        isCommon = false;
                    }
                }
                if (isCommon) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, newValue);
                    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                    stack['delete'](srcValue);
                }
                assignMergeValue(object, key, newValue);
            }

            /**
             * The base implementation of `_.nth` which doesn't coerce arguments.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {number} n The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             */
            function baseNth(array, n) {
                var length = array.length;
                if (!length) {
                    return;
                }
                n += n < 0 ? length : 0;
                return isIndex(n, length) ? array[n] : undefined$1;
            }

            /**
             * The base implementation of `_.orderBy` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
             * @param {string[]} orders The sort orders of `iteratees`.
             * @returns {Array} Returns the new sorted array.
             */
            function baseOrderBy(collection, iteratees, orders) {
                if (iteratees.length) {
                    iteratees = arrayMap(iteratees, function (iteratee) {
                        if (isArray(iteratee)) {
                            return function (value) {
                                return baseGet(
                                    value,
                                    iteratee.length === 1
                                        ? iteratee[0]
                                        : iteratee
                                );
                            };
                        }
                        return iteratee;
                    });
                } else {
                    iteratees = [identity];
                }

                var index = -1;
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

                var result = baseMap(
                    collection,
                    function (value, key, collection) {
                        var criteria = arrayMap(iteratees, function (iteratee) {
                            return iteratee(value);
                        });
                        return {
                            criteria: criteria,
                            index: ++index,
                            value: value,
                        };
                    }
                );

                return baseSortBy(result, function (object, other) {
                    return compareMultiple(object, other, orders);
                });
            }

            /**
             * The base implementation of `_.pick` without support for individual
             * property identifiers.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @returns {Object} Returns the new object.
             */
            function basePick(object, paths) {
                return basePickBy(object, paths, function (value, path) {
                    return hasIn(object, path);
                });
            }

            /**
             * The base implementation of  `_.pickBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @param {Function} predicate The function invoked per property.
             * @returns {Object} Returns the new object.
             */
            function basePickBy(object, paths, predicate) {
                var index = -1,
                    length = paths.length,
                    result = {};

                while (++index < length) {
                    var path = paths[index],
                        value = baseGet(object, path);

                    if (predicate(value, path)) {
                        baseSet(result, castPath(path, object), value);
                    }
                }
                return result;
            }

            /**
             * A specialized version of `baseProperty` which supports deep paths.
             *
             * @private
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyDeep(path) {
                return function (object) {
                    return baseGet(object, path);
                };
            }

            /**
             * The base implementation of `_.pullAllBy` without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             */
            function basePullAll(array, values, iteratee, comparator) {
                var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                    index = -1,
                    length = values.length,
                    seen = array;

                if (array === values) {
                    values = copyArray(values);
                }
                if (iteratee) {
                    seen = arrayMap(array, baseUnary(iteratee));
                }
                while (++index < length) {
                    var fromIndex = 0,
                        value = values[index],
                        computed = iteratee ? iteratee(value) : value;

                    while (
                        (fromIndex = indexOf(
                            seen,
                            computed,
                            fromIndex,
                            comparator
                        )) > -1
                    ) {
                        if (seen !== array) {
                            splice.call(seen, fromIndex, 1);
                        }
                        splice.call(array, fromIndex, 1);
                    }
                }
                return array;
            }

            /**
             * The base implementation of `_.pullAt` without support for individual
             * indexes or capturing the removed elements.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {number[]} indexes The indexes of elements to remove.
             * @returns {Array} Returns `array`.
             */
            function basePullAt(array, indexes) {
                var length = array ? indexes.length : 0,
                    lastIndex = length - 1;

                while (length--) {
                    var index = indexes[length];
                    if (length == lastIndex || index !== previous) {
                        var previous = index;
                        if (isIndex(index)) {
                            splice.call(array, index, 1);
                        } else {
                            baseUnset(array, index);
                        }
                    }
                }
                return array;
            }

            /**
             * The base implementation of `_.random` without support for returning
             * floating-point numbers.
             *
             * @private
             * @param {number} lower The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the random number.
             */
            function baseRandom(lower, upper) {
                return (
                    lower + nativeFloor(nativeRandom() * (upper - lower + 1))
                );
            }

            /**
             * The base implementation of `_.range` and `_.rangeRight` which doesn't
             * coerce arguments.
             *
             * @private
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @param {number} step The value to increment or decrement by.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the range of numbers.
             */
            function baseRange(start, end, step, fromRight) {
                var index = -1,
                    length = nativeMax(
                        nativeCeil((end - start) / (step || 1)),
                        0
                    ),
                    result = Array(length);

                while (length--) {
                    result[fromRight ? length : ++index] = start;
                    start += step;
                }
                return result;
            }

            /**
             * The base implementation of `_.repeat` which doesn't coerce arguments.
             *
             * @private
             * @param {string} string The string to repeat.
             * @param {number} n The number of times to repeat the string.
             * @returns {string} Returns the repeated string.
             */
            function baseRepeat(string, n) {
                var result = '';
                if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                    return result;
                }
                // Leverage the exponentiation by squaring algorithm for a faster repeat.
                // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                do {
                    if (n % 2) {
                        result += string;
                    }
                    n = nativeFloor(n / 2);
                    if (n) {
                        string += string;
                    }
                } while (n);

                return result;
            }

            /**
             * The base implementation of `_.rest` which doesn't validate or coerce arguments.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             */
            function baseRest(func, start) {
                return setToString(overRest(func, start, identity), func + '');
            }

            /**
             * The base implementation of `_.sample`.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             */
            function baseSample(collection) {
                return arraySample(values(collection));
            }

            /**
             * The base implementation of `_.sampleSize` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function baseSampleSize(collection, n) {
                var array = values(collection);
                return shuffleSelf(array, baseClamp(n, 0, array.length));
            }

            /**
             * The base implementation of `_.set`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseSet(object, path, value, customizer) {
                if (!isObject(object)) {
                    return object;
                }
                path = castPath(path, object);

                var index = -1,
                    length = path.length,
                    lastIndex = length - 1,
                    nested = object;

                while (nested != null && ++index < length) {
                    var key = toKey(path[index]),
                        newValue = value;

                    if (
                        key === '__proto__' ||
                        key === 'constructor' ||
                        key === 'prototype'
                    ) {
                        return object;
                    }

                    if (index != lastIndex) {
                        var objValue = nested[key];
                        newValue = customizer
                            ? customizer(objValue, key, nested)
                            : undefined$1;
                        if (newValue === undefined$1) {
                            newValue = isObject(objValue)
                                ? objValue
                                : isIndex(path[index + 1])
                                ? []
                                : {};
                        }
                    }
                    assignValue(nested, key, newValue);
                    nested = nested[key];
                }
                return object;
            }

            /**
             * The base implementation of `setData` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var baseSetData = !metaMap
                ? identity
                : function (func, data) {
                      metaMap.set(func, data);
                      return func;
                  };

            /**
             * The base implementation of `setToString` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var baseSetToString = !defineProperty
                ? identity
                : function (func, string) {
                      return defineProperty(func, 'toString', {
                          configurable: true,
                          enumerable: false,
                          value: constant(string),
                          writable: true,
                      });
                  };

            /**
             * The base implementation of `_.shuffle`.
             *
             * @private
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function baseShuffle(collection) {
                return shuffleSelf(values(collection));
            }

            /**
             * The base implementation of `_.slice` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseSlice(array, start, end) {
                var index = -1,
                    length = array.length;

                if (start < 0) {
                    start = -start > length ? 0 : length + start;
                }
                end = end > length ? length : end;
                if (end < 0) {
                    end += length;
                }
                length = start > end ? 0 : (end - start) >>> 0;
                start >>>= 0;

                var result = Array(length);
                while (++index < length) {
                    result[index] = array[index + start];
                }
                return result;
            }

            /**
             * The base implementation of `_.some` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             */
            function baseSome(collection, predicate) {
                var result;

                baseEach(collection, function (value, index, collection) {
                    result = predicate(value, index, collection);
                    return !result;
                });
                return !!result;
            }

            /**
             * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
             * performs a binary search of `array` to determine the index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndex(array, value, retHighest) {
                var low = 0,
                    high = array == null ? low : array.length;

                if (
                    typeof value == 'number' &&
                    value === value &&
                    high <= HALF_MAX_ARRAY_LENGTH
                ) {
                    while (low < high) {
                        var mid = (low + high) >>> 1,
                            computed = array[mid];

                        if (
                            computed !== null &&
                            !isSymbol(computed) &&
                            (retHighest ? computed <= value : computed < value)
                        ) {
                            low = mid + 1;
                        } else {
                            high = mid;
                        }
                    }
                    return high;
                }
                return baseSortedIndexBy(array, value, identity, retHighest);
            }

            /**
             * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
             * which invokes `iteratee` for `value` and each element of `array` to compute
             * their sort ranking. The iteratee is invoked with one argument; (value).
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} iteratee The iteratee invoked per element.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndexBy(array, value, iteratee, retHighest) {
                var low = 0,
                    high = array == null ? 0 : array.length;
                if (high === 0) {
                    return 0;
                }

                value = iteratee(value);
                var valIsNaN = value !== value,
                    valIsNull = value === null,
                    valIsSymbol = isSymbol(value),
                    valIsUndefined = value === undefined$1;

                while (low < high) {
                    var mid = nativeFloor((low + high) / 2),
                        computed = iteratee(array[mid]),
                        othIsDefined = computed !== undefined$1,
                        othIsNull = computed === null,
                        othIsReflexive = computed === computed,
                        othIsSymbol = isSymbol(computed);

                    if (valIsNaN) {
                        var setLow = retHighest || othIsReflexive;
                    } else if (valIsUndefined) {
                        setLow = othIsReflexive && (retHighest || othIsDefined);
                    } else if (valIsNull) {
                        setLow =
                            othIsReflexive &&
                            othIsDefined &&
                            (retHighest || !othIsNull);
                    } else if (valIsSymbol) {
                        setLow =
                            othIsReflexive &&
                            othIsDefined &&
                            !othIsNull &&
                            (retHighest || !othIsSymbol);
                    } else if (othIsNull || othIsSymbol) {
                        setLow = false;
                    } else {
                        setLow = retHighest
                            ? computed <= value
                            : computed < value;
                    }
                    if (setLow) {
                        low = mid + 1;
                    } else {
                        high = mid;
                    }
                }
                return nativeMin(high, MAX_ARRAY_INDEX);
            }

            /**
             * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
             * support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseSortedUniq(array, iteratee) {
                var index = -1,
                    length = array.length,
                    resIndex = 0,
                    result = [];

                while (++index < length) {
                    var value = array[index],
                        computed = iteratee ? iteratee(value) : value;

                    if (!index || !eq(computed, seen)) {
                        var seen = computed;
                        result[resIndex++] = value === 0 ? 0 : value;
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.toNumber` which doesn't ensure correct
             * conversions of binary, hexadecimal, or octal string values.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             */
            function baseToNumber(value) {
                if (typeof value == 'number') {
                    return value;
                }
                if (isSymbol(value)) {
                    return NAN;
                }
                return +value;
            }

            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */
            function baseToString(value) {
                // Exit early for strings to avoid a performance hit in some environments.
                if (typeof value == 'string') {
                    return value;
                }
                if (isArray(value)) {
                    // Recursively convert values (susceptible to call stack limits).
                    return arrayMap(value, baseToString) + '';
                }
                if (isSymbol(value)) {
                    return symbolToString ? symbolToString.call(value) : '';
                }
                var result = value + '';
                return result == '0' && 1 / value == -INFINITY ? '-0' : result;
            }

            /**
             * The base implementation of `_.uniqBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseUniq(array, iteratee, comparator) {
                var index = -1,
                    includes = arrayIncludes,
                    length = array.length,
                    isCommon = true,
                    result = [],
                    seen = result;

                if (comparator) {
                    isCommon = false;
                    includes = arrayIncludesWith;
                } else if (length >= LARGE_ARRAY_SIZE) {
                    var set = iteratee ? null : createSet(array);
                    if (set) {
                        return setToArray(set);
                    }
                    isCommon = false;
                    includes = cacheHas;
                    seen = new SetCache();
                } else {
                    seen = iteratee ? [] : result;
                }
                outer: while (++index < length) {
                    var value = array[index],
                        computed = iteratee ? iteratee(value) : value;

                    value = comparator || value !== 0 ? value : 0;
                    if (isCommon && computed === computed) {
                        var seenIndex = seen.length;
                        while (seenIndex--) {
                            if (seen[seenIndex] === computed) {
                                continue outer;
                            }
                        }
                        if (iteratee) {
                            seen.push(computed);
                        }
                        result.push(value);
                    } else if (!includes(seen, computed, comparator)) {
                        if (seen !== result) {
                            seen.push(computed);
                        }
                        result.push(value);
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.unset`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The property path to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             */
            function baseUnset(object, path) {
                path = castPath(path, object);
                object = parent(object, path);
                return object == null || delete object[toKey(last(path))];
            }

            /**
             * The base implementation of `_.update`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to update.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseUpdate(object, path, updater, customizer) {
                return baseSet(
                    object,
                    path,
                    updater(baseGet(object, path)),
                    customizer
                );
            }

            /**
             * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
             * without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {Function} predicate The function invoked per iteration.
             * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseWhile(array, predicate, isDrop, fromRight) {
                var length = array.length,
                    index = fromRight ? length : -1;

                while (
                    (fromRight ? index-- : ++index < length) &&
                    predicate(array[index], index, array)
                ) {}

                return isDrop
                    ? baseSlice(
                          array,
                          fromRight ? 0 : index,
                          fromRight ? index + 1 : length
                      )
                    : baseSlice(
                          array,
                          fromRight ? index + 1 : 0,
                          fromRight ? length : index
                      );
            }

            /**
             * The base implementation of `wrapperValue` which returns the result of
             * performing a sequence of actions on the unwrapped `value`, where each
             * successive action is supplied the return value of the previous.
             *
             * @private
             * @param {*} value The unwrapped value.
             * @param {Array} actions Actions to perform to resolve the unwrapped value.
             * @returns {*} Returns the resolved value.
             */
            function baseWrapperValue(value, actions) {
                var result = value;
                if (result instanceof LazyWrapper) {
                    result = result.value();
                }
                return arrayReduce(
                    actions,
                    function (result, action) {
                        return action.func.apply(
                            action.thisArg,
                            arrayPush([result], action.args)
                        );
                    },
                    result
                );
            }

            /**
             * The base implementation of methods like `_.xor`, without support for
             * iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of values.
             */
            function baseXor(arrays, iteratee, comparator) {
                var length = arrays.length;
                if (length < 2) {
                    return length ? baseUniq(arrays[0]) : [];
                }
                var index = -1,
                    result = Array(length);

                while (++index < length) {
                    var array = arrays[index],
                        othIndex = -1;

                    while (++othIndex < length) {
                        if (othIndex != index) {
                            result[index] = baseDifference(
                                result[index] || array,
                                arrays[othIndex],
                                iteratee,
                                comparator
                            );
                        }
                    }
                }
                return baseUniq(baseFlatten(result, 1), iteratee, comparator);
            }

            /**
             * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
             *
             * @private
             * @param {Array} props The property identifiers.
             * @param {Array} values The property values.
             * @param {Function} assignFunc The function to assign values.
             * @returns {Object} Returns the new object.
             */
            function baseZipObject(props, values, assignFunc) {
                var index = -1,
                    length = props.length,
                    valsLength = values.length,
                    result = {};

                while (++index < length) {
                    var value =
                        index < valsLength ? values[index] : undefined$1;
                    assignFunc(result, props[index], value);
                }
                return result;
            }

            /**
             * Casts `value` to an empty array if it's not an array like object.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Array|Object} Returns the cast array-like object.
             */
            function castArrayLikeObject(value) {
                return isArrayLikeObject(value) ? value : [];
            }

            /**
             * Casts `value` to `identity` if it's not a function.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Function} Returns cast function.
             */
            function castFunction(value) {
                return typeof value == 'function' ? value : identity;
            }

            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */
            function castPath(value, object) {
                if (isArray(value)) {
                    return value;
                }
                return isKey(value, object)
                    ? [value]
                    : stringToPath(toString(value));
            }

            /**
             * A `baseRest` alias which can be replaced with `identity` by module
             * replacement plugins.
             *
             * @private
             * @type {Function}
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            var castRest = baseRest;

            /**
             * Casts `array` to a slice if it's needed.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {number} start The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the cast slice.
             */
            function castSlice(array, start, end) {
                var length = array.length;
                end = end === undefined$1 ? length : end;
                return !start && end >= length
                    ? array
                    : baseSlice(array, start, end);
            }

            /**
             * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
             *
             * @private
             * @param {number|Object} id The timer id or timeout object of the timer to clear.
             */
            var clearTimeout =
                ctxClearTimeout ||
                function (id) {
                    return root.clearTimeout(id);
                };

            /**
             * Creates a clone of  `buffer`.
             *
             * @private
             * @param {Buffer} buffer The buffer to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Buffer} Returns the cloned buffer.
             */
            function cloneBuffer(buffer, isDeep) {
                if (isDeep) {
                    return buffer.slice();
                }
                var length = buffer.length,
                    result = allocUnsafe
                        ? allocUnsafe(length)
                        : new buffer.constructor(length);

                buffer.copy(result);
                return result;
            }

            /**
             * Creates a clone of `arrayBuffer`.
             *
             * @private
             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
             * @returns {ArrayBuffer} Returns the cloned array buffer.
             */
            function cloneArrayBuffer(arrayBuffer) {
                var result = new arrayBuffer.constructor(
                    arrayBuffer.byteLength
                );
                new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                return result;
            }

            /**
             * Creates a clone of `dataView`.
             *
             * @private
             * @param {Object} dataView The data view to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned data view.
             */
            function cloneDataView(dataView, isDeep) {
                var buffer = isDeep
                    ? cloneArrayBuffer(dataView.buffer)
                    : dataView.buffer;
                return new dataView.constructor(
                    buffer,
                    dataView.byteOffset,
                    dataView.byteLength
                );
            }

            /**
             * Creates a clone of `regexp`.
             *
             * @private
             * @param {Object} regexp The regexp to clone.
             * @returns {Object} Returns the cloned regexp.
             */
            function cloneRegExp(regexp) {
                var result = new regexp.constructor(
                    regexp.source,
                    reFlags.exec(regexp)
                );
                result.lastIndex = regexp.lastIndex;
                return result;
            }

            /**
             * Creates a clone of the `symbol` object.
             *
             * @private
             * @param {Object} symbol The symbol object to clone.
             * @returns {Object} Returns the cloned symbol object.
             */
            function cloneSymbol(symbol) {
                return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
            }

            /**
             * Creates a clone of `typedArray`.
             *
             * @private
             * @param {Object} typedArray The typed array to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned typed array.
             */
            function cloneTypedArray(typedArray, isDeep) {
                var buffer = isDeep
                    ? cloneArrayBuffer(typedArray.buffer)
                    : typedArray.buffer;
                return new typedArray.constructor(
                    buffer,
                    typedArray.byteOffset,
                    typedArray.length
                );
            }

            /**
             * Compares values to sort them in ascending order.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {number} Returns the sort order indicator for `value`.
             */
            function compareAscending(value, other) {
                if (value !== other) {
                    var valIsDefined = value !== undefined$1,
                        valIsNull = value === null,
                        valIsReflexive = value === value,
                        valIsSymbol = isSymbol(value);

                    var othIsDefined = other !== undefined$1,
                        othIsNull = other === null,
                        othIsReflexive = other === other,
                        othIsSymbol = isSymbol(other);

                    if (
                        (!othIsNull &&
                            !othIsSymbol &&
                            !valIsSymbol &&
                            value > other) ||
                        (valIsSymbol &&
                            othIsDefined &&
                            othIsReflexive &&
                            !othIsNull &&
                            !othIsSymbol) ||
                        (valIsNull && othIsDefined && othIsReflexive) ||
                        (!valIsDefined && othIsReflexive) ||
                        !valIsReflexive
                    ) {
                        return 1;
                    }
                    if (
                        (!valIsNull &&
                            !valIsSymbol &&
                            !othIsSymbol &&
                            value < other) ||
                        (othIsSymbol &&
                            valIsDefined &&
                            valIsReflexive &&
                            !valIsNull &&
                            !valIsSymbol) ||
                        (othIsNull && valIsDefined && valIsReflexive) ||
                        (!othIsDefined && valIsReflexive) ||
                        !othIsReflexive
                    ) {
                        return -1;
                    }
                }
                return 0;
            }

            /**
             * Used by `_.orderBy` to compare multiple properties of a value to another
             * and stable sort them.
             *
             * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
             * specify an order of "desc" for descending or "asc" for ascending sort order
             * of corresponding values.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {boolean[]|string[]} orders The order to sort by for each property.
             * @returns {number} Returns the sort order indicator for `object`.
             */
            function compareMultiple(object, other, orders) {
                var index = -1,
                    objCriteria = object.criteria,
                    othCriteria = other.criteria,
                    length = objCriteria.length,
                    ordersLength = orders.length;

                while (++index < length) {
                    var result = compareAscending(
                        objCriteria[index],
                        othCriteria[index]
                    );
                    if (result) {
                        if (index >= ordersLength) {
                            return result;
                        }
                        var order = orders[index];
                        return result * (order == 'desc' ? -1 : 1);
                    }
                }
                // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                // that causes it, under certain circumstances, to provide the same value for
                // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                // for more details.
                //
                // This also ensures a stable sort in V8 and other engines.
                // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                return object.index - other.index;
            }

            /**
             * Creates an array that is the composition of partially applied arguments,
             * placeholders, and provided arguments into a single array of arguments.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to prepend to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgs(args, partials, holders, isCurried) {
                var argsIndex = -1,
                    argsLength = args.length,
                    holdersLength = holders.length,
                    leftIndex = -1,
                    leftLength = partials.length,
                    rangeLength = nativeMax(argsLength - holdersLength, 0),
                    result = Array(leftLength + rangeLength),
                    isUncurried = !isCurried;

                while (++leftIndex < leftLength) {
                    result[leftIndex] = partials[leftIndex];
                }
                while (++argsIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                        result[holders[argsIndex]] = args[argsIndex];
                    }
                }
                while (rangeLength--) {
                    result[leftIndex++] = args[argsIndex++];
                }
                return result;
            }

            /**
             * This function is like `composeArgs` except that the arguments composition
             * is tailored for `_.partialRight`.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to append to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgsRight(args, partials, holders, isCurried) {
                var argsIndex = -1,
                    argsLength = args.length,
                    holdersIndex = -1,
                    holdersLength = holders.length,
                    rightIndex = -1,
                    rightLength = partials.length,
                    rangeLength = nativeMax(argsLength - holdersLength, 0),
                    result = Array(rangeLength + rightLength),
                    isUncurried = !isCurried;

                while (++argsIndex < rangeLength) {
                    result[argsIndex] = args[argsIndex];
                }
                var offset = argsIndex;
                while (++rightIndex < rightLength) {
                    result[offset + rightIndex] = partials[rightIndex];
                }
                while (++holdersIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                        result[offset + holders[holdersIndex]] =
                            args[argsIndex++];
                    }
                }
                return result;
            }

            /**
             * Copies the values of `source` to `array`.
             *
             * @private
             * @param {Array} source The array to copy values from.
             * @param {Array} [array=[]] The array to copy values to.
             * @returns {Array} Returns `array`.
             */
            function copyArray(source, array) {
                var index = -1,
                    length = source.length;

                array || (array = Array(length));
                while (++index < length) {
                    array[index] = source[index];
                }
                return array;
            }

            /**
             * Copies properties of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy properties from.
             * @param {Array} props The property identifiers to copy.
             * @param {Object} [object={}] The object to copy properties to.
             * @param {Function} [customizer] The function to customize copied values.
             * @returns {Object} Returns `object`.
             */
            function copyObject(source, props, object, customizer) {
                var isNew = !object;
                object || (object = {});

                var index = -1,
                    length = props.length;

                while (++index < length) {
                    var key = props[index];

                    var newValue = customizer
                        ? customizer(
                              object[key],
                              source[key],
                              key,
                              object,
                              source
                          )
                        : undefined$1;

                    if (newValue === undefined$1) {
                        newValue = source[key];
                    }
                    if (isNew) {
                        baseAssignValue(object, key, newValue);
                    } else {
                        assignValue(object, key, newValue);
                    }
                }
                return object;
            }

            /**
             * Copies own symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbols(source, object) {
                return copyObject(source, getSymbols(source), object);
            }

            /**
             * Copies own and inherited symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbolsIn(source, object) {
                return copyObject(source, getSymbolsIn(source), object);
            }

            /**
             * Creates a function like `_.groupBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} [initializer] The accumulator object initializer.
             * @returns {Function} Returns the new aggregator function.
             */
            function createAggregator(setter, initializer) {
                return function (collection, iteratee) {
                    var func = isArray(collection)
                            ? arrayAggregator
                            : baseAggregator,
                        accumulator = initializer ? initializer() : {};

                    return func(
                        collection,
                        setter,
                        getIteratee(iteratee, 2),
                        accumulator
                    );
                };
            }

            /**
             * Creates a function like `_.assign`.
             *
             * @private
             * @param {Function} assigner The function to assign values.
             * @returns {Function} Returns the new assigner function.
             */
            function createAssigner(assigner) {
                return baseRest(function (object, sources) {
                    var index = -1,
                        length = sources.length,
                        customizer =
                            length > 1 ? sources[length - 1] : undefined$1,
                        guard = length > 2 ? sources[2] : undefined$1;

                    customizer =
                        assigner.length > 3 && typeof customizer == 'function'
                            ? (length--, customizer)
                            : undefined$1;

                    if (
                        guard &&
                        isIterateeCall(sources[0], sources[1], guard)
                    ) {
                        customizer = length < 3 ? undefined$1 : customizer;
                        length = 1;
                    }
                    object = Object(object);
                    while (++index < length) {
                        var source = sources[index];
                        if (source) {
                            assigner(object, source, index, customizer);
                        }
                    }
                    return object;
                });
            }

            /**
             * Creates a `baseEach` or `baseEachRight` function.
             *
             * @private
             * @param {Function} eachFunc The function to iterate over a collection.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseEach(eachFunc, fromRight) {
                return function (collection, iteratee) {
                    if (collection == null) {
                        return collection;
                    }
                    if (!isArrayLike(collection)) {
                        return eachFunc(collection, iteratee);
                    }
                    var length = collection.length,
                        index = fromRight ? length : -1,
                        iterable = Object(collection);

                    while (fromRight ? index-- : ++index < length) {
                        if (
                            iteratee(iterable[index], index, iterable) === false
                        ) {
                            break;
                        }
                    }
                    return collection;
                };
            }

            /**
             * Creates a base function for methods like `_.forIn` and `_.forOwn`.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseFor(fromRight) {
                return function (object, iteratee, keysFunc) {
                    var index = -1,
                        iterable = Object(object),
                        props = keysFunc(object),
                        length = props.length;

                    while (length--) {
                        var key = props[fromRight ? length : ++index];
                        if (iteratee(iterable[key], key, iterable) === false) {
                            break;
                        }
                    }
                    return object;
                };
            }

            /**
             * Creates a function that wraps `func` to invoke it with the optional `this`
             * binding of `thisArg`.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createBind(func, bitmask, thisArg) {
                var isBind = bitmask & WRAP_BIND_FLAG,
                    Ctor = createCtor(func);

                function wrapper() {
                    var fn =
                        this && this !== root && this instanceof wrapper
                            ? Ctor
                            : func;
                    return fn.apply(isBind ? thisArg : this, arguments);
                }
                return wrapper;
            }

            /**
             * Creates a function like `_.lowerFirst`.
             *
             * @private
             * @param {string} methodName The name of the `String` case method to use.
             * @returns {Function} Returns the new case function.
             */
            function createCaseFirst(methodName) {
                return function (string) {
                    string = toString(string);

                    var strSymbols = hasUnicode(string)
                        ? stringToArray(string)
                        : undefined$1;

                    var chr = strSymbols ? strSymbols[0] : string.charAt(0);

                    var trailing = strSymbols
                        ? castSlice(strSymbols, 1).join('')
                        : string.slice(1);

                    return chr[methodName]() + trailing;
                };
            }

            /**
             * Creates a function like `_.camelCase`.
             *
             * @private
             * @param {Function} callback The function to combine each word.
             * @returns {Function} Returns the new compounder function.
             */
            function createCompounder(callback) {
                return function (string) {
                    return arrayReduce(
                        words(deburr(string).replace(reApos, '')),
                        callback,
                        ''
                    );
                };
            }

            /**
             * Creates a function that produces an instance of `Ctor` regardless of
             * whether it was invoked as part of a `new` expression or by `call` or `apply`.
             *
             * @private
             * @param {Function} Ctor The constructor to wrap.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCtor(Ctor) {
                return function () {
                    // Use a `switch` statement to work with class constructors. See
                    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                    // for more details.
                    var args = arguments;
                    switch (args.length) {
                        case 0:
                            return new Ctor();
                        case 1:
                            return new Ctor(args[0]);
                        case 2:
                            return new Ctor(args[0], args[1]);
                        case 3:
                            return new Ctor(args[0], args[1], args[2]);
                        case 4:
                            return new Ctor(args[0], args[1], args[2], args[3]);
                        case 5:
                            return new Ctor(
                                args[0],
                                args[1],
                                args[2],
                                args[3],
                                args[4]
                            );
                        case 6:
                            return new Ctor(
                                args[0],
                                args[1],
                                args[2],
                                args[3],
                                args[4],
                                args[5]
                            );
                        case 7:
                            return new Ctor(
                                args[0],
                                args[1],
                                args[2],
                                args[3],
                                args[4],
                                args[5],
                                args[6]
                            );
                    }
                    var thisBinding = baseCreate(Ctor.prototype),
                        result = Ctor.apply(thisBinding, args);

                    // Mimic the constructor's `return` behavior.
                    // See https://es5.github.io/#x13.2.2 for more details.
                    return isObject(result) ? result : thisBinding;
                };
            }

            /**
             * Creates a function that wraps `func` to enable currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {number} arity The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCurry(func, bitmask, arity) {
                var Ctor = createCtor(func);

                function wrapper() {
                    var length = arguments.length,
                        args = Array(length),
                        index = length,
                        placeholder = getHolder(wrapper);

                    while (index--) {
                        args[index] = arguments[index];
                    }
                    var holders =
                        length < 3 &&
                        args[0] !== placeholder &&
                        args[length - 1] !== placeholder
                            ? []
                            : replaceHolders(args, placeholder);

                    length -= holders.length;
                    if (length < arity) {
                        return createRecurry(
                            func,
                            bitmask,
                            createHybrid,
                            wrapper.placeholder,
                            undefined$1,
                            args,
                            holders,
                            undefined$1,
                            undefined$1,
                            arity - length
                        );
                    }
                    var fn =
                        this && this !== root && this instanceof wrapper
                            ? Ctor
                            : func;
                    return apply(fn, this, args);
                }
                return wrapper;
            }

            /**
             * Creates a `_.find` or `_.findLast` function.
             *
             * @private
             * @param {Function} findIndexFunc The function to find the collection index.
             * @returns {Function} Returns the new find function.
             */
            function createFind(findIndexFunc) {
                return function (collection, predicate, fromIndex) {
                    var iterable = Object(collection);
                    if (!isArrayLike(collection)) {
                        var iteratee = getIteratee(predicate, 3);
                        collection = keys(collection);
                        predicate = function (key) {
                            return iteratee(iterable[key], key, iterable);
                        };
                    }
                    var index = findIndexFunc(collection, predicate, fromIndex);
                    return index > -1
                        ? iterable[iteratee ? collection[index] : index]
                        : undefined$1;
                };
            }

            /**
             * Creates a `_.flow` or `_.flowRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new flow function.
             */
            function createFlow(fromRight) {
                return flatRest(function (funcs) {
                    var length = funcs.length,
                        index = length,
                        prereq = LodashWrapper.prototype.thru;

                    if (fromRight) {
                        funcs.reverse();
                    }
                    while (index--) {
                        var func = funcs[index];
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        if (
                            prereq &&
                            !wrapper &&
                            getFuncName(func) == 'wrapper'
                        ) {
                            var wrapper = new LodashWrapper([], true);
                        }
                    }
                    index = wrapper ? index : length;
                    while (++index < length) {
                        func = funcs[index];

                        var funcName = getFuncName(func),
                            data =
                                funcName == 'wrapper'
                                    ? getData(func)
                                    : undefined$1;

                        if (
                            data &&
                            isLaziable(data[0]) &&
                            data[1] ==
                                (WRAP_ARY_FLAG |
                                    WRAP_CURRY_FLAG |
                                    WRAP_PARTIAL_FLAG |
                                    WRAP_REARG_FLAG) &&
                            !data[4].length &&
                            data[9] == 1
                        ) {
                            wrapper = wrapper[getFuncName(data[0])].apply(
                                wrapper,
                                data[3]
                            );
                        } else {
                            wrapper =
                                func.length == 1 && isLaziable(func)
                                    ? wrapper[funcName]()
                                    : wrapper.thru(func);
                        }
                    }
                    return function () {
                        var args = arguments,
                            value = args[0];

                        if (wrapper && args.length == 1 && isArray(value)) {
                            return wrapper.plant(value).value();
                        }
                        var index = 0,
                            result = length
                                ? funcs[index].apply(this, args)
                                : value;

                        while (++index < length) {
                            result = funcs[index].call(this, result);
                        }
                        return result;
                    };
                });
            }

            /**
             * Creates a function that wraps `func` to invoke it with optional `this`
             * binding of `thisArg`, partial application, and currying.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [partialsRight] The arguments to append to those provided
             *  to the new function.
             * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createHybrid(
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity
            ) {
                var isAry = bitmask & WRAP_ARY_FLAG,
                    isBind = bitmask & WRAP_BIND_FLAG,
                    isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                    isCurried =
                        bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                    isFlip = bitmask & WRAP_FLIP_FLAG,
                    Ctor = isBindKey ? undefined$1 : createCtor(func);

                function wrapper() {
                    var length = arguments.length,
                        args = Array(length),
                        index = length;

                    while (index--) {
                        args[index] = arguments[index];
                    }
                    if (isCurried) {
                        var placeholder = getHolder(wrapper),
                            holdersCount = countHolders(args, placeholder);
                    }
                    if (partials) {
                        args = composeArgs(args, partials, holders, isCurried);
                    }
                    if (partialsRight) {
                        args = composeArgsRight(
                            args,
                            partialsRight,
                            holdersRight,
                            isCurried
                        );
                    }
                    length -= holdersCount;
                    if (isCurried && length < arity) {
                        var newHolders = replaceHolders(args, placeholder);
                        return createRecurry(
                            func,
                            bitmask,
                            createHybrid,
                            wrapper.placeholder,
                            thisArg,
                            args,
                            newHolders,
                            argPos,
                            ary,
                            arity - length
                        );
                    }
                    var thisBinding = isBind ? thisArg : this,
                        fn = isBindKey ? thisBinding[func] : func;

                    length = args.length;
                    if (argPos) {
                        args = reorder(args, argPos);
                    } else if (isFlip && length > 1) {
                        args.reverse();
                    }
                    if (isAry && ary < length) {
                        args.length = ary;
                    }
                    if (this && this !== root && this instanceof wrapper) {
                        fn = Ctor || createCtor(fn);
                    }
                    return fn.apply(thisBinding, args);
                }
                return wrapper;
            }

            /**
             * Creates a function like `_.invertBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} toIteratee The function to resolve iteratees.
             * @returns {Function} Returns the new inverter function.
             */
            function createInverter(setter, toIteratee) {
                return function (object, iteratee) {
                    return baseInverter(
                        object,
                        setter,
                        toIteratee(iteratee),
                        {}
                    );
                };
            }

            /**
             * Creates a function that performs a mathematical operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @param {number} [defaultValue] The value used for `undefined` arguments.
             * @returns {Function} Returns the new mathematical operation function.
             */
            function createMathOperation(operator, defaultValue) {
                return function (value, other) {
                    var result;
                    if (value === undefined$1 && other === undefined$1) {
                        return defaultValue;
                    }
                    if (value !== undefined$1) {
                        result = value;
                    }
                    if (other !== undefined$1) {
                        if (result === undefined$1) {
                            return other;
                        }
                        if (
                            typeof value == 'string' ||
                            typeof other == 'string'
                        ) {
                            value = baseToString(value);
                            other = baseToString(other);
                        } else {
                            value = baseToNumber(value);
                            other = baseToNumber(other);
                        }
                        result = operator(value, other);
                    }
                    return result;
                };
            }

            /**
             * Creates a function like `_.over`.
             *
             * @private
             * @param {Function} arrayFunc The function to iterate over iteratees.
             * @returns {Function} Returns the new over function.
             */
            function createOver(arrayFunc) {
                return flatRest(function (iteratees) {
                    iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                    return baseRest(function (args) {
                        var thisArg = this;
                        return arrayFunc(iteratees, function (iteratee) {
                            return apply(iteratee, thisArg, args);
                        });
                    });
                });
            }

            /**
             * Creates the padding for `string` based on `length`. The `chars` string
             * is truncated if the number of characters exceeds `length`.
             *
             * @private
             * @param {number} length The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padding for `string`.
             */
            function createPadding(length, chars) {
                chars = chars === undefined$1 ? ' ' : baseToString(chars);

                var charsLength = chars.length;
                if (charsLength < 2) {
                    return charsLength ? baseRepeat(chars, length) : chars;
                }
                var result = baseRepeat(
                    chars,
                    nativeCeil(length / stringSize(chars))
                );
                return hasUnicode(chars)
                    ? castSlice(stringToArray(result), 0, length).join('')
                    : result.slice(0, length);
            }

            /**
             * Creates a function that wraps `func` to invoke it with the `this` binding
             * of `thisArg` and `partials` prepended to the arguments it receives.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {Array} partials The arguments to prepend to those provided to
             *  the new function.
             * @returns {Function} Returns the new wrapped function.
             */
            function createPartial(func, bitmask, thisArg, partials) {
                var isBind = bitmask & WRAP_BIND_FLAG,
                    Ctor = createCtor(func);

                function wrapper() {
                    var argsIndex = -1,
                        argsLength = arguments.length,
                        leftIndex = -1,
                        leftLength = partials.length,
                        args = Array(leftLength + argsLength),
                        fn =
                            this && this !== root && this instanceof wrapper
                                ? Ctor
                                : func;

                    while (++leftIndex < leftLength) {
                        args[leftIndex] = partials[leftIndex];
                    }
                    while (argsLength--) {
                        args[leftIndex++] = arguments[++argsIndex];
                    }
                    return apply(fn, isBind ? thisArg : this, args);
                }
                return wrapper;
            }

            /**
             * Creates a `_.range` or `_.rangeRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new range function.
             */
            function createRange(fromRight) {
                return function (start, end, step) {
                    if (
                        step &&
                        typeof step != 'number' &&
                        isIterateeCall(start, end, step)
                    ) {
                        end = step = undefined$1;
                    }
                    // Ensure the sign of `-0` is preserved.
                    start = toFinite(start);
                    if (end === undefined$1) {
                        end = start;
                        start = 0;
                    } else {
                        end = toFinite(end);
                    }
                    step =
                        step === undefined$1
                            ? start < end
                                ? 1
                                : -1
                            : toFinite(step);
                    return baseRange(start, end, step, fromRight);
                };
            }

            /**
             * Creates a function that performs a relational operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @returns {Function} Returns the new relational operation function.
             */
            function createRelationalOperation(operator) {
                return function (value, other) {
                    if (
                        !(typeof value == 'string' && typeof other == 'string')
                    ) {
                        value = toNumber(value);
                        other = toNumber(other);
                    }
                    return operator(value, other);
                };
            }

            /**
             * Creates a function that wraps `func` to continue currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {Function} wrapFunc The function to create the `func` wrapper.
             * @param {*} placeholder The placeholder value.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createRecurry(
                func,
                bitmask,
                wrapFunc,
                placeholder,
                thisArg,
                partials,
                holders,
                argPos,
                ary,
                arity
            ) {
                var isCurry = bitmask & WRAP_CURRY_FLAG,
                    newHolders = isCurry ? holders : undefined$1,
                    newHoldersRight = isCurry ? undefined$1 : holders,
                    newPartials = isCurry ? partials : undefined$1,
                    newPartialsRight = isCurry ? undefined$1 : partials;

                bitmask |= isCurry
                    ? WRAP_PARTIAL_FLAG
                    : WRAP_PARTIAL_RIGHT_FLAG;
                bitmask &= ~(isCurry
                    ? WRAP_PARTIAL_RIGHT_FLAG
                    : WRAP_PARTIAL_FLAG);

                if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                }
                var newData = [
                    func,
                    bitmask,
                    thisArg,
                    newPartials,
                    newHolders,
                    newPartialsRight,
                    newHoldersRight,
                    argPos,
                    ary,
                    arity,
                ];

                var result = wrapFunc.apply(undefined$1, newData);
                if (isLaziable(func)) {
                    setData(result, newData);
                }
                result.placeholder = placeholder;
                return setWrapToString(result, func, bitmask);
            }

            /**
             * Creates a function like `_.round`.
             *
             * @private
             * @param {string} methodName The name of the `Math` method to use when rounding.
             * @returns {Function} Returns the new round function.
             */
            function createRound(methodName) {
                var func = Math[methodName];
                return function (number, precision) {
                    number = toNumber(number);
                    precision =
                        precision == null
                            ? 0
                            : nativeMin(toInteger(precision), 292);
                    if (precision && nativeIsFinite(number)) {
                        // Shift with exponential notation to avoid floating-point issues.
                        // See [MDN](https://mdn.io/round#Examples) for more details.
                        var pair = (toString(number) + 'e').split('e'),
                            value = func(
                                pair[0] + 'e' + (+pair[1] + precision)
                            );

                        pair = (toString(value) + 'e').split('e');
                        return +(pair[0] + 'e' + (+pair[1] - precision));
                    }
                    return func(number);
                };
            }

            /**
             * Creates a set object of `values`.
             *
             * @private
             * @param {Array} values The values to add to the set.
             * @returns {Object} Returns the new set.
             */
            var createSet = !(
                Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY
            )
                ? noop
                : function (values) {
                      return new Set(values);
                  };

            /**
             * Creates a `_.toPairs` or `_.toPairsIn` function.
             *
             * @private
             * @param {Function} keysFunc The function to get the keys of a given object.
             * @returns {Function} Returns the new pairs function.
             */
            function createToPairs(keysFunc) {
                return function (object) {
                    var tag = getTag(object);
                    if (tag == mapTag) {
                        return mapToArray(object);
                    }
                    if (tag == setTag) {
                        return setToPairs(object);
                    }
                    return baseToPairs(object, keysFunc(object));
                };
            }

            /**
             * Creates a function that either curries or invokes `func` with optional
             * `this` binding and partially applied arguments.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags.
             *    1 - `_.bind`
             *    2 - `_.bindKey`
             *    4 - `_.curry` or `_.curryRight` of a bound function
             *    8 - `_.curry`
             *   16 - `_.curryRight`
             *   32 - `_.partial`
             *   64 - `_.partialRight`
             *  128 - `_.rearg`
             *  256 - `_.ary`
             *  512 - `_.flip`
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to be partially applied.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createWrap(
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                argPos,
                ary,
                arity
            ) {
                var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                if (!isBindKey && typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                var length = partials ? partials.length : 0;
                if (!length) {
                    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                    partials = holders = undefined$1;
                }
                ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
                arity = arity === undefined$1 ? arity : toInteger(arity);
                length -= holders ? holders.length : 0;

                if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                    var partialsRight = partials,
                        holdersRight = holders;

                    partials = holders = undefined$1;
                }
                var data = isBindKey ? undefined$1 : getData(func);

                var newData = [
                    func,
                    bitmask,
                    thisArg,
                    partials,
                    holders,
                    partialsRight,
                    holdersRight,
                    argPos,
                    ary,
                    arity,
                ];

                if (data) {
                    mergeData(newData, data);
                }
                func = newData[0];
                bitmask = newData[1];
                thisArg = newData[2];
                partials = newData[3];
                holders = newData[4];
                arity = newData[9] =
                    newData[9] === undefined$1
                        ? isBindKey
                            ? 0
                            : func.length
                        : nativeMax(newData[9] - length, 0);

                if (
                    !arity &&
                    bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)
                ) {
                    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                }
                if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                    var result = createBind(func, bitmask, thisArg);
                } else if (
                    bitmask == WRAP_CURRY_FLAG ||
                    bitmask == WRAP_CURRY_RIGHT_FLAG
                ) {
                    result = createCurry(func, bitmask, arity);
                } else if (
                    (bitmask == WRAP_PARTIAL_FLAG ||
                        bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
                    !holders.length
                ) {
                    result = createPartial(func, bitmask, thisArg, partials);
                } else {
                    result = createHybrid.apply(undefined$1, newData);
                }
                var setter = data ? baseSetData : setData;
                return setWrapToString(setter(result, newData), func, bitmask);
            }

            /**
             * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
             * of source objects to the destination object for all destination properties
             * that resolve to `undefined`.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to assign.
             * @param {Object} object The parent object of `objValue`.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsAssignIn(objValue, srcValue, key, object) {
                if (
                    objValue === undefined$1 ||
                    (eq(objValue, objectProto[key]) &&
                        !hasOwnProperty.call(object, key))
                ) {
                    return srcValue;
                }
                return objValue;
            }

            /**
             * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
             * objects into destination objects that are passed thru.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to merge.
             * @param {Object} object The parent object of `objValue`.
             * @param {Object} source The parent object of `srcValue`.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsMerge(
                objValue,
                srcValue,
                key,
                object,
                source,
                stack
            ) {
                if (isObject(objValue) && isObject(srcValue)) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, objValue);
                    baseMerge(
                        objValue,
                        srcValue,
                        undefined$1,
                        customDefaultsMerge,
                        stack
                    );
                    stack['delete'](srcValue);
                }
                return objValue;
            }

            /**
             * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
             * objects.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {string} key The key of the property to inspect.
             * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
             */
            function customOmitClone(value) {
                return isPlainObject(value) ? undefined$1 : value;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for arrays with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Array} array The array to compare.
             * @param {Array} other The other array to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `array` and `other` objects.
             * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
             */
            function equalArrays(
                array,
                other,
                bitmask,
                customizer,
                equalFunc,
                stack
            ) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    arrLength = array.length,
                    othLength = other.length;

                if (
                    arrLength != othLength &&
                    !(isPartial && othLength > arrLength)
                ) {
                    return false;
                }
                // Check that cyclic values are equal.
                var arrStacked = stack.get(array);
                var othStacked = stack.get(other);
                if (arrStacked && othStacked) {
                    return arrStacked == other && othStacked == array;
                }
                var index = -1,
                    result = true,
                    seen =
                        bitmask & COMPARE_UNORDERED_FLAG
                            ? new SetCache()
                            : undefined$1;

                stack.set(array, other);
                stack.set(other, array);

                // Ignore non-index properties.
                while (++index < arrLength) {
                    var arrValue = array[index],
                        othValue = other[index];

                    if (customizer) {
                        var compared = isPartial
                            ? customizer(
                                  othValue,
                                  arrValue,
                                  index,
                                  other,
                                  array,
                                  stack
                              )
                            : customizer(
                                  arrValue,
                                  othValue,
                                  index,
                                  array,
                                  other,
                                  stack
                              );
                    }
                    if (compared !== undefined$1) {
                        if (compared) {
                            continue;
                        }
                        result = false;
                        break;
                    }
                    // Recursively compare arrays (susceptible to call stack limits).
                    if (seen) {
                        if (
                            !arraySome(other, function (othValue, othIndex) {
                                if (
                                    !cacheHas(seen, othIndex) &&
                                    (arrValue === othValue ||
                                        equalFunc(
                                            arrValue,
                                            othValue,
                                            bitmask,
                                            customizer,
                                            stack
                                        ))
                                ) {
                                    return seen.push(othIndex);
                                }
                            })
                        ) {
                            result = false;
                            break;
                        }
                    } else if (
                        !(
                            arrValue === othValue ||
                            equalFunc(
                                arrValue,
                                othValue,
                                bitmask,
                                customizer,
                                stack
                            )
                        )
                    ) {
                        result = false;
                        break;
                    }
                }
                stack['delete'](array);
                stack['delete'](other);
                return result;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for comparing objects of
             * the same `toStringTag`.
             *
             * **Note:** This function only supports comparing values with tags of
             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {string} tag The `toStringTag` of the objects to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalByTag(
                object,
                other,
                tag,
                bitmask,
                customizer,
                equalFunc,
                stack
            ) {
                switch (tag) {
                    case dataViewTag:
                        if (
                            object.byteLength != other.byteLength ||
                            object.byteOffset != other.byteOffset
                        ) {
                            return false;
                        }
                        object = object.buffer;
                        other = other.buffer;

                    case arrayBufferTag:
                        if (
                            object.byteLength != other.byteLength ||
                            !equalFunc(
                                new Uint8Array(object),
                                new Uint8Array(other)
                            )
                        ) {
                            return false;
                        }
                        return true;

                    case boolTag:
                    case dateTag:
                    case numberTag:
                        // Coerce booleans to `1` or `0` and dates to milliseconds.
                        // Invalid dates are coerced to `NaN`.
                        return eq(+object, +other);

                    case errorTag:
                        return (
                            object.name == other.name &&
                            object.message == other.message
                        );

                    case regexpTag:
                    case stringTag:
                        // Coerce regexes to strings and treat strings, primitives and objects,
                        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                        // for more details.
                        return object == other + '';

                    case mapTag:
                        var convert = mapToArray;

                    case setTag:
                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                        convert || (convert = setToArray);

                        if (object.size != other.size && !isPartial) {
                            return false;
                        }
                        // Assume cyclic values are equal.
                        var stacked = stack.get(object);
                        if (stacked) {
                            return stacked == other;
                        }
                        bitmask |= COMPARE_UNORDERED_FLAG;

                        // Recursively compare objects (susceptible to call stack limits).
                        stack.set(object, other);
                        var result = equalArrays(
                            convert(object),
                            convert(other),
                            bitmask,
                            customizer,
                            equalFunc,
                            stack
                        );
                        stack['delete'](object);
                        return result;

                    case symbolTag:
                        if (symbolValueOf) {
                            return (
                                symbolValueOf.call(object) ==
                                symbolValueOf.call(other)
                            );
                        }
                }
                return false;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for objects with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalObjects(
                object,
                other,
                bitmask,
                customizer,
                equalFunc,
                stack
            ) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    objProps = getAllKeys(object),
                    objLength = objProps.length,
                    othProps = getAllKeys(other),
                    othLength = othProps.length;

                if (objLength != othLength && !isPartial) {
                    return false;
                }
                var index = objLength;
                while (index--) {
                    var key = objProps[index];
                    if (
                        !(isPartial
                            ? key in other
                            : hasOwnProperty.call(other, key))
                    ) {
                        return false;
                    }
                }
                // Check that cyclic values are equal.
                var objStacked = stack.get(object);
                var othStacked = stack.get(other);
                if (objStacked && othStacked) {
                    return objStacked == other && othStacked == object;
                }
                var result = true;
                stack.set(object, other);
                stack.set(other, object);

                var skipCtor = isPartial;
                while (++index < objLength) {
                    key = objProps[index];
                    var objValue = object[key],
                        othValue = other[key];

                    if (customizer) {
                        var compared = isPartial
                            ? customizer(
                                  othValue,
                                  objValue,
                                  key,
                                  other,
                                  object,
                                  stack
                              )
                            : customizer(
                                  objValue,
                                  othValue,
                                  key,
                                  object,
                                  other,
                                  stack
                              );
                    }
                    // Recursively compare objects (susceptible to call stack limits).
                    if (
                        !(compared === undefined$1
                            ? objValue === othValue ||
                              equalFunc(
                                  objValue,
                                  othValue,
                                  bitmask,
                                  customizer,
                                  stack
                              )
                            : compared)
                    ) {
                        result = false;
                        break;
                    }
                    skipCtor || (skipCtor = key == 'constructor');
                }
                if (result && !skipCtor) {
                    var objCtor = object.constructor,
                        othCtor = other.constructor;

                    // Non `Object` object instances with different constructors are not equal.
                    if (
                        objCtor != othCtor &&
                        'constructor' in object &&
                        'constructor' in other &&
                        !(
                            typeof objCtor == 'function' &&
                            objCtor instanceof objCtor &&
                            typeof othCtor == 'function' &&
                            othCtor instanceof othCtor
                        )
                    ) {
                        result = false;
                    }
                }
                stack['delete'](object);
                stack['delete'](other);
                return result;
            }

            /**
             * A specialized version of `baseRest` which flattens the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            function flatRest(func) {
                return setToString(
                    overRest(func, undefined$1, flatten),
                    func + ''
                );
            }

            /**
             * Creates an array of own enumerable property names and symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeys(object) {
                return baseGetAllKeys(object, keys, getSymbols);
            }

            /**
             * Creates an array of own and inherited enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeysIn(object) {
                return baseGetAllKeys(object, keysIn, getSymbolsIn);
            }

            /**
             * Gets metadata for `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {*} Returns the metadata for `func`.
             */
            var getData = !metaMap
                ? noop
                : function (func) {
                      return metaMap.get(func);
                  };

            /**
             * Gets the name of `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {string} Returns the function name.
             */
            function getFuncName(func) {
                var result = func.name + '',
                    array = realNames[result],
                    length = hasOwnProperty.call(realNames, result)
                        ? array.length
                        : 0;

                while (length--) {
                    var data = array[length],
                        otherFunc = data.func;
                    if (otherFunc == null || otherFunc == func) {
                        return data.name;
                    }
                }
                return result;
            }

            /**
             * Gets the argument placeholder value for `func`.
             *
             * @private
             * @param {Function} func The function to inspect.
             * @returns {*} Returns the placeholder value.
             */
            function getHolder(func) {
                var object = hasOwnProperty.call(lodash, 'placeholder')
                    ? lodash
                    : func;
                return object.placeholder;
            }

            /**
             * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
             * this function returns the custom method, otherwise it returns `baseIteratee`.
             * If arguments are provided, the chosen function is invoked with them and
             * its result is returned.
             *
             * @private
             * @param {*} [value] The value to convert to an iteratee.
             * @param {number} [arity] The arity of the created iteratee.
             * @returns {Function} Returns the chosen function or its result.
             */
            function getIteratee() {
                var result = lodash.iteratee || iteratee;
                result = result === iteratee ? baseIteratee : result;
                return arguments.length
                    ? result(arguments[0], arguments[1])
                    : result;
            }

            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */
            function getMapData(map, key) {
                var data = map.__data__;
                return isKeyable(key)
                    ? data[typeof key == 'string' ? 'string' : 'hash']
                    : data.map;
            }

            /**
             * Gets the property names, values, and compare flags of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the match data of `object`.
             */
            function getMatchData(object) {
                var result = keys(object),
                    length = result.length;

                while (length--) {
                    var key = result[length],
                        value = object[key];

                    result[length] = [key, value, isStrictComparable(value)];
                }
                return result;
            }

            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */
            function getNative(object, key) {
                var value = getValue(object, key);
                return baseIsNative(value) ? value : undefined$1;
            }

            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */
            function getRawTag(value) {
                var isOwn = hasOwnProperty.call(value, symToStringTag),
                    tag = value[symToStringTag];

                try {
                    value[symToStringTag] = undefined$1;
                    var unmasked = true;
                } catch (e) {}

                var result = nativeObjectToString.call(value);
                if (unmasked) {
                    if (isOwn) {
                        value[symToStringTag] = tag;
                    } else {
                        delete value[symToStringTag];
                    }
                }
                return result;
            }

            /**
             * Creates an array of the own enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbols = !nativeGetSymbols
                ? stubArray
                : function (object) {
                      if (object == null) {
                          return [];
                      }
                      object = Object(object);
                      return arrayFilter(
                          nativeGetSymbols(object),
                          function (symbol) {
                              return propertyIsEnumerable.call(object, symbol);
                          }
                      );
                  };

            /**
             * Creates an array of the own and inherited enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbolsIn = !nativeGetSymbols
                ? stubArray
                : function (object) {
                      var result = [];
                      while (object) {
                          arrayPush(result, getSymbols(object));
                          object = getPrototype(object);
                      }
                      return result;
                  };

            /**
             * Gets the `toStringTag` of `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            var getTag = baseGetTag;

            // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
            if (
                (DataView &&
                    getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                (Map && getTag(new Map()) != mapTag) ||
                (Promise && getTag(Promise.resolve()) != promiseTag) ||
                (Set && getTag(new Set()) != setTag) ||
                (WeakMap && getTag(new WeakMap()) != weakMapTag)
            ) {
                getTag = function (value) {
                    var result = baseGetTag(value),
                        Ctor =
                            result == objectTag
                                ? value.constructor
                                : undefined$1,
                        ctorString = Ctor ? toSource(Ctor) : '';

                    if (ctorString) {
                        switch (ctorString) {
                            case dataViewCtorString:
                                return dataViewTag;
                            case mapCtorString:
                                return mapTag;
                            case promiseCtorString:
                                return promiseTag;
                            case setCtorString:
                                return setTag;
                            case weakMapCtorString:
                                return weakMapTag;
                        }
                    }
                    return result;
                };
            }

            /**
             * Gets the view, applying any `transforms` to the `start` and `end` positions.
             *
             * @private
             * @param {number} start The start of the view.
             * @param {number} end The end of the view.
             * @param {Array} transforms The transformations to apply to the view.
             * @returns {Object} Returns an object containing the `start` and `end`
             *  positions of the view.
             */
            function getView(start, end, transforms) {
                var index = -1,
                    length = transforms.length;

                while (++index < length) {
                    var data = transforms[index],
                        size = data.size;

                    switch (data.type) {
                        case 'drop':
                            start += size;
                            break;
                        case 'dropRight':
                            end -= size;
                            break;
                        case 'take':
                            end = nativeMin(end, start + size);
                            break;
                        case 'takeRight':
                            start = nativeMax(start, end - size);
                            break;
                    }
                }
                return { start: start, end: end };
            }

            /**
             * Extracts wrapper details from the `source` body comment.
             *
             * @private
             * @param {string} source The source to inspect.
             * @returns {Array} Returns the wrapper details.
             */
            function getWrapDetails(source) {
                var match = source.match(reWrapDetails);
                return match ? match[1].split(reSplitDetails) : [];
            }

            /**
             * Checks if `path` exists on `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @param {Function} hasFunc The function to check properties.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             */
            function hasPath(object, path, hasFunc) {
                path = castPath(path, object);

                var index = -1,
                    length = path.length,
                    result = false;

                while (++index < length) {
                    var key = toKey(path[index]);
                    if (!(result = object != null && hasFunc(object, key))) {
                        break;
                    }
                    object = object[key];
                }
                if (result || ++index != length) {
                    return result;
                }
                length = object == null ? 0 : object.length;
                return (
                    !!length &&
                    isLength(length) &&
                    isIndex(key, length) &&
                    (isArray(object) || isArguments(object))
                );
            }

            /**
             * Initializes an array clone.
             *
             * @private
             * @param {Array} array The array to clone.
             * @returns {Array} Returns the initialized clone.
             */
            function initCloneArray(array) {
                var length = array.length,
                    result = new array.constructor(length);

                // Add properties assigned by `RegExp#exec`.
                if (
                    length &&
                    typeof array[0] == 'string' &&
                    hasOwnProperty.call(array, 'index')
                ) {
                    result.index = array.index;
                    result.input = array.input;
                }
                return result;
            }

            /**
             * Initializes an object clone.
             *
             * @private
             * @param {Object} object The object to clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneObject(object) {
                return typeof object.constructor == 'function' &&
                    !isPrototype(object)
                    ? baseCreate(getPrototype(object))
                    : {};
            }

            /**
             * Initializes an object clone based on its `toStringTag`.
             *
             * **Note:** This function only supports cloning values with tags of
             * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
             *
             * @private
             * @param {Object} object The object to clone.
             * @param {string} tag The `toStringTag` of the object to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneByTag(object, tag, isDeep) {
                var Ctor = object.constructor;
                switch (tag) {
                    case arrayBufferTag:
                        return cloneArrayBuffer(object);

                    case boolTag:
                    case dateTag:
                        return new Ctor(+object);

                    case dataViewTag:
                        return cloneDataView(object, isDeep);

                    case float32Tag:
                    case float64Tag:
                    case int8Tag:
                    case int16Tag:
                    case int32Tag:
                    case uint8Tag:
                    case uint8ClampedTag:
                    case uint16Tag:
                    case uint32Tag:
                        return cloneTypedArray(object, isDeep);

                    case mapTag:
                        return new Ctor();

                    case numberTag:
                    case stringTag:
                        return new Ctor(object);

                    case regexpTag:
                        return cloneRegExp(object);

                    case setTag:
                        return new Ctor();

                    case symbolTag:
                        return cloneSymbol(object);
                }
            }

            /**
             * Inserts wrapper `details` in a comment at the top of the `source` body.
             *
             * @private
             * @param {string} source The source to modify.
             * @returns {Array} details The details to insert.
             * @returns {string} Returns the modified source.
             */
            function insertWrapDetails(source, details) {
                var length = details.length;
                if (!length) {
                    return source;
                }
                var lastIndex = length - 1;
                details[lastIndex] =
                    (length > 1 ? '& ' : '') + details[lastIndex];
                details = details.join(length > 2 ? ', ' : ' ');
                return source.replace(
                    reWrapComment,
                    '{\n/* [wrapped with ' + details + '] */\n'
                );
            }

            /**
             * Checks if `value` is a flattenable `arguments` object or array.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
             */
            function isFlattenable(value) {
                return (
                    isArray(value) ||
                    isArguments(value) ||
                    !!(spreadableSymbol && value && value[spreadableSymbol])
                );
            }

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex(value, length) {
                var type = typeof value;
                length = length == null ? MAX_SAFE_INTEGER : length;

                return (
                    !!length &&
                    (type == 'number' ||
                        (type != 'symbol' && reIsUint.test(value))) &&
                    value > -1 &&
                    value % 1 == 0 &&
                    value < length
                );
            }

            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall(value, index, object) {
                if (!isObject(object)) {
                    return false;
                }
                var type = typeof index;
                if (
                    type == 'number'
                        ? isArrayLike(object) && isIndex(index, object.length)
                        : type == 'string' && index in object
                ) {
                    return eq(object[index], value);
                }
                return false;
            }

            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */
            function isKey(value, object) {
                if (isArray(value)) {
                    return false;
                }
                var type = typeof value;
                if (
                    type == 'number' ||
                    type == 'symbol' ||
                    type == 'boolean' ||
                    value == null ||
                    isSymbol(value)
                ) {
                    return true;
                }
                return (
                    reIsPlainProp.test(value) ||
                    !reIsDeepProp.test(value) ||
                    (object != null && value in Object(object))
                );
            }

            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
                var type = typeof value;
                return type == 'string' ||
                    type == 'number' ||
                    type == 'symbol' ||
                    type == 'boolean'
                    ? value !== '__proto__'
                    : value === null;
            }

            /**
             * Checks if `func` has a lazy counterpart.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
             *  else `false`.
             */
            function isLaziable(func) {
                var funcName = getFuncName(func),
                    other = lodash[funcName];

                if (
                    typeof other != 'function' ||
                    !(funcName in LazyWrapper.prototype)
                ) {
                    return false;
                }
                if (func === other) {
                    return true;
                }
                var data = getData(other);
                return !!data && func === data[0];
            }

            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */
            function isMasked(func) {
                return !!maskSrcKey && maskSrcKey in func;
            }

            /**
             * Checks if `func` is capable of being masked.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
             */
            var isMaskable = coreJsData ? isFunction : stubFalse;

            /**
             * Checks if `value` is likely a prototype object.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
             */
            function isPrototype(value) {
                var Ctor = value && value.constructor,
                    proto =
                        (typeof Ctor == 'function' && Ctor.prototype) ||
                        objectProto;

                return value === proto;
            }

            /**
             * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` if suitable for strict
             *  equality comparisons, else `false`.
             */
            function isStrictComparable(value) {
                return value === value && !isObject(value);
            }

            /**
             * A specialized version of `matchesProperty` for source values suitable
             * for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function matchesStrictComparable(key, srcValue) {
                return function (object) {
                    if (object == null) {
                        return false;
                    }
                    return (
                        object[key] === srcValue &&
                        (srcValue !== undefined$1 || key in Object(object))
                    );
                };
            }

            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */
            function memoizeCapped(func) {
                var result = memoize(func, function (key) {
                    if (cache.size === MAX_MEMOIZE_SIZE) {
                        cache.clear();
                    }
                    return key;
                });

                var cache = result.cache;
                return result;
            }

            /**
             * Merges the function metadata of `source` into `data`.
             *
             * Merging metadata reduces the number of wrappers used to invoke a function.
             * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
             * may be applied regardless of execution order. Methods like `_.ary` and
             * `_.rearg` modify function arguments, making the order in which they are
             * executed important, preventing the merging of metadata. However, we make
             * an exception for a safe combined case where curried functions have `_.ary`
             * and or `_.rearg` applied.
             *
             * @private
             * @param {Array} data The destination metadata.
             * @param {Array} source The source metadata.
             * @returns {Array} Returns `data`.
             */
            function mergeData(data, source) {
                var bitmask = data[1],
                    srcBitmask = source[1],
                    newBitmask = bitmask | srcBitmask,
                    isCommon =
                        newBitmask <
                        (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

                var isCombo =
                    (srcBitmask == WRAP_ARY_FLAG &&
                        bitmask == WRAP_CURRY_FLAG) ||
                    (srcBitmask == WRAP_ARY_FLAG &&
                        bitmask == WRAP_REARG_FLAG &&
                        data[7].length <= source[8]) ||
                    (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
                        source[7].length <= source[8] &&
                        bitmask == WRAP_CURRY_FLAG);

                // Exit early if metadata can't be merged.
                if (!(isCommon || isCombo)) {
                    return data;
                }
                // Use source `thisArg` if available.
                if (srcBitmask & WRAP_BIND_FLAG) {
                    data[2] = source[2];
                    // Set when currying a bound function.
                    newBitmask |=
                        bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                }
                // Compose partial arguments.
                var value = source[3];
                if (value) {
                    var partials = data[3];
                    data[3] = partials
                        ? composeArgs(partials, value, source[4])
                        : value;
                    data[4] = partials
                        ? replaceHolders(data[3], PLACEHOLDER)
                        : source[4];
                }
                // Compose partial right arguments.
                value = source[5];
                if (value) {
                    partials = data[5];
                    data[5] = partials
                        ? composeArgsRight(partials, value, source[6])
                        : value;
                    data[6] = partials
                        ? replaceHolders(data[5], PLACEHOLDER)
                        : source[6];
                }
                // Use source `argPos` if available.
                value = source[7];
                if (value) {
                    data[7] = value;
                }
                // Use source `ary` if it's smaller.
                if (srcBitmask & WRAP_ARY_FLAG) {
                    data[8] =
                        data[8] == null
                            ? source[8]
                            : nativeMin(data[8], source[8]);
                }
                // Use source `arity` if one is not provided.
                if (data[9] == null) {
                    data[9] = source[9];
                }
                // Use source `func` and merge bitmasks.
                data[0] = source[0];
                data[1] = newBitmask;

                return data;
            }

            /**
             * This function is like
             * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * except that it includes inherited enumerable properties.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function nativeKeysIn(object) {
                var result = [];
                if (object != null) {
                    for (var key in Object(object)) {
                        result.push(key);
                    }
                }
                return result;
            }

            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */
            function objectToString(value) {
                return nativeObjectToString.call(value);
            }

            /**
             * A specialized version of `baseRest` which transforms the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @param {Function} transform The rest array transform.
             * @returns {Function} Returns the new function.
             */
            function overRest(func, start, transform) {
                start = nativeMax(
                    start === undefined$1 ? func.length - 1 : start,
                    0
                );
                return function () {
                    var args = arguments,
                        index = -1,
                        length = nativeMax(args.length - start, 0),
                        array = Array(length);

                    while (++index < length) {
                        array[index] = args[start + index];
                    }
                    index = -1;
                    var otherArgs = Array(start + 1);
                    while (++index < start) {
                        otherArgs[index] = args[index];
                    }
                    otherArgs[start] = transform(array);
                    return apply(func, this, otherArgs);
                };
            }

            /**
             * Gets the parent value at `path` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array} path The path to get the parent value of.
             * @returns {*} Returns the parent value.
             */
            function parent(object, path) {
                return path.length < 2
                    ? object
                    : baseGet(object, baseSlice(path, 0, -1));
            }

            /**
             * Reorder `array` according to the specified indexes where the element at
             * the first index is assigned as the first element, the element at
             * the second index is assigned as the second element, and so on.
             *
             * @private
             * @param {Array} array The array to reorder.
             * @param {Array} indexes The arranged array indexes.
             * @returns {Array} Returns `array`.
             */
            function reorder(array, indexes) {
                var arrLength = array.length,
                    length = nativeMin(indexes.length, arrLength),
                    oldArray = copyArray(array);

                while (length--) {
                    var index = indexes[length];
                    array[length] = isIndex(index, arrLength)
                        ? oldArray[index]
                        : undefined$1;
                }
                return array;
            }

            /**
             * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function safeGet(object, key) {
                if (
                    key === 'constructor' &&
                    typeof object[key] === 'function'
                ) {
                    return;
                }

                if (key == '__proto__') {
                    return;
                }

                return object[key];
            }

            /**
             * Sets metadata for `func`.
             *
             * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
             * period of time, it will trip its breaker and transition to an identity
             * function to avoid garbage collection pauses in V8. See
             * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
             * for more details.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var setData = shortOut(baseSetData);

            /**
             * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            var setTimeout =
                ctxSetTimeout ||
                function (func, wait) {
                    return root.setTimeout(func, wait);
                };

            /**
             * Sets the `toString` method of `func` to return `string`.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var setToString = shortOut(baseSetToString);

            /**
             * Sets the `toString` method of `wrapper` to mimic the source of `reference`
             * with wrapper details in a comment at the top of the source body.
             *
             * @private
             * @param {Function} wrapper The function to modify.
             * @param {Function} reference The reference function.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Function} Returns `wrapper`.
             */
            function setWrapToString(wrapper, reference, bitmask) {
                var source = reference + '';
                return setToString(
                    wrapper,
                    insertWrapDetails(
                        source,
                        updateWrapDetails(getWrapDetails(source), bitmask)
                    )
                );
            }

            /**
             * Creates a function that'll short out and invoke `identity` instead
             * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
             * milliseconds.
             *
             * @private
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new shortable function.
             */
            function shortOut(func) {
                var count = 0,
                    lastCalled = 0;

                return function () {
                    var stamp = nativeNow(),
                        remaining = HOT_SPAN - (stamp - lastCalled);

                    lastCalled = stamp;
                    if (remaining > 0) {
                        if (++count >= HOT_COUNT) {
                            return arguments[0];
                        }
                    } else {
                        count = 0;
                    }
                    return func.apply(undefined$1, arguments);
                };
            }

            /**
             * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @param {number} [size=array.length] The size of `array`.
             * @returns {Array} Returns `array`.
             */
            function shuffleSelf(array, size) {
                var index = -1,
                    length = array.length,
                    lastIndex = length - 1;

                size = size === undefined$1 ? length : size;
                while (++index < size) {
                    var rand = baseRandom(index, lastIndex),
                        value = array[rand];

                    array[rand] = array[index];
                    array[index] = value;
                }
                array.length = size;
                return array;
            }

            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */
            var stringToPath = memoizeCapped(function (string) {
                var result = [];
                if (string.charCodeAt(0) === 46 /* . */) {
                    result.push('');
                }
                string.replace(
                    rePropName,
                    function (match, number, quote, subString) {
                        result.push(
                            quote
                                ? subString.replace(reEscapeChar, '$1')
                                : number || match
                        );
                    }
                );
                return result;
            });

            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */
            function toKey(value) {
                if (typeof value == 'string' || isSymbol(value)) {
                    return value;
                }
                var result = value + '';
                return result == '0' && 1 / value == -INFINITY ? '-0' : result;
            }

            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */
            function toSource(func) {
                if (func != null) {
                    try {
                        return funcToString.call(func);
                    } catch (e) {}
                    try {
                        return func + '';
                    } catch (e) {}
                }
                return '';
            }

            /**
             * Updates wrapper `details` based on `bitmask` flags.
             *
             * @private
             * @returns {Array} details The details to modify.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Array} Returns `details`.
             */
            function updateWrapDetails(details, bitmask) {
                arrayEach(wrapFlags, function (pair) {
                    var value = '_.' + pair[0];
                    if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                        details.push(value);
                    }
                });
                return details.sort();
            }

            /**
             * Creates a clone of `wrapper`.
             *
             * @private
             * @param {Object} wrapper The wrapper to clone.
             * @returns {Object} Returns the cloned wrapper.
             */
            function wrapperClone(wrapper) {
                if (wrapper instanceof LazyWrapper) {
                    return wrapper.clone();
                }
                var result = new LodashWrapper(
                    wrapper.__wrapped__,
                    wrapper.__chain__
                );
                result.__actions__ = copyArray(wrapper.__actions__);
                result.__index__ = wrapper.__index__;
                result.__values__ = wrapper.__values__;
                return result;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of elements split into groups the length of `size`.
             * If `array` can't be split evenly, the final chunk will be the remaining
             * elements.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to process.
             * @param {number} [size=1] The length of each chunk
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the new array of chunks.
             * @example
             *
             * _.chunk(['a', 'b', 'c', 'd'], 2);
             * // => [['a', 'b'], ['c', 'd']]
             *
             * _.chunk(['a', 'b', 'c', 'd'], 3);
             * // => [['a', 'b', 'c'], ['d']]
             */
            function chunk(array, size, guard) {
                if (
                    guard
                        ? isIterateeCall(array, size, guard)
                        : size === undefined$1
                ) {
                    size = 1;
                } else {
                    size = nativeMax(toInteger(size), 0);
                }
                var length = array == null ? 0 : array.length;
                if (!length || size < 1) {
                    return [];
                }
                var index = 0,
                    resIndex = 0,
                    result = Array(nativeCeil(length / size));

                while (index < length) {
                    result[resIndex++] = baseSlice(
                        array,
                        index,
                        (index += size)
                    );
                }
                return result;
            }

            /**
             * Creates an array with all falsey values removed. The values `false`, `null`,
             * `0`, `""`, `undefined`, and `NaN` are falsey.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to compact.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.compact([0, 1, false, 2, '', 3]);
             * // => [1, 2, 3]
             */
            function compact(array) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    resIndex = 0,
                    result = [];

                while (++index < length) {
                    var value = array[index];
                    if (value) {
                        result[resIndex++] = value;
                    }
                }
                return result;
            }

            /**
             * Creates a new array concatenating `array` with any additional arrays
             * and/or values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to concatenate.
             * @param {...*} [values] The values to concatenate.
             * @returns {Array} Returns the new concatenated array.
             * @example
             *
             * var array = [1];
             * var other = _.concat(array, 2, [3], [[4]]);
             *
             * console.log(other);
             * // => [1, 2, 3, [4]]
             *
             * console.log(array);
             * // => [1]
             */
            function concat() {
                var length = arguments.length;
                if (!length) {
                    return [];
                }
                var args = Array(length - 1),
                    array = arguments[0],
                    index = length;

                while (index--) {
                    args[index - 1] = arguments[index];
                }
                return arrayPush(
                    isArray(array) ? copyArray(array) : [array],
                    baseFlatten(args, 1)
                );
            }

            /**
             * Creates an array of `array` values not included in the other given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * **Note:** Unlike `_.pullAll`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.without, _.xor
             * @example
             *
             * _.difference([2, 1], [2, 3]);
             * // => [1]
             */
            var difference = baseRest(function (array, values) {
                return isArrayLikeObject(array)
                    ? baseDifference(
                          array,
                          baseFlatten(values, 1, isArrayLikeObject, true)
                      )
                    : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `iteratee` which
             * is invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var differenceBy = baseRest(function (array, values) {
                var iteratee = last(values);
                if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined$1;
                }
                return isArrayLikeObject(array)
                    ? baseDifference(
                          array,
                          baseFlatten(values, 1, isArrayLikeObject, true),
                          getIteratee(iteratee, 2)
                      )
                    : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `comparator`
             * which is invoked to compare elements of `array` to `values`. The order and
             * references of result values are determined by the first array. The comparator
             * is invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             *
             * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }]
             */
            var differenceWith = baseRest(function (array, values) {
                var comparator = last(values);
                if (isArrayLikeObject(comparator)) {
                    comparator = undefined$1;
                }
                return isArrayLikeObject(array)
                    ? baseDifference(
                          array,
                          baseFlatten(values, 1, isArrayLikeObject, true),
                          undefined$1,
                          comparator
                      )
                    : [];
            });

            /**
             * Creates a slice of `array` with `n` elements dropped from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.drop([1, 2, 3]);
             * // => [2, 3]
             *
             * _.drop([1, 2, 3], 2);
             * // => [3]
             *
             * _.drop([1, 2, 3], 5);
             * // => []
             *
             * _.drop([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function drop(array, n, guard) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                n = guard || n === undefined$1 ? 1 : toInteger(n);
                return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with `n` elements dropped from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.dropRight([1, 2, 3]);
             * // => [1, 2]
             *
             * _.dropRight([1, 2, 3], 2);
             * // => [1]
             *
             * _.dropRight([1, 2, 3], 5);
             * // => []
             *
             * _.dropRight([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function dropRight(array, n, guard) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                n = guard || n === undefined$1 ? 1 : toInteger(n);
                n = length - n;
                return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the end.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.dropRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropRightWhile(users, ['active', false]);
             * // => objects for ['barney']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropRightWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropRightWhile(array, predicate) {
                return array && array.length
                    ? baseWhile(array, getIteratee(predicate, 3), true, true)
                    : [];
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the beginning.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.dropWhile(users, function(o) { return !o.active; });
             * // => objects for ['pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropWhile(users, ['active', false]);
             * // => objects for ['pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropWhile(array, predicate) {
                return array && array.length
                    ? baseWhile(array, getIteratee(predicate, 3), true)
                    : [];
            }

            /**
             * Fills elements of `array` with `value` from `start` up to, but not
             * including, `end`.
             *
             * **Note:** This method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Array
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.fill(array, 'a');
             * console.log(array);
             * // => ['a', 'a', 'a']
             *
             * _.fill(Array(3), 2);
             * // => [2, 2, 2]
             *
             * _.fill([4, 6, 8, 10], '*', 1, 3);
             * // => [4, '*', '*', 10]
             */
            function fill(array, value, start, end) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                if (
                    start &&
                    typeof start != 'number' &&
                    isIterateeCall(array, value, start)
                ) {
                    start = 0;
                    end = length;
                }
                return baseFill(array, value, start, end);
            }

            /**
             * This method is like `_.find` except that it returns the index of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.findIndex(users, function(o) { return o.user == 'barney'; });
             * // => 0
             *
             * // The `_.matches` iteratee shorthand.
             * _.findIndex(users, { 'user': 'fred', 'active': false });
             * // => 1
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findIndex(users, ['active', false]);
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.findIndex(users, 'active');
             * // => 2
             */
            function findIndex(array, predicate, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return -1;
                }
                var index = fromIndex == null ? 0 : toInteger(fromIndex);
                if (index < 0) {
                    index = nativeMax(length + index, 0);
                }
                return baseFindIndex(array, getIteratee(predicate, 3), index);
            }

            /**
             * This method is like `_.findIndex` except that it iterates over elements
             * of `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
             * // => 2
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastIndex(users, { 'user': 'barney', 'active': true });
             * // => 0
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastIndex(users, ['active', false]);
             * // => 2
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastIndex(users, 'active');
             * // => 0
             */
            function findLastIndex(array, predicate, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return -1;
                }
                var index = length - 1;
                if (fromIndex !== undefined$1) {
                    index = toInteger(fromIndex);
                    index =
                        fromIndex < 0
                            ? nativeMax(length + index, 0)
                            : nativeMin(index, length - 1);
                }
                return baseFindIndex(
                    array,
                    getIteratee(predicate, 3),
                    index,
                    true
                );
            }

            /**
             * Flattens `array` a single level deep.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flatten([1, [2, [3, [4]], 5]]);
             * // => [1, 2, [3, [4]], 5]
             */
            function flatten(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseFlatten(array, 1) : [];
            }

            /**
             * Recursively flattens `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flattenDeep([1, [2, [3, [4]], 5]]);
             * // => [1, 2, 3, 4, 5]
             */
            function flattenDeep(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseFlatten(array, INFINITY) : [];
            }

            /**
             * Recursively flatten `array` up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * var array = [1, [2, [3, [4]], 5]];
             *
             * _.flattenDepth(array, 1);
             * // => [1, 2, [3, [4]], 5]
             *
             * _.flattenDepth(array, 2);
             * // => [1, 2, 3, [4], 5]
             */
            function flattenDepth(array, depth) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                depth = depth === undefined$1 ? 1 : toInteger(depth);
                return baseFlatten(array, depth);
            }

            /**
             * The inverse of `_.toPairs`; this method returns an object composed
             * from key-value `pairs`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} pairs The key-value pairs.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.fromPairs([['a', 1], ['b', 2]]);
             * // => { 'a': 1, 'b': 2 }
             */
            function fromPairs(pairs) {
                var index = -1,
                    length = pairs == null ? 0 : pairs.length,
                    result = {};

                while (++index < length) {
                    var pair = pairs[index];
                    result[pair[0]] = pair[1];
                }
                return result;
            }

            /**
             * Gets the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias first
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the first element of `array`.
             * @example
             *
             * _.head([1, 2, 3]);
             * // => 1
             *
             * _.head([]);
             * // => undefined
             */
            function head(array) {
                return array && array.length ? array[0] : undefined$1;
            }

            /**
             * Gets the index at which the first occurrence of `value` is found in `array`
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. If `fromIndex` is negative, it's used as the
             * offset from the end of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.indexOf([1, 2, 1, 2], 2);
             * // => 1
             *
             * // Search from the `fromIndex`.
             * _.indexOf([1, 2, 1, 2], 2, 2);
             * // => 3
             */
            function indexOf(array, value, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return -1;
                }
                var index = fromIndex == null ? 0 : toInteger(fromIndex);
                if (index < 0) {
                    index = nativeMax(length + index, 0);
                }
                return baseIndexOf(array, value, index);
            }

            /**
             * Gets all but the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.initial([1, 2, 3]);
             * // => [1, 2]
             */
            function initial(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseSlice(array, 0, -1) : [];
            }

            /**
             * Creates an array of unique values that are included in all given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersection([2, 1], [2, 3]);
             * // => [2]
             */
            var intersection = baseRest(function (arrays) {
                var mapped = arrayMap(arrays, castArrayLikeObject);
                return mapped.length && mapped[0] === arrays[0]
                    ? baseIntersection(mapped)
                    : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `iteratee`
             * which is invoked for each element of each `arrays` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [2.1]
             *
             * // The `_.property` iteratee shorthand.
             * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }]
             */
            var intersectionBy = baseRest(function (arrays) {
                var iteratee = last(arrays),
                    mapped = arrayMap(arrays, castArrayLikeObject);

                if (iteratee === last(mapped)) {
                    iteratee = undefined$1;
                } else {
                    mapped.pop();
                }
                return mapped.length && mapped[0] === arrays[0]
                    ? baseIntersection(mapped, getIteratee(iteratee, 2))
                    : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `comparator`
             * which is invoked to compare elements of `arrays`. The order and references
             * of result values are determined by the first array. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.intersectionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }]
             */
            var intersectionWith = baseRest(function (arrays) {
                var comparator = last(arrays),
                    mapped = arrayMap(arrays, castArrayLikeObject);

                comparator =
                    typeof comparator == 'function' ? comparator : undefined$1;
                if (comparator) {
                    mapped.pop();
                }
                return mapped.length && mapped[0] === arrays[0]
                    ? baseIntersection(mapped, undefined$1, comparator)
                    : [];
            });

            /**
             * Converts all elements in `array` into a string separated by `separator`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to convert.
             * @param {string} [separator=','] The element separator.
             * @returns {string} Returns the joined string.
             * @example
             *
             * _.join(['a', 'b', 'c'], '~');
             * // => 'a~b~c'
             */
            function join(array, separator) {
                return array == null ? '' : nativeJoin.call(array, separator);
            }

            /**
             * Gets the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the last element of `array`.
             * @example
             *
             * _.last([1, 2, 3]);
             * // => 3
             */
            function last(array) {
                var length = array == null ? 0 : array.length;
                return length ? array[length - 1] : undefined$1;
            }

            /**
             * This method is like `_.indexOf` except that it iterates over elements of
             * `array` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.lastIndexOf([1, 2, 1, 2], 2);
             * // => 3
             *
             * // Search from the `fromIndex`.
             * _.lastIndexOf([1, 2, 1, 2], 2, 2);
             * // => 1
             */
            function lastIndexOf(array, value, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return -1;
                }
                var index = length;
                if (fromIndex !== undefined$1) {
                    index = toInteger(fromIndex);
                    index =
                        index < 0
                            ? nativeMax(length + index, 0)
                            : nativeMin(index, length - 1);
                }
                return value === value
                    ? strictLastIndexOf(array, value, index)
                    : baseFindIndex(array, baseIsNaN, index, true);
            }

            /**
             * Gets the element at index `n` of `array`. If `n` is negative, the nth
             * element from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.11.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=0] The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             *
             * _.nth(array, 1);
             * // => 'b'
             *
             * _.nth(array, -2);
             * // => 'c';
             */
            function nth(array, n) {
                return array && array.length
                    ? baseNth(array, toInteger(n))
                    : undefined$1;
            }

            /**
             * Removes all given values from `array` using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
             * to remove elements from an array by predicate.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...*} [values] The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pull(array, 'a', 'c');
             * console.log(array);
             * // => ['b', 'b']
             */
            var pull = baseRest(pullAll);

            /**
             * This method is like `_.pull` except that it accepts an array of values to remove.
             *
             * **Note:** Unlike `_.difference`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pullAll(array, ['a', 'c']);
             * console.log(array);
             * // => ['b', 'b']
             */
            function pullAll(array, values) {
                return array && array.length && values && values.length
                    ? basePullAll(array, values)
                    : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `iteratee` which is
             * invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The iteratee is invoked with one argument: (value).
             *
             * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
             *
             * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
             * console.log(array);
             * // => [{ 'x': 2 }]
             */
            function pullAllBy(array, values, iteratee) {
                return array && array.length && values && values.length
                    ? basePullAll(array, values, getIteratee(iteratee, 2))
                    : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `comparator` which
             * is invoked to compare elements of `array` to `values`. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
             *
             * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
             * console.log(array);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
             */
            function pullAllWith(array, values, comparator) {
                return array && array.length && values && values.length
                    ? basePullAll(array, values, undefined$1, comparator)
                    : array;
            }

            /**
             * Removes elements from `array` corresponding to `indexes` and returns an
             * array of removed elements.
             *
             * **Note:** Unlike `_.at`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...(number|number[])} [indexes] The indexes of elements to remove.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             * var pulled = _.pullAt(array, [1, 3]);
             *
             * console.log(array);
             * // => ['a', 'c']
             *
             * console.log(pulled);
             * // => ['b', 'd']
             */
            var pullAt = flatRest(function (array, indexes) {
                var length = array == null ? 0 : array.length,
                    result = baseAt(array, indexes);

                basePullAt(
                    array,
                    arrayMap(indexes, function (index) {
                        return isIndex(index, length) ? +index : index;
                    }).sort(compareAscending)
                );

                return result;
            });

            /**
             * Removes all elements from `array` that `predicate` returns truthy for
             * and returns an array of the removed elements. The predicate is invoked
             * with three arguments: (value, index, array).
             *
             * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
             * to pull elements from an array by value.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = [1, 2, 3, 4];
             * var evens = _.remove(array, function(n) {
             *   return n % 2 == 0;
             * });
             *
             * console.log(array);
             * // => [1, 3]
             *
             * console.log(evens);
             * // => [2, 4]
             */
            function remove(array, predicate) {
                var result = [];
                if (!(array && array.length)) {
                    return result;
                }
                var index = -1,
                    indexes = [],
                    length = array.length;

                predicate = getIteratee(predicate, 3);
                while (++index < length) {
                    var value = array[index];
                    if (predicate(value, index, array)) {
                        result.push(value);
                        indexes.push(index);
                    }
                }
                basePullAt(array, indexes);
                return result;
            }

            /**
             * Reverses `array` so that the first element becomes the last, the second
             * element becomes the second to last, and so on.
             *
             * **Note:** This method mutates `array` and is based on
             * [`Array#reverse`](https://mdn.io/Array/reverse).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.reverse(array);
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function reverse(array) {
                return array == null ? array : nativeReverse.call(array);
            }

            /**
             * Creates a slice of `array` from `start` up to, but not including, `end`.
             *
             * **Note:** This method is used instead of
             * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
             * returned.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function slice(array, start, end) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                if (
                    end &&
                    typeof end != 'number' &&
                    isIterateeCall(array, start, end)
                ) {
                    start = 0;
                    end = length;
                } else {
                    start = start == null ? 0 : toInteger(start);
                    end = end === undefined$1 ? length : toInteger(end);
                }
                return baseSlice(array, start, end);
            }

            /**
             * Uses a binary search to determine the lowest index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedIndex([30, 50], 40);
             * // => 1
             */
            function sortedIndex(array, value) {
                return baseSortedIndex(array, value);
            }

            /**
             * This method is like `_.sortedIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
             * // => 0
             */
            function sortedIndexBy(array, value, iteratee) {
                return baseSortedIndexBy(
                    array,
                    value,
                    getIteratee(iteratee, 2)
                );
            }

            /**
             * This method is like `_.indexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
             * // => 1
             */
            function sortedIndexOf(array, value) {
                var length = array == null ? 0 : array.length;
                if (length) {
                    var index = baseSortedIndex(array, value);
                    if (index < length && eq(array[index], value)) {
                        return index;
                    }
                }
                return -1;
            }

            /**
             * This method is like `_.sortedIndex` except that it returns the highest
             * index at which `value` should be inserted into `array` in order to
             * maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
             * // => 4
             */
            function sortedLastIndex(array, value) {
                return baseSortedIndex(array, value, true);
            }

            /**
             * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 1
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
             * // => 1
             */
            function sortedLastIndexBy(array, value, iteratee) {
                return baseSortedIndexBy(
                    array,
                    value,
                    getIteratee(iteratee, 2),
                    true
                );
            }

            /**
             * This method is like `_.lastIndexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
             * // => 3
             */
            function sortedLastIndexOf(array, value) {
                var length = array == null ? 0 : array.length;
                if (length) {
                    var index = baseSortedIndex(array, value, true) - 1;
                    if (eq(array[index], value)) {
                        return index;
                    }
                }
                return -1;
            }

            /**
             * This method is like `_.uniq` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniq([1, 1, 2]);
             * // => [1, 2]
             */
            function sortedUniq(array) {
                return array && array.length ? baseSortedUniq(array) : [];
            }

            /**
             * This method is like `_.uniqBy` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
             * // => [1.1, 2.3]
             */
            function sortedUniqBy(array, iteratee) {
                return array && array.length
                    ? baseSortedUniq(array, getIteratee(iteratee, 2))
                    : [];
            }

            /**
             * Gets all but the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.tail([1, 2, 3]);
             * // => [2, 3]
             */
            function tail(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseSlice(array, 1, length) : [];
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.take([1, 2, 3]);
             * // => [1]
             *
             * _.take([1, 2, 3], 2);
             * // => [1, 2]
             *
             * _.take([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.take([1, 2, 3], 0);
             * // => []
             */
            function take(array, n, guard) {
                if (!(array && array.length)) {
                    return [];
                }
                n = guard || n === undefined$1 ? 1 : toInteger(n);
                return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.takeRight([1, 2, 3]);
             * // => [3]
             *
             * _.takeRight([1, 2, 3], 2);
             * // => [2, 3]
             *
             * _.takeRight([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.takeRight([1, 2, 3], 0);
             * // => []
             */
            function takeRight(array, n, guard) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                n = guard || n === undefined$1 ? 1 : toInteger(n);
                n = length - n;
                return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with elements taken from the end. Elements are
             * taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.takeRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeRightWhile(users, ['active', false]);
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeRightWhile(users, 'active');
             * // => []
             */
            function takeRightWhile(array, predicate) {
                return array && array.length
                    ? baseWhile(array, getIteratee(predicate, 3), false, true)
                    : [];
            }

            /**
             * Creates a slice of `array` with elements taken from the beginning. Elements
             * are taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.takeWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeWhile(users, ['active', false]);
             * // => objects for ['barney', 'fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeWhile(users, 'active');
             * // => []
             */
            function takeWhile(array, predicate) {
                return array && array.length
                    ? baseWhile(array, getIteratee(predicate, 3))
                    : [];
            }

            /**
             * Creates an array of unique values, in order, from all given arrays using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.union([2], [1, 2]);
             * // => [2, 1]
             */
            var union = baseRest(function (arrays) {
                return baseUniq(
                    baseFlatten(arrays, 1, isArrayLikeObject, true)
                );
            });

            /**
             * This method is like `_.union` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which uniqueness is computed. Result values are chosen from the first
             * array in which the value occurs. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.unionBy([2.1], [1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            var unionBy = baseRest(function (arrays) {
                var iteratee = last(arrays);
                if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined$1;
                }
                return baseUniq(
                    baseFlatten(arrays, 1, isArrayLikeObject, true),
                    getIteratee(iteratee, 2)
                );
            });

            /**
             * This method is like `_.union` except that it accepts `comparator` which
             * is invoked to compare elements of `arrays`. Result values are chosen from
             * the first array in which the value occurs. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.unionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var unionWith = baseRest(function (arrays) {
                var comparator = last(arrays);
                comparator =
                    typeof comparator == 'function' ? comparator : undefined$1;
                return baseUniq(
                    baseFlatten(arrays, 1, isArrayLikeObject, true),
                    undefined$1,
                    comparator
                );
            });

            /**
             * Creates a duplicate-free version of an array, using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons, in which only the first occurrence of each element
             * is kept. The order of result values is determined by the order they occur
             * in the array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniq([2, 1, 2]);
             * // => [2, 1]
             */
            function uniq(array) {
                return array && array.length ? baseUniq(array) : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * uniqueness is computed. The order of result values is determined by the
             * order they occur in the array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            function uniqBy(array, iteratee) {
                return array && array.length
                    ? baseUniq(array, getIteratee(iteratee, 2))
                    : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `comparator` which
             * is invoked to compare elements of `array`. The order of result values is
             * determined by the order they occur in the array.The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.uniqWith(objects, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
             */
            function uniqWith(array, comparator) {
                comparator =
                    typeof comparator == 'function' ? comparator : undefined$1;
                return array && array.length
                    ? baseUniq(array, undefined$1, comparator)
                    : [];
            }

            /**
             * This method is like `_.zip` except that it accepts an array of grouped
             * elements and creates an array regrouping the elements to their pre-zip
             * configuration.
             *
             * @static
             * @memberOf _
             * @since 1.2.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             *
             * _.unzip(zipped);
             * // => [['a', 'b'], [1, 2], [true, false]]
             */
            function unzip(array) {
                if (!(array && array.length)) {
                    return [];
                }
                var length = 0;
                array = arrayFilter(array, function (group) {
                    if (isArrayLikeObject(group)) {
                        length = nativeMax(group.length, length);
                        return true;
                    }
                });
                return baseTimes(length, function (index) {
                    return arrayMap(array, baseProperty(index));
                });
            }

            /**
             * This method is like `_.unzip` except that it accepts `iteratee` to specify
             * how regrouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  regrouped values.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
             * // => [[1, 10, 100], [2, 20, 200]]
             *
             * _.unzipWith(zipped, _.add);
             * // => [3, 30, 300]
             */
            function unzipWith(array, iteratee) {
                if (!(array && array.length)) {
                    return [];
                }
                var result = unzip(array);
                if (iteratee == null) {
                    return result;
                }
                return arrayMap(result, function (group) {
                    return apply(iteratee, undefined$1, group);
                });
            }

            /**
             * Creates an array excluding all given values using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.pull`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...*} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.xor
             * @example
             *
             * _.without([2, 1, 2, 3], 1, 2);
             * // => [3]
             */
            var without = baseRest(function (array, values) {
                return isArrayLikeObject(array)
                    ? baseDifference(array, values)
                    : [];
            });

            /**
             * Creates an array of unique values that is the
             * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
             * of the given arrays. The order of result values is determined by the order
             * they occur in the arrays.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.without
             * @example
             *
             * _.xor([2, 1], [2, 3]);
             * // => [1, 3]
             */
            var xor = baseRest(function (arrays) {
                return baseXor(arrayFilter(arrays, isArrayLikeObject));
            });

            /**
             * This method is like `_.xor` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which by which they're compared. The order of result values is determined
             * by the order they occur in the arrays. The iteratee is invoked with one
             * argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2, 3.4]
             *
             * // The `_.property` iteratee shorthand.
             * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var xorBy = baseRest(function (arrays) {
                var iteratee = last(arrays);
                if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined$1;
                }
                return baseXor(
                    arrayFilter(arrays, isArrayLikeObject),
                    getIteratee(iteratee, 2)
                );
            });

            /**
             * This method is like `_.xor` except that it accepts `comparator` which is
             * invoked to compare elements of `arrays`. The order of result values is
             * determined by the order they occur in the arrays. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.xorWith(objects, others, _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var xorWith = baseRest(function (arrays) {
                var comparator = last(arrays);
                comparator =
                    typeof comparator == 'function' ? comparator : undefined$1;
                return baseXor(
                    arrayFilter(arrays, isArrayLikeObject),
                    undefined$1,
                    comparator
                );
            });

            /**
             * Creates an array of grouped elements, the first of which contains the
             * first elements of the given arrays, the second of which contains the
             * second elements of the given arrays, and so on.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             */
            var zip = baseRest(unzip);

            /**
             * This method is like `_.fromPairs` except that it accepts two arrays,
             * one of property identifiers and one of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 0.4.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObject(['a', 'b'], [1, 2]);
             * // => { 'a': 1, 'b': 2 }
             */
            function zipObject(props, values) {
                return baseZipObject(props || [], values || [], assignValue);
            }

            /**
             * This method is like `_.zipObject` except that it supports property paths.
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
             * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
             */
            function zipObjectDeep(props, values) {
                return baseZipObject(props || [], values || [], baseSet);
            }

            /**
             * This method is like `_.zip` except that it accepts `iteratee` to specify
             * how grouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  grouped values.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
             *   return a + b + c;
             * });
             * // => [111, 222]
             */
            var zipWith = baseRest(function (arrays) {
                var length = arrays.length,
                    iteratee = length > 1 ? arrays[length - 1] : undefined$1;

                iteratee =
                    typeof iteratee == 'function'
                        ? (arrays.pop(), iteratee)
                        : undefined$1;
                return unzipWith(arrays, iteratee);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` wrapper instance that wraps `value` with explicit method
             * chain sequences enabled. The result of such sequences must be unwrapped
             * with `_#value`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Seq
             * @param {*} value The value to wrap.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36 },
             *   { 'user': 'fred',    'age': 40 },
             *   { 'user': 'pebbles', 'age': 1 }
             * ];
             *
             * var youngest = _
             *   .chain(users)
             *   .sortBy('age')
             *   .map(function(o) {
             *     return o.user + ' is ' + o.age;
             *   })
             *   .head()
             *   .value();
             * // => 'pebbles is 1'
             */
            function chain(value) {
                var result = lodash(value);
                result.__chain__ = true;
                return result;
            }

            /**
             * This method invokes `interceptor` and returns `value`. The interceptor
             * is invoked with one argument; (value). The purpose of this method is to
             * "tap into" a method chain sequence in order to modify intermediate results.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns `value`.
             * @example
             *
             * _([1, 2, 3])
             *  .tap(function(array) {
             *    // Mutate input array.
             *    array.pop();
             *  })
             *  .reverse()
             *  .value();
             * // => [2, 1]
             */
            function tap(value, interceptor) {
                interceptor(value);
                return value;
            }

            /**
             * This method is like `_.tap` except that it returns the result of `interceptor`.
             * The purpose of this method is to "pass thru" values replacing intermediate
             * results in a method chain sequence.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns the result of `interceptor`.
             * @example
             *
             * _('  abc  ')
             *  .chain()
             *  .trim()
             *  .thru(function(value) {
             *    return [value];
             *  })
             *  .value();
             * // => ['abc']
             */
            function thru(value, interceptor) {
                return interceptor(value);
            }

            /**
             * This method is the wrapper version of `_.at`.
             *
             * @name at
             * @memberOf _
             * @since 1.0.0
             * @category Seq
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _(object).at(['a[0].b.c', 'a[1]']).value();
             * // => [3, 4]
             */
            var wrapperAt = flatRest(function (paths) {
                var length = paths.length,
                    start = length ? paths[0] : 0,
                    value = this.__wrapped__,
                    interceptor = function (object) {
                        return baseAt(object, paths);
                    };

                if (
                    length > 1 ||
                    this.__actions__.length ||
                    !(value instanceof LazyWrapper) ||
                    !isIndex(start)
                ) {
                    return this.thru(interceptor);
                }
                value = value.slice(start, +start + (length ? 1 : 0));
                value.__actions__.push({
                    func: thru,
                    args: [interceptor],
                    thisArg: undefined$1,
                });
                return new LodashWrapper(value, this.__chain__).thru(function (
                    array
                ) {
                    if (length && !array.length) {
                        array.push(undefined$1);
                    }
                    return array;
                });
            });

            /**
             * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
             *
             * @name chain
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 40 }
             * ];
             *
             * // A sequence without explicit chaining.
             * _(users).head();
             * // => { 'user': 'barney', 'age': 36 }
             *
             * // A sequence with explicit chaining.
             * _(users)
             *   .chain()
             *   .head()
             *   .pick('user')
             *   .value();
             * // => { 'user': 'barney' }
             */
            function wrapperChain() {
                return chain(this);
            }

            /**
             * Executes the chain sequence and returns the wrapped result.
             *
             * @name commit
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2];
             * var wrapped = _(array).push(3);
             *
             * console.log(array);
             * // => [1, 2]
             *
             * wrapped = wrapped.commit();
             * console.log(array);
             * // => [1, 2, 3]
             *
             * wrapped.last();
             * // => 3
             *
             * console.log(array);
             * // => [1, 2, 3]
             */
            function wrapperCommit() {
                return new LodashWrapper(this.value(), this.__chain__);
            }

            /**
             * Gets the next value on a wrapped object following the
             * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
             *
             * @name next
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the next iterator value.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 1 }
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 2 }
             *
             * wrapped.next();
             * // => { 'done': true, 'value': undefined }
             */
            function wrapperNext() {
                if (this.__values__ === undefined$1) {
                    this.__values__ = toArray(this.value());
                }
                var done = this.__index__ >= this.__values__.length,
                    value = done
                        ? undefined$1
                        : this.__values__[this.__index__++];

                return { done: done, value: value };
            }

            /**
             * Enables the wrapper to be iterable.
             *
             * @name Symbol.iterator
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the wrapper object.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped[Symbol.iterator]() === wrapped;
             * // => true
             *
             * Array.from(wrapped);
             * // => [1, 2]
             */
            function wrapperToIterator() {
                return this;
            }

            /**
             * Creates a clone of the chain sequence planting `value` as the wrapped value.
             *
             * @name plant
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @param {*} value The value to plant.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2]).map(square);
             * var other = wrapped.plant([3, 4]);
             *
             * other.value();
             * // => [9, 16]
             *
             * wrapped.value();
             * // => [1, 4]
             */
            function wrapperPlant(value) {
                var result,
                    parent = this;

                while (parent instanceof baseLodash) {
                    var clone = wrapperClone(parent);
                    clone.__index__ = 0;
                    clone.__values__ = undefined$1;
                    if (result) {
                        previous.__wrapped__ = clone;
                    } else {
                        result = clone;
                    }
                    var previous = clone;
                    parent = parent.__wrapped__;
                }
                previous.__wrapped__ = value;
                return result;
            }

            /**
             * This method is the wrapper version of `_.reverse`.
             *
             * **Note:** This method mutates the wrapped array.
             *
             * @name reverse
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _(array).reverse().value()
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function wrapperReverse() {
                var value = this.__wrapped__;
                if (value instanceof LazyWrapper) {
                    var wrapped = value;
                    if (this.__actions__.length) {
                        wrapped = new LazyWrapper(this);
                    }
                    wrapped = wrapped.reverse();
                    wrapped.__actions__.push({
                        func: thru,
                        args: [reverse],
                        thisArg: undefined$1,
                    });
                    return new LodashWrapper(wrapped, this.__chain__);
                }
                return this.thru(reverse);
            }

            /**
             * Executes the chain sequence to resolve the unwrapped value.
             *
             * @name value
             * @memberOf _
             * @since 0.1.0
             * @alias toJSON, valueOf
             * @category Seq
             * @returns {*} Returns the resolved unwrapped value.
             * @example
             *
             * _([1, 2, 3]).value();
             * // => [1, 2, 3]
             */
            function wrapperValue() {
                return baseWrapperValue(this.__wrapped__, this.__actions__);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the number of times the key was returned by `iteratee`. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.countBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': 1, '6': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.countBy(['one', 'two', 'three'], 'length');
             * // => { '3': 2, '5': 1 }
             */
            var countBy = createAggregator(function (result, value, key) {
                if (hasOwnProperty.call(result, key)) {
                    ++result[key];
                } else {
                    baseAssignValue(result, key, 1);
                }
            });

            /**
             * Checks if `predicate` returns truthy for **all** elements of `collection`.
             * Iteration is stopped once `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * **Note:** This method returns `true` for
             * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
             * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
             * elements of empty collections.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`.
             * @example
             *
             * _.every([true, 1, null, 'yes'], Boolean);
             * // => false
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.every(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.every(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.every(users, 'active');
             * // => false
             */
            function every(collection, predicate, guard) {
                var func = isArray(collection) ? arrayEvery : baseEvery;
                if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined$1;
                }
                return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning an array of all elements
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * **Note:** Unlike `_.remove`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.reject
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * _.filter(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, { 'age': 36, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.filter(users, 'active');
             * // => objects for ['barney']
             *
             * // Combining several predicates using `_.overEvery` or `_.overSome`.
             * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
             * // => objects for ['fred', 'barney']
             */
            function filter(collection, predicate) {
                var func = isArray(collection) ? arrayFilter : baseFilter;
                return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning the first element
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': true },
             *   { 'user': 'fred',    'age': 40, 'active': false },
             *   { 'user': 'pebbles', 'age': 1,  'active': true }
             * ];
             *
             * _.find(users, function(o) { return o.age < 40; });
             * // => object for 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.find(users, { 'age': 1, 'active': true });
             * // => object for 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.find(users, ['active', false]);
             * // => object for 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.find(users, 'active');
             * // => object for 'barney'
             */
            var find = createFind(findIndex);

            /**
             * This method is like `_.find` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=collection.length-1] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * _.findLast([1, 2, 3, 4], function(n) {
             *   return n % 2 == 1;
             * });
             * // => 3
             */
            var findLast = createFind(findLastIndex);

            /**
             * Creates a flattened array of values by running each element in `collection`
             * thru `iteratee` and flattening the mapped results. The iteratee is invoked
             * with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [n, n];
             * }
             *
             * _.flatMap([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMap(collection, iteratee) {
                return baseFlatten(map(collection, iteratee), 1);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDeep([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMapDeep(collection, iteratee) {
                return baseFlatten(map(collection, iteratee), INFINITY);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDepth([1, 2], duplicate, 2);
             * // => [[1, 1], [2, 2]]
             */
            function flatMapDepth(collection, iteratee, depth) {
                depth = depth === undefined$1 ? 1 : toInteger(depth);
                return baseFlatten(map(collection, iteratee), depth);
            }

            /**
             * Iterates over elements of `collection` and invokes `iteratee` for each element.
             * The iteratee is invoked with three arguments: (value, index|key, collection).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * **Note:** As with other "Collections" methods, objects with a "length"
             * property are iterated like arrays. To avoid this behavior use `_.forIn`
             * or `_.forOwn` for object iteration.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias each
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEachRight
             * @example
             *
             * _.forEach([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `1` then `2`.
             *
             * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forEach(collection, iteratee) {
                var func = isArray(collection) ? arrayEach : baseEach;
                return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forEach` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @alias eachRight
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEach
             * @example
             *
             * _.forEachRight([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `2` then `1`.
             */
            function forEachRight(collection, iteratee) {
                var func = isArray(collection) ? arrayEachRight : baseEachRight;
                return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The order of grouped values
             * is determined by the order they occur in `collection`. The corresponding
             * value of each key is an array of elements responsible for generating the
             * key. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.groupBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': [4.2], '6': [6.1, 6.3] }
             *
             * // The `_.property` iteratee shorthand.
             * _.groupBy(['one', 'two', 'three'], 'length');
             * // => { '3': ['one', 'two'], '5': ['three'] }
             */
            var groupBy = createAggregator(function (result, value, key) {
                if (hasOwnProperty.call(result, key)) {
                    result[key].push(value);
                } else {
                    baseAssignValue(result, key, [value]);
                }
            });

            /**
             * Checks if `value` is in `collection`. If `collection` is a string, it's
             * checked for a substring of `value`, otherwise
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * is used for equality comparisons. If `fromIndex` is negative, it's used as
             * the offset from the end of `collection`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {boolean} Returns `true` if `value` is found, else `false`.
             * @example
             *
             * _.includes([1, 2, 3], 1);
             * // => true
             *
             * _.includes([1, 2, 3], 1, 2);
             * // => false
             *
             * _.includes({ 'a': 1, 'b': 2 }, 1);
             * // => true
             *
             * _.includes('abcd', 'bc');
             * // => true
             */
            function includes(collection, value, fromIndex, guard) {
                collection = isArrayLike(collection)
                    ? collection
                    : values(collection);
                fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

                var length = collection.length;
                if (fromIndex < 0) {
                    fromIndex = nativeMax(length + fromIndex, 0);
                }
                return isString(collection)
                    ? fromIndex <= length &&
                          collection.indexOf(value, fromIndex) > -1
                    : !!length &&
                          baseIndexOf(collection, value, fromIndex) > -1;
            }

            /**
             * Invokes the method at `path` of each element in `collection`, returning
             * an array of the results of each invoked method. Any additional arguments
             * are provided to each invoked method. If `path` is a function, it's invoked
             * for, and `this` bound to, each element in `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array|Function|string} path The path of the method to invoke or
             *  the function invoked per iteration.
             * @param {...*} [args] The arguments to invoke each method with.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
             * // => [[1, 5, 7], [1, 2, 3]]
             *
             * _.invokeMap([123, 456], String.prototype.split, '');
             * // => [['1', '2', '3'], ['4', '5', '6']]
             */
            var invokeMap = baseRest(function (collection, path, args) {
                var index = -1,
                    isFunc = typeof path == 'function',
                    result = isArrayLike(collection)
                        ? Array(collection.length)
                        : [];

                baseEach(collection, function (value) {
                    result[++index] = isFunc
                        ? apply(path, value, args)
                        : baseInvoke(value, path, args);
                });
                return result;
            });

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the last element responsible for generating the key. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * var array = [
             *   { 'dir': 'left', 'code': 97 },
             *   { 'dir': 'right', 'code': 100 }
             * ];
             *
             * _.keyBy(array, function(o) {
             *   return String.fromCharCode(o.code);
             * });
             * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
             *
             * _.keyBy(array, 'dir');
             * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
             */
            var keyBy = createAggregator(function (result, value, key) {
                baseAssignValue(result, key, value);
            });

            /**
             * Creates an array of values by running each element in `collection` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
             *
             * The guarded methods are:
             * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
             * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
             * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
             * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * _.map([4, 8], square);
             * // => [16, 64]
             *
             * _.map({ 'a': 4, 'b': 8 }, square);
             * // => [16, 64] (iteration order is not guaranteed)
             *
             * var users = [
             *   { 'user': 'barney' },
             *   { 'user': 'fred' }
             * ];
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, 'user');
             * // => ['barney', 'fred']
             */
            function map(collection, iteratee) {
                var func = isArray(collection) ? arrayMap : baseMap;
                return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.sortBy` except that it allows specifying the sort
             * orders of the iteratees to sort by. If `orders` is unspecified, all values
             * are sorted in ascending order. Otherwise, specify an order of "desc" for
             * descending or "asc" for ascending sort order of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @param {string[]} [orders] The sort orders of `iteratees`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 34 },
             *   { 'user': 'fred',   'age': 40 },
             *   { 'user': 'barney', 'age': 36 }
             * ];
             *
             * // Sort by `user` in ascending order and by `age` in descending order.
             * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
             */
            function orderBy(collection, iteratees, orders, guard) {
                if (collection == null) {
                    return [];
                }
                if (!isArray(iteratees)) {
                    iteratees = iteratees == null ? [] : [iteratees];
                }
                orders = guard ? undefined$1 : orders;
                if (!isArray(orders)) {
                    orders = orders == null ? [] : [orders];
                }
                return baseOrderBy(collection, iteratees, orders);
            }

            /**
             * Creates an array of elements split into two groups, the first of which
             * contains elements `predicate` returns truthy for, the second of which
             * contains elements `predicate` returns falsey for. The predicate is
             * invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of grouped elements.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': false },
             *   { 'user': 'fred',    'age': 40, 'active': true },
             *   { 'user': 'pebbles', 'age': 1,  'active': false }
             * ];
             *
             * _.partition(users, function(o) { return o.active; });
             * // => objects for [['fred'], ['barney', 'pebbles']]
             *
             * // The `_.matches` iteratee shorthand.
             * _.partition(users, { 'age': 1, 'active': false });
             * // => objects for [['pebbles'], ['barney', 'fred']]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.partition(users, ['active', false]);
             * // => objects for [['barney', 'pebbles'], ['fred']]
             *
             * // The `_.property` iteratee shorthand.
             * _.partition(users, 'active');
             * // => objects for [['fred'], ['barney', 'pebbles']]
             */
            var partition = createAggregator(
                function (result, value, key) {
                    result[key ? 0 : 1].push(value);
                },
                function () {
                    return [[], []];
                }
            );

            /**
             * Reduces `collection` to a value which is the accumulated result of running
             * each element in `collection` thru `iteratee`, where each successive
             * invocation is supplied the return value of the previous. If `accumulator`
             * is not given, the first element of `collection` is used as the initial
             * value. The iteratee is invoked with four arguments:
             * (accumulator, value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.reduce`, `_.reduceRight`, and `_.transform`.
             *
             * The guarded methods are:
             * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
             * and `sortBy`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduceRight
             * @example
             *
             * _.reduce([1, 2], function(sum, n) {
             *   return sum + n;
             * }, 0);
             * // => 3
             *
             * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             *   return result;
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
             */
            function reduce(collection, iteratee, accumulator) {
                var func = isArray(collection) ? arrayReduce : baseReduce,
                    initAccum = arguments.length < 3;

                return func(
                    collection,
                    getIteratee(iteratee, 4),
                    accumulator,
                    initAccum,
                    baseEach
                );
            }

            /**
             * This method is like `_.reduce` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduce
             * @example
             *
             * var array = [[0, 1], [2, 3], [4, 5]];
             *
             * _.reduceRight(array, function(flattened, other) {
             *   return flattened.concat(other);
             * }, []);
             * // => [4, 5, 2, 3, 0, 1]
             */
            function reduceRight(collection, iteratee, accumulator) {
                var func = isArray(collection) ? arrayReduceRight : baseReduce,
                    initAccum = arguments.length < 3;

                return func(
                    collection,
                    getIteratee(iteratee, 4),
                    accumulator,
                    initAccum,
                    baseEachRight
                );
            }

            /**
             * The opposite of `_.filter`; this method returns the elements of `collection`
             * that `predicate` does **not** return truthy for.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.filter
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': true }
             * ];
             *
             * _.reject(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.reject(users, { 'age': 40, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.reject(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.reject(users, 'active');
             * // => objects for ['barney']
             */
            function reject(collection, predicate) {
                var func = isArray(collection) ? arrayFilter : baseFilter;
                return func(collection, negate(getIteratee(predicate, 3)));
            }

            /**
             * Gets a random element from `collection`.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             * @example
             *
             * _.sample([1, 2, 3, 4]);
             * // => 2
             */
            function sample(collection) {
                var func = isArray(collection) ? arraySample : baseSample;
                return func(collection);
            }

            /**
             * Gets `n` random elements at unique keys from `collection` up to the
             * size of `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @param {number} [n=1] The number of elements to sample.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the random elements.
             * @example
             *
             * _.sampleSize([1, 2, 3], 2);
             * // => [3, 1]
             *
             * _.sampleSize([1, 2, 3], 4);
             * // => [2, 3, 1]
             */
            function sampleSize(collection, n, guard) {
                if (
                    guard
                        ? isIterateeCall(collection, n, guard)
                        : n === undefined$1
                ) {
                    n = 1;
                } else {
                    n = toInteger(n);
                }
                var func = isArray(collection)
                    ? arraySampleSize
                    : baseSampleSize;
                return func(collection, n);
            }

            /**
             * Creates an array of shuffled values, using a version of the
             * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             * @example
             *
             * _.shuffle([1, 2, 3, 4]);
             * // => [4, 1, 3, 2]
             */
            function shuffle(collection) {
                var func = isArray(collection) ? arrayShuffle : baseShuffle;
                return func(collection);
            }

            /**
             * Gets the size of `collection` by returning its length for array-like
             * values or the number of own enumerable string keyed properties for objects.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @returns {number} Returns the collection size.
             * @example
             *
             * _.size([1, 2, 3]);
             * // => 3
             *
             * _.size({ 'a': 1, 'b': 2 });
             * // => 2
             *
             * _.size('pebbles');
             * // => 7
             */
            function size(collection) {
                if (collection == null) {
                    return 0;
                }
                if (isArrayLike(collection)) {
                    return isString(collection)
                        ? stringSize(collection)
                        : collection.length;
                }
                var tag = getTag(collection);
                if (tag == mapTag || tag == setTag) {
                    return collection.size;
                }
                return baseKeys(collection).length;
            }

            /**
             * Checks if `predicate` returns truthy for **any** element of `collection`.
             * Iteration is stopped once `predicate` returns truthy. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             * @example
             *
             * _.some([null, 0, 'yes', false], Boolean);
             * // => true
             *
             * var users = [
             *   { 'user': 'barney', 'active': true },
             *   { 'user': 'fred',   'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.some(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.some(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.some(users, 'active');
             * // => true
             */
            function some(collection, predicate, guard) {
                var func = isArray(collection) ? arraySome : baseSome;
                if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined$1;
                }
                return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Creates an array of elements, sorted in ascending order by the results of
             * running each element in a collection thru each iteratee. This method
             * performs a stable sort, that is, it preserves the original sort order of
             * equal elements. The iteratees are invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 30 },
             *   { 'user': 'barney', 'age': 34 }
             * ];
             *
             * _.sortBy(users, [function(o) { return o.user; }]);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
             *
             * _.sortBy(users, ['user', 'age']);
             * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
             */
            var sortBy = baseRest(function (collection, iteratees) {
                if (collection == null) {
                    return [];
                }
                var length = iteratees.length;
                if (
                    length > 1 &&
                    isIterateeCall(collection, iteratees[0], iteratees[1])
                ) {
                    iteratees = [];
                } else if (
                    length > 2 &&
                    isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
                ) {
                    iteratees = [iteratees[0]];
                }
                return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Gets the timestamp of the number of milliseconds that have elapsed since
             * the Unix epoch (1 January 1970 00:00:00 UTC).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Date
             * @returns {number} Returns the timestamp.
             * @example
             *
             * _.defer(function(stamp) {
             *   console.log(_.now() - stamp);
             * }, _.now());
             * // => Logs the number of milliseconds it took for the deferred invocation.
             */
            var now =
                ctxNow ||
                function () {
                    return root.Date.now();
                };

            /*------------------------------------------------------------------------*/

            /**
             * The opposite of `_.before`; this method creates a function that invokes
             * `func` once it's called `n` or more times.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {number} n The number of calls before `func` is invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var saves = ['profile', 'settings'];
             *
             * var done = _.after(saves.length, function() {
             *   console.log('done saving!');
             * });
             *
             * _.forEach(saves, function(type) {
             *   asyncSave({ 'type': type, 'complete': done });
             * });
             * // => Logs 'done saving!' after the two async saves have completed.
             */
            function after(n, func) {
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                n = toInteger(n);
                return function () {
                    if (--n < 1) {
                        return func.apply(this, arguments);
                    }
                };
            }

            /**
             * Creates a function that invokes `func`, with up to `n` arguments,
             * ignoring any additional arguments.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @param {number} [n=func.length] The arity cap.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.ary(parseInt, 1));
             * // => [6, 8, 10]
             */
            function ary(func, n, guard) {
                n = guard ? undefined$1 : n;
                n = func && n == null ? func.length : n;
                return createWrap(
                    func,
                    WRAP_ARY_FLAG,
                    undefined$1,
                    undefined$1,
                    undefined$1,
                    undefined$1,
                    n
                );
            }

            /**
             * Creates a function that invokes `func`, with the `this` binding and arguments
             * of the created function, while it's called less than `n` times. Subsequent
             * calls to the created function return the result of the last `func` invocation.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {number} n The number of calls at which `func` is no longer invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * jQuery(element).on('click', _.before(5, addContactToList));
             * // => Allows adding up to 4 contacts to the list.
             */
            function before(n, func) {
                var result;
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                n = toInteger(n);
                return function () {
                    if (--n > 0) {
                        result = func.apply(this, arguments);
                    }
                    if (n <= 1) {
                        func = undefined$1;
                    }
                    return result;
                };
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of `thisArg`
             * and `partials` prepended to the arguments it receives.
             *
             * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for partially applied arguments.
             *
             * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
             * property of bound functions.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to bind.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * function greet(greeting, punctuation) {
             *   return greeting + ' ' + this.user + punctuation;
             * }
             *
             * var object = { 'user': 'fred' };
             *
             * var bound = _.bind(greet, object, 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bind(greet, object, _, '!');
             * bound('hi');
             * // => 'hi fred!'
             */
            var bind = baseRest(function (func, thisArg, partials) {
                var bitmask = WRAP_BIND_FLAG;
                if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bind));
                    bitmask |= WRAP_PARTIAL_FLAG;
                }
                return createWrap(func, bitmask, thisArg, partials, holders);
            });

            /**
             * Creates a function that invokes the method at `object[key]` with `partials`
             * prepended to the arguments it receives.
             *
             * This method differs from `_.bind` by allowing bound functions to reference
             * methods that may be redefined or don't yet exist. See
             * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
             * for more details.
             *
             * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Function
             * @param {Object} object The object to invoke the method on.
             * @param {string} key The key of the method.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * var object = {
             *   'user': 'fred',
             *   'greet': function(greeting, punctuation) {
             *     return greeting + ' ' + this.user + punctuation;
             *   }
             * };
             *
             * var bound = _.bindKey(object, 'greet', 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * object.greet = function(greeting, punctuation) {
             *   return greeting + 'ya ' + this.user + punctuation;
             * };
             *
             * bound('!');
             * // => 'hiya fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bindKey(object, 'greet', _, '!');
             * bound('hi');
             * // => 'hiya fred!'
             */
            var bindKey = baseRest(function (object, key, partials) {
                var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bindKey));
                    bitmask |= WRAP_PARTIAL_FLAG;
                }
                return createWrap(key, bitmask, object, partials, holders);
            });

            /**
             * Creates a function that accepts arguments of `func` and either invokes
             * `func` returning its result, if at least `arity` number of arguments have
             * been provided, or returns a function that accepts the remaining `func`
             * arguments, and so on. The arity of `func` may be specified if `func.length`
             * is not sufficient.
             *
             * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curry(abc);
             *
             * curried(1)(2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(1)(_, 3)(2);
             * // => [1, 2, 3]
             */
            function curry(func, arity, guard) {
                arity = guard ? undefined$1 : arity;
                var result = createWrap(
                    func,
                    WRAP_CURRY_FLAG,
                    undefined$1,
                    undefined$1,
                    undefined$1,
                    undefined$1,
                    undefined$1,
                    arity
                );
                result.placeholder = curry.placeholder;
                return result;
            }

            /**
             * This method is like `_.curry` except that arguments are applied to `func`
             * in the manner of `_.partialRight` instead of `_.partial`.
             *
             * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curryRight(abc);
             *
             * curried(3)(2)(1);
             * // => [1, 2, 3]
             *
             * curried(2, 3)(1);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(3)(1, _)(2);
             * // => [1, 2, 3]
             */
            function curryRight(func, arity, guard) {
                arity = guard ? undefined$1 : arity;
                var result = createWrap(
                    func,
                    WRAP_CURRY_RIGHT_FLAG,
                    undefined$1,
                    undefined$1,
                    undefined$1,
                    undefined$1,
                    undefined$1,
                    arity
                );
                result.placeholder = curryRight.placeholder;
                return result;
            }

            /**
             * Creates a debounced function that delays invoking `func` until after `wait`
             * milliseconds have elapsed since the last time the debounced function was
             * invoked. The debounced function comes with a `cancel` method to cancel
             * delayed `func` invocations and a `flush` method to immediately invoke them.
             * Provide `options` to indicate whether `func` should be invoked on the
             * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
             * with the last arguments provided to the debounced function. Subsequent
             * calls to the debounced function return the result of the last `func`
             * invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the debounced function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.debounce` and `_.throttle`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to debounce.
             * @param {number} [wait=0] The number of milliseconds to delay.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=false]
             *  Specify invoking on the leading edge of the timeout.
             * @param {number} [options.maxWait]
             *  The maximum time `func` is allowed to be delayed before it's invoked.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new debounced function.
             * @example
             *
             * // Avoid costly calculations while the window size is in flux.
             * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
             *
             * // Invoke `sendMail` when clicked, debouncing subsequent calls.
             * jQuery(element).on('click', _.debounce(sendMail, 300, {
             *   'leading': true,
             *   'trailing': false
             * }));
             *
             * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
             * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
             * var source = new EventSource('/stream');
             * jQuery(source).on('message', debounced);
             *
             * // Cancel the trailing debounced invocation.
             * jQuery(window).on('popstate', debounced.cancel);
             */
            function debounce(func, wait, options) {
                var lastArgs,
                    lastThis,
                    maxWait,
                    result,
                    timerId,
                    lastCallTime,
                    lastInvokeTime = 0,
                    leading = false,
                    maxing = false,
                    trailing = true;

                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                wait = toNumber(wait) || 0;
                if (isObject(options)) {
                    leading = !!options.leading;
                    maxing = 'maxWait' in options;
                    maxWait = maxing
                        ? nativeMax(toNumber(options.maxWait) || 0, wait)
                        : maxWait;
                    trailing =
                        'trailing' in options ? !!options.trailing : trailing;
                }

                function invokeFunc(time) {
                    var args = lastArgs,
                        thisArg = lastThis;

                    lastArgs = lastThis = undefined$1;
                    lastInvokeTime = time;
                    result = func.apply(thisArg, args);
                    return result;
                }

                function leadingEdge(time) {
                    // Reset any `maxWait` timer.
                    lastInvokeTime = time;
                    // Start the timer for the trailing edge.
                    timerId = setTimeout(timerExpired, wait);
                    // Invoke the leading edge.
                    return leading ? invokeFunc(time) : result;
                }

                function remainingWait(time) {
                    var timeSinceLastCall = time - lastCallTime,
                        timeSinceLastInvoke = time - lastInvokeTime,
                        timeWaiting = wait - timeSinceLastCall;

                    return maxing
                        ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                        : timeWaiting;
                }

                function shouldInvoke(time) {
                    var timeSinceLastCall = time - lastCallTime,
                        timeSinceLastInvoke = time - lastInvokeTime;

                    // Either this is the first call, activity has stopped and we're at the
                    // trailing edge, the system time has gone backwards and we're treating
                    // it as the trailing edge, or we've hit the `maxWait` limit.
                    return (
                        lastCallTime === undefined$1 ||
                        timeSinceLastCall >= wait ||
                        timeSinceLastCall < 0 ||
                        (maxing && timeSinceLastInvoke >= maxWait)
                    );
                }

                function timerExpired() {
                    var time = now();
                    if (shouldInvoke(time)) {
                        return trailingEdge(time);
                    }
                    // Restart the timer.
                    timerId = setTimeout(timerExpired, remainingWait(time));
                }

                function trailingEdge(time) {
                    timerId = undefined$1;

                    // Only invoke if we have `lastArgs` which means `func` has been
                    // debounced at least once.
                    if (trailing && lastArgs) {
                        return invokeFunc(time);
                    }
                    lastArgs = lastThis = undefined$1;
                    return result;
                }

                function cancel() {
                    if (timerId !== undefined$1) {
                        clearTimeout(timerId);
                    }
                    lastInvokeTime = 0;
                    lastArgs = lastCallTime = lastThis = timerId = undefined$1;
                }

                function flush() {
                    return timerId === undefined$1
                        ? result
                        : trailingEdge(now());
                }

                function debounced() {
                    var time = now(),
                        isInvoking = shouldInvoke(time);

                    lastArgs = arguments;
                    lastThis = this;
                    lastCallTime = time;

                    if (isInvoking) {
                        if (timerId === undefined$1) {
                            return leadingEdge(lastCallTime);
                        }
                        if (maxing) {
                            // Handle invocations in a tight loop.
                            clearTimeout(timerId);
                            timerId = setTimeout(timerExpired, wait);
                            return invokeFunc(lastCallTime);
                        }
                    }
                    if (timerId === undefined$1) {
                        timerId = setTimeout(timerExpired, wait);
                    }
                    return result;
                }
                debounced.cancel = cancel;
                debounced.flush = flush;
                return debounced;
            }

            /**
             * Defers invoking the `func` until the current call stack has cleared. Any
             * additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to defer.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.defer(function(text) {
             *   console.log(text);
             * }, 'deferred');
             * // => Logs 'deferred' after one millisecond.
             */
            var defer = baseRest(function (func, args) {
                return baseDelay(func, 1, args);
            });

            /**
             * Invokes `func` after `wait` milliseconds. Any additional arguments are
             * provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.delay(function(text) {
             *   console.log(text);
             * }, 1000, 'later');
             * // => Logs 'later' after one second.
             */
            var delay = baseRest(function (func, wait, args) {
                return baseDelay(func, toNumber(wait) || 0, args);
            });

            /**
             * Creates a function that invokes `func` with arguments reversed.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to flip arguments for.
             * @returns {Function} Returns the new flipped function.
             * @example
             *
             * var flipped = _.flip(function() {
             *   return _.toArray(arguments);
             * });
             *
             * flipped('a', 'b', 'c', 'd');
             * // => ['d', 'c', 'b', 'a']
             */
            function flip(func) {
                return createWrap(func, WRAP_FLIP_FLAG);
            }

            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */
            function memoize(func, resolver) {
                if (
                    typeof func != 'function' ||
                    (resolver != null && typeof resolver != 'function')
                ) {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                var memoized = function () {
                    var args = arguments,
                        key = resolver ? resolver.apply(this, args) : args[0],
                        cache = memoized.cache;

                    if (cache.has(key)) {
                        return cache.get(key);
                    }
                    var result = func.apply(this, args);
                    memoized.cache = cache.set(key, result) || cache;
                    return result;
                };
                memoized.cache = new (memoize.Cache || MapCache)();
                return memoized;
            }

            // Expose `MapCache`.
            memoize.Cache = MapCache;

            /**
             * Creates a function that negates the result of the predicate `func`. The
             * `func` predicate is invoked with the `this` binding and arguments of the
             * created function.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} predicate The predicate to negate.
             * @returns {Function} Returns the new negated function.
             * @example
             *
             * function isEven(n) {
             *   return n % 2 == 0;
             * }
             *
             * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
             * // => [1, 3, 5]
             */
            function negate(predicate) {
                if (typeof predicate != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                return function () {
                    var args = arguments;
                    switch (args.length) {
                        case 0:
                            return !predicate.call(this);
                        case 1:
                            return !predicate.call(this, args[0]);
                        case 2:
                            return !predicate.call(this, args[0], args[1]);
                        case 3:
                            return !predicate.call(
                                this,
                                args[0],
                                args[1],
                                args[2]
                            );
                    }
                    return !predicate.apply(this, args);
                };
            }

            /**
             * Creates a function that is restricted to invoking `func` once. Repeat calls
             * to the function return the value of the first invocation. The `func` is
             * invoked with the `this` binding and arguments of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var initialize = _.once(createApplication);
             * initialize();
             * initialize();
             * // => `createApplication` is invoked once
             */
            function once(func) {
                return before(2, func);
            }

            /**
             * Creates a function that invokes `func` with its arguments transformed.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Function
             * @param {Function} func The function to wrap.
             * @param {...(Function|Function[])} [transforms=[_.identity]]
             *  The argument transforms.
             * @returns {Function} Returns the new function.
             * @example
             *
             * function doubled(n) {
             *   return n * 2;
             * }
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var func = _.overArgs(function(x, y) {
             *   return [x, y];
             * }, [square, doubled]);
             *
             * func(9, 3);
             * // => [81, 6]
             *
             * func(10, 5);
             * // => [100, 10]
             */
            var overArgs = castRest(function (func, transforms) {
                transforms =
                    transforms.length == 1 && isArray(transforms[0])
                        ? arrayMap(transforms[0], baseUnary(getIteratee()))
                        : arrayMap(
                              baseFlatten(transforms, 1),
                              baseUnary(getIteratee())
                          );

                var funcsLength = transforms.length;
                return baseRest(function (args) {
                    var index = -1,
                        length = nativeMin(args.length, funcsLength);

                    while (++index < length) {
                        args[index] = transforms[index].call(this, args[index]);
                    }
                    return apply(func, this, args);
                });
            });

            /**
             * Creates a function that invokes `func` with `partials` prepended to the
             * arguments it receives. This method is like `_.bind` except it does **not**
             * alter the `this` binding.
             *
             * The `_.partial.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 0.2.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var sayHelloTo = _.partial(greet, 'hello');
             * sayHelloTo('fred');
             * // => 'hello fred'
             *
             * // Partially applied with placeholders.
             * var greetFred = _.partial(greet, _, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             */
            var partial = baseRest(function (func, partials) {
                var holders = replaceHolders(partials, getHolder(partial));
                return createWrap(
                    func,
                    WRAP_PARTIAL_FLAG,
                    undefined$1,
                    partials,
                    holders
                );
            });

            /**
             * This method is like `_.partial` except that partially applied arguments
             * are appended to the arguments it receives.
             *
             * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var greetFred = _.partialRight(greet, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             *
             * // Partially applied with placeholders.
             * var sayHelloTo = _.partialRight(greet, 'hello', _);
             * sayHelloTo('fred');
             * // => 'hello fred'
             */
            var partialRight = baseRest(function (func, partials) {
                var holders = replaceHolders(partials, getHolder(partialRight));
                return createWrap(
                    func,
                    WRAP_PARTIAL_RIGHT_FLAG,
                    undefined$1,
                    partials,
                    holders
                );
            });

            /**
             * Creates a function that invokes `func` with arguments arranged according
             * to the specified `indexes` where the argument value at the first index is
             * provided as the first argument, the argument value at the second index is
             * provided as the second argument, and so on.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to rearrange arguments for.
             * @param {...(number|number[])} indexes The arranged argument indexes.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var rearged = _.rearg(function(a, b, c) {
             *   return [a, b, c];
             * }, [2, 0, 1]);
             *
             * rearged('b', 'c', 'a')
             * // => ['a', 'b', 'c']
             */
            var rearg = flatRest(function (func, indexes) {
                return createWrap(
                    func,
                    WRAP_REARG_FLAG,
                    undefined$1,
                    undefined$1,
                    undefined$1,
                    indexes
                );
            });

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * created function and arguments from `start` and beyond provided as
             * an array.
             *
             * **Note:** This method is based on the
             * [rest parameter](https://mdn.io/rest_parameters).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.rest(function(what, names) {
             *   return what + ' ' + _.initial(names).join(', ') +
             *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
             * });
             *
             * say('hello', 'fred', 'barney', 'pebbles');
             * // => 'hello fred, barney, & pebbles'
             */
            function rest(func, start) {
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                start = start === undefined$1 ? start : toInteger(start);
                return baseRest(func, start);
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * create function and an array of arguments much like
             * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
             *
             * **Note:** This method is based on the
             * [spread operator](https://mdn.io/spread_operator).
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Function
             * @param {Function} func The function to spread arguments over.
             * @param {number} [start=0] The start position of the spread.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.spread(function(who, what) {
             *   return who + ' says ' + what;
             * });
             *
             * say(['fred', 'hello']);
             * // => 'fred says hello'
             *
             * var numbers = Promise.all([
             *   Promise.resolve(40),
             *   Promise.resolve(36)
             * ]);
             *
             * numbers.then(_.spread(function(x, y) {
             *   return x + y;
             * }));
             * // => a Promise of 76
             */
            function spread(func, start) {
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                start = start == null ? 0 : nativeMax(toInteger(start), 0);
                return baseRest(function (args) {
                    var array = args[start],
                        otherArgs = castSlice(args, 0, start);

                    if (array) {
                        arrayPush(otherArgs, array);
                    }
                    return apply(func, this, otherArgs);
                });
            }

            /**
             * Creates a throttled function that only invokes `func` at most once per
             * every `wait` milliseconds. The throttled function comes with a `cancel`
             * method to cancel delayed `func` invocations and a `flush` method to
             * immediately invoke them. Provide `options` to indicate whether `func`
             * should be invoked on the leading and/or trailing edge of the `wait`
             * timeout. The `func` is invoked with the last arguments provided to the
             * throttled function. Subsequent calls to the throttled function return the
             * result of the last `func` invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the throttled function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.throttle` and `_.debounce`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to throttle.
             * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=true]
             *  Specify invoking on the leading edge of the timeout.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new throttled function.
             * @example
             *
             * // Avoid excessively updating the position while scrolling.
             * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
             *
             * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
             * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
             * jQuery(element).on('click', throttled);
             *
             * // Cancel the trailing throttled invocation.
             * jQuery(window).on('popstate', throttled.cancel);
             */
            function throttle(func, wait, options) {
                var leading = true,
                    trailing = true;

                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                if (isObject(options)) {
                    leading =
                        'leading' in options ? !!options.leading : leading;
                    trailing =
                        'trailing' in options ? !!options.trailing : trailing;
                }
                return debounce(func, wait, {
                    leading: leading,
                    maxWait: wait,
                    trailing: trailing,
                });
            }

            /**
             * Creates a function that accepts up to one argument, ignoring any
             * additional arguments.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.unary(parseInt));
             * // => [6, 8, 10]
             */
            function unary(func) {
                return ary(func, 1);
            }

            /**
             * Creates a function that provides `value` to `wrapper` as its first
             * argument. Any additional arguments provided to the function are appended
             * to those provided to the `wrapper`. The wrapper is invoked with the `this`
             * binding of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {*} value The value to wrap.
             * @param {Function} [wrapper=identity] The wrapper function.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var p = _.wrap(_.escape, function(func, text) {
             *   return '<p>' + func(text) + '</p>';
             * });
             *
             * p('fred, barney, & pebbles');
             * // => '<p>fred, barney, &amp; pebbles</p>'
             */
            function wrap(value, wrapper) {
                return partial(castFunction(wrapper), value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Casts `value` as an array if it's not one.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Lang
             * @param {*} value The value to inspect.
             * @returns {Array} Returns the cast array.
             * @example
             *
             * _.castArray(1);
             * // => [1]
             *
             * _.castArray({ 'a': 1 });
             * // => [{ 'a': 1 }]
             *
             * _.castArray('abc');
             * // => ['abc']
             *
             * _.castArray(null);
             * // => [null]
             *
             * _.castArray(undefined);
             * // => [undefined]
             *
             * _.castArray();
             * // => []
             *
             * var array = [1, 2, 3];
             * console.log(_.castArray(array) === array);
             * // => true
             */
            function castArray() {
                if (!arguments.length) {
                    return [];
                }
                var value = arguments[0];
                return isArray(value) ? value : [value];
            }

            /**
             * Creates a shallow clone of `value`.
             *
             * **Note:** This method is loosely based on the
             * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
             * and supports cloning arrays, array buffers, booleans, date objects, maps,
             * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
             * arrays. The own enumerable properties of `arguments` objects are cloned
             * as plain objects. An empty object is returned for uncloneable values such
             * as error objects, functions, DOM nodes, and WeakMaps.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to clone.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeep
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var shallow = _.clone(objects);
             * console.log(shallow[0] === objects[0]);
             * // => true
             */
            function clone(value) {
                return baseClone(value, CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.clone` except that it accepts `customizer` which
             * is invoked to produce the cloned value. If `customizer` returns `undefined`,
             * cloning is handled by the method instead. The `customizer` is invoked with
             * up to four arguments; (value [, index|key, object, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeepWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(false);
             *   }
             * }
             *
             * var el = _.cloneWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 0
             */
            function cloneWith(value, customizer) {
                customizer =
                    typeof customizer == 'function' ? customizer : undefined$1;
                return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
            }

            /**
             * This method is like `_.clone` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @returns {*} Returns the deep cloned value.
             * @see _.clone
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var deep = _.cloneDeep(objects);
             * console.log(deep[0] === objects[0]);
             * // => false
             */
            function cloneDeep(value) {
                return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.cloneWith` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the deep cloned value.
             * @see _.cloneWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(true);
             *   }
             * }
             *
             * var el = _.cloneDeepWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 20
             */
            function cloneDeepWith(value, customizer) {
                customizer =
                    typeof customizer == 'function' ? customizer : undefined$1;
                return baseClone(
                    value,
                    CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG,
                    customizer
                );
            }

            /**
             * Checks if `object` conforms to `source` by invoking the predicate
             * properties of `source` with the corresponding property values of `object`.
             *
             * **Note:** This method is equivalent to `_.conforms` when `source` is
             * partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
             * // => true
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
             * // => false
             */
            function conformsTo(object, source) {
                return (
                    source == null ||
                    baseConformsTo(object, source, keys(source))
                );
            }

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
                return value === other || (value !== value && other !== other);
            }

            /**
             * Checks if `value` is greater than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             * @see _.lt
             * @example
             *
             * _.gt(3, 1);
             * // => true
             *
             * _.gt(3, 3);
             * // => false
             *
             * _.gt(1, 3);
             * // => false
             */
            var gt = createRelationalOperation(baseGt);

            /**
             * Checks if `value` is greater than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than or equal to
             *  `other`, else `false`.
             * @see _.lte
             * @example
             *
             * _.gte(3, 1);
             * // => true
             *
             * _.gte(3, 3);
             * // => true
             *
             * _.gte(1, 3);
             * // => false
             */
            var gte = createRelationalOperation(function (value, other) {
                return value >= other;
            });

            /**
             * Checks if `value` is likely an `arguments` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             *  else `false`.
             * @example
             *
             * _.isArguments(function() { return arguments; }());
             * // => true
             *
             * _.isArguments([1, 2, 3]);
             * // => false
             */
            var isArguments = baseIsArguments(
                (function () {
                    return arguments;
                })()
            )
                ? baseIsArguments
                : function (value) {
                      return (
                          isObjectLike(value) &&
                          hasOwnProperty.call(value, 'callee') &&
                          !propertyIsEnumerable.call(value, 'callee')
                      );
                  };

            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray = Array.isArray;

            /**
             * Checks if `value` is classified as an `ArrayBuffer` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             * @example
             *
             * _.isArrayBuffer(new ArrayBuffer(2));
             * // => true
             *
             * _.isArrayBuffer(new Array(2));
             * // => false
             */
            var isArrayBuffer = nodeIsArrayBuffer
                ? baseUnary(nodeIsArrayBuffer)
                : baseIsArrayBuffer;

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike(value) {
                return (
                    value != null &&
                    isLength(value.length) &&
                    !isFunction(value)
                );
            }

            /**
             * This method is like `_.isArrayLike` except that it also checks if `value`
             * is an object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array-like object,
             *  else `false`.
             * @example
             *
             * _.isArrayLikeObject([1, 2, 3]);
             * // => true
             *
             * _.isArrayLikeObject(document.body.children);
             * // => true
             *
             * _.isArrayLikeObject('abc');
             * // => false
             *
             * _.isArrayLikeObject(_.noop);
             * // => false
             */
            function isArrayLikeObject(value) {
                return isObjectLike(value) && isArrayLike(value);
            }

            /**
             * Checks if `value` is classified as a boolean primitive or object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
             * @example
             *
             * _.isBoolean(false);
             * // => true
             *
             * _.isBoolean(null);
             * // => false
             */
            function isBoolean(value) {
                return (
                    value === true ||
                    value === false ||
                    (isObjectLike(value) && baseGetTag(value) == boolTag)
                );
            }

            /**
             * Checks if `value` is a buffer.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
             * @example
             *
             * _.isBuffer(new Buffer(2));
             * // => true
             *
             * _.isBuffer(new Uint8Array(2));
             * // => false
             */
            var isBuffer = nativeIsBuffer || stubFalse;

            /**
             * Checks if `value` is classified as a `Date` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             * @example
             *
             * _.isDate(new Date);
             * // => true
             *
             * _.isDate('Mon April 23 2012');
             * // => false
             */
            var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

            /**
             * Checks if `value` is likely a DOM element.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
             * @example
             *
             * _.isElement(document.body);
             * // => true
             *
             * _.isElement('<body>');
             * // => false
             */
            function isElement(value) {
                return (
                    isObjectLike(value) &&
                    value.nodeType === 1 &&
                    !isPlainObject(value)
                );
            }

            /**
             * Checks if `value` is an empty object, collection, map, or set.
             *
             * Objects are considered empty if they have no own enumerable string keyed
             * properties.
             *
             * Array-like values such as `arguments` objects, arrays, buffers, strings, or
             * jQuery-like collections are considered empty if they have a `length` of `0`.
             * Similarly, maps and sets are considered empty if they have a `size` of `0`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is empty, else `false`.
             * @example
             *
             * _.isEmpty(null);
             * // => true
             *
             * _.isEmpty(true);
             * // => true
             *
             * _.isEmpty(1);
             * // => true
             *
             * _.isEmpty([1, 2, 3]);
             * // => false
             *
             * _.isEmpty({ 'a': 1 });
             * // => false
             */
            function isEmpty(value) {
                if (value == null) {
                    return true;
                }
                if (
                    isArrayLike(value) &&
                    (isArray(value) ||
                        typeof value == 'string' ||
                        typeof value.splice == 'function' ||
                        isBuffer(value) ||
                        isTypedArray(value) ||
                        isArguments(value))
                ) {
                    return !value.length;
                }
                var tag = getTag(value);
                if (tag == mapTag || tag == setTag) {
                    return !value.size;
                }
                if (isPrototype(value)) {
                    return !baseKeys(value).length;
                }
                for (var key in value) {
                    if (hasOwnProperty.call(value, key)) {
                        return false;
                    }
                }
                return true;
            }

            /**
             * Performs a deep comparison between two values to determine if they are
             * equivalent.
             *
             * **Note:** This method supports comparing arrays, array buffers, booleans,
             * date objects, error objects, maps, numbers, `Object` objects, regexes,
             * sets, strings, symbols, and typed arrays. `Object` objects are compared
             * by their own, not inherited, enumerable properties. Functions and DOM
             * nodes are compared by strict equality, i.e. `===`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.isEqual(object, other);
             * // => true
             *
             * object === other;
             * // => false
             */
            function isEqual(value, other) {
                return baseIsEqual(value, other);
            }

            /**
             * This method is like `_.isEqual` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with up to
             * six arguments: (objValue, othValue [, index|key, object, other, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, othValue) {
             *   if (isGreeting(objValue) && isGreeting(othValue)) {
             *     return true;
             *   }
             * }
             *
             * var array = ['hello', 'goodbye'];
             * var other = ['hi', 'goodbye'];
             *
             * _.isEqualWith(array, other, customizer);
             * // => true
             */
            function isEqualWith(value, other, customizer) {
                customizer =
                    typeof customizer == 'function' ? customizer : undefined$1;
                var result = customizer
                    ? customizer(value, other)
                    : undefined$1;
                return result === undefined$1
                    ? baseIsEqual(value, other, undefined$1, customizer)
                    : !!result;
            }

            /**
             * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
             * `SyntaxError`, `TypeError`, or `URIError` object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
             * @example
             *
             * _.isError(new Error);
             * // => true
             *
             * _.isError(Error);
             * // => false
             */
            function isError(value) {
                if (!isObjectLike(value)) {
                    return false;
                }
                var tag = baseGetTag(value);
                return (
                    tag == errorTag ||
                    tag == domExcTag ||
                    (typeof value.message == 'string' &&
                        typeof value.name == 'string' &&
                        !isPlainObject(value))
                );
            }

            /**
             * Checks if `value` is a finite primitive number.
             *
             * **Note:** This method is based on
             * [`Number.isFinite`](https://mdn.io/Number/isFinite).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
             * @example
             *
             * _.isFinite(3);
             * // => true
             *
             * _.isFinite(Number.MIN_VALUE);
             * // => true
             *
             * _.isFinite(Infinity);
             * // => false
             *
             * _.isFinite('3');
             * // => false
             */
            function isFinite(value) {
                return typeof value == 'number' && nativeIsFinite(value);
            }

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction(value) {
                if (!isObject(value)) {
                    return false;
                }
                // The use of `Object#toString` avoids issues with the `typeof` operator
                // in Safari 9 which returns 'object' for typed arrays and other constructors.
                var tag = baseGetTag(value);
                return (
                    tag == funcTag ||
                    tag == genTag ||
                    tag == asyncTag ||
                    tag == proxyTag
                );
            }

            /**
             * Checks if `value` is an integer.
             *
             * **Note:** This method is based on
             * [`Number.isInteger`](https://mdn.io/Number/isInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
             * @example
             *
             * _.isInteger(3);
             * // => true
             *
             * _.isInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isInteger(Infinity);
             * // => false
             *
             * _.isInteger('3');
             * // => false
             */
            function isInteger(value) {
                return typeof value == 'number' && value == toInteger(value);
            }

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength(value) {
                return (
                    typeof value == 'number' &&
                    value > -1 &&
                    value % 1 == 0 &&
                    value <= MAX_SAFE_INTEGER
                );
            }

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject(value) {
                var type = typeof value;
                return (
                    value != null && (type == 'object' || type == 'function')
                );
            }

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
                return value != null && typeof value == 'object';
            }

            /**
             * Checks if `value` is classified as a `Map` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             * @example
             *
             * _.isMap(new Map);
             * // => true
             *
             * _.isMap(new WeakMap);
             * // => false
             */
            var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

            /**
             * Performs a partial deep comparison between `object` and `source` to
             * determine if `object` contains equivalent property values.
             *
             * **Note:** This method is equivalent to `_.matches` when `source` is
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.isMatch(object, { 'b': 2 });
             * // => true
             *
             * _.isMatch(object, { 'b': 1 });
             * // => false
             */
            function isMatch(object, source) {
                return (
                    object === source ||
                    baseIsMatch(object, source, getMatchData(source))
                );
            }

            /**
             * This method is like `_.isMatch` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with five
             * arguments: (objValue, srcValue, index|key, object, source).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, srcValue) {
             *   if (isGreeting(objValue) && isGreeting(srcValue)) {
             *     return true;
             *   }
             * }
             *
             * var object = { 'greeting': 'hello' };
             * var source = { 'greeting': 'hi' };
             *
             * _.isMatchWith(object, source, customizer);
             * // => true
             */
            function isMatchWith(object, source, customizer) {
                customizer =
                    typeof customizer == 'function' ? customizer : undefined$1;
                return baseIsMatch(
                    object,
                    source,
                    getMatchData(source),
                    customizer
                );
            }

            /**
             * Checks if `value` is `NaN`.
             *
             * **Note:** This method is based on
             * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
             * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
             * `undefined` and other non-number values.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
             * @example
             *
             * _.isNaN(NaN);
             * // => true
             *
             * _.isNaN(new Number(NaN));
             * // => true
             *
             * isNaN(undefined);
             * // => true
             *
             * _.isNaN(undefined);
             * // => false
             */
            function isNaN(value) {
                // An `NaN` primitive is the only value that is not equal to itself.
                // Perform the `toStringTag` check first to avoid errors with some
                // ActiveX objects in IE.
                return isNumber(value) && value != +value;
            }

            /**
             * Checks if `value` is a pristine native function.
             *
             * **Note:** This method can't reliably detect native functions in the presence
             * of the core-js package because core-js circumvents this kind of detection.
             * Despite multiple requests, the core-js maintainer has made it clear: any
             * attempt to fix the detection will be obstructed. As a result, we're left
             * with little choice but to throw an error. Unfortunately, this also affects
             * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
             * which rely on core-js.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             * @example
             *
             * _.isNative(Array.prototype.push);
             * // => true
             *
             * _.isNative(_);
             * // => false
             */
            function isNative(value) {
                if (isMaskable(value)) {
                    throw new Error(CORE_ERROR_TEXT);
                }
                return baseIsNative(value);
            }

            /**
             * Checks if `value` is `null`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
             * @example
             *
             * _.isNull(null);
             * // => true
             *
             * _.isNull(void 0);
             * // => false
             */
            function isNull(value) {
                return value === null;
            }

            /**
             * Checks if `value` is `null` or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
             * @example
             *
             * _.isNil(null);
             * // => true
             *
             * _.isNil(void 0);
             * // => true
             *
             * _.isNil(NaN);
             * // => false
             */
            function isNil(value) {
                return value == null;
            }

            /**
             * Checks if `value` is classified as a `Number` primitive or object.
             *
             * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
             * classified as numbers, use the `_.isFinite` method.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a number, else `false`.
             * @example
             *
             * _.isNumber(3);
             * // => true
             *
             * _.isNumber(Number.MIN_VALUE);
             * // => true
             *
             * _.isNumber(Infinity);
             * // => true
             *
             * _.isNumber('3');
             * // => false
             */
            function isNumber(value) {
                return (
                    typeof value == 'number' ||
                    (isObjectLike(value) && baseGetTag(value) == numberTag)
                );
            }

            /**
             * Checks if `value` is a plain object, that is, an object created by the
             * `Object` constructor or one with a `[[Prototype]]` of `null`.
             *
             * @static
             * @memberOf _
             * @since 0.8.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * _.isPlainObject(new Foo);
             * // => false
             *
             * _.isPlainObject([1, 2, 3]);
             * // => false
             *
             * _.isPlainObject({ 'x': 0, 'y': 0 });
             * // => true
             *
             * _.isPlainObject(Object.create(null));
             * // => true
             */
            function isPlainObject(value) {
                if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                    return false;
                }
                var proto = getPrototype(value);
                if (proto === null) {
                    return true;
                }
                var Ctor =
                    hasOwnProperty.call(proto, 'constructor') &&
                    proto.constructor;
                return (
                    typeof Ctor == 'function' &&
                    Ctor instanceof Ctor &&
                    funcToString.call(Ctor) == objectCtorString
                );
            }

            /**
             * Checks if `value` is classified as a `RegExp` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             * @example
             *
             * _.isRegExp(/abc/);
             * // => true
             *
             * _.isRegExp('/abc/');
             * // => false
             */
            var isRegExp = nodeIsRegExp
                ? baseUnary(nodeIsRegExp)
                : baseIsRegExp;

            /**
             * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
             * double precision number which isn't the result of a rounded unsafe integer.
             *
             * **Note:** This method is based on
             * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
             * @example
             *
             * _.isSafeInteger(3);
             * // => true
             *
             * _.isSafeInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isSafeInteger(Infinity);
             * // => false
             *
             * _.isSafeInteger('3');
             * // => false
             */
            function isSafeInteger(value) {
                return (
                    isInteger(value) &&
                    value >= -MAX_SAFE_INTEGER &&
                    value <= MAX_SAFE_INTEGER
                );
            }

            /**
             * Checks if `value` is classified as a `Set` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             * @example
             *
             * _.isSet(new Set);
             * // => true
             *
             * _.isSet(new WeakSet);
             * // => false
             */
            var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

            /**
             * Checks if `value` is classified as a `String` primitive or object.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a string, else `false`.
             * @example
             *
             * _.isString('abc');
             * // => true
             *
             * _.isString(1);
             * // => false
             */
            function isString(value) {
                return (
                    typeof value == 'string' ||
                    (!isArray(value) &&
                        isObjectLike(value) &&
                        baseGetTag(value) == stringTag)
                );
            }

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol(value) {
                return (
                    typeof value == 'symbol' ||
                    (isObjectLike(value) && baseGetTag(value) == symbolTag)
                );
            }

            /**
             * Checks if `value` is classified as a typed array.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             * @example
             *
             * _.isTypedArray(new Uint8Array);
             * // => true
             *
             * _.isTypedArray([]);
             * // => false
             */
            var isTypedArray = nodeIsTypedArray
                ? baseUnary(nodeIsTypedArray)
                : baseIsTypedArray;

            /**
             * Checks if `value` is `undefined`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
             * @example
             *
             * _.isUndefined(void 0);
             * // => true
             *
             * _.isUndefined(null);
             * // => false
             */
            function isUndefined(value) {
                return value === undefined$1;
            }

            /**
             * Checks if `value` is classified as a `WeakMap` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
             * @example
             *
             * _.isWeakMap(new WeakMap);
             * // => true
             *
             * _.isWeakMap(new Map);
             * // => false
             */
            function isWeakMap(value) {
                return isObjectLike(value) && getTag(value) == weakMapTag;
            }

            /**
             * Checks if `value` is classified as a `WeakSet` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
             * @example
             *
             * _.isWeakSet(new WeakSet);
             * // => true
             *
             * _.isWeakSet(new Set);
             * // => false
             */
            function isWeakSet(value) {
                return isObjectLike(value) && baseGetTag(value) == weakSetTag;
            }

            /**
             * Checks if `value` is less than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             * @see _.gt
             * @example
             *
             * _.lt(1, 3);
             * // => true
             *
             * _.lt(3, 3);
             * // => false
             *
             * _.lt(3, 1);
             * // => false
             */
            var lt = createRelationalOperation(baseLt);

            /**
             * Checks if `value` is less than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than or equal to
             *  `other`, else `false`.
             * @see _.gte
             * @example
             *
             * _.lte(1, 3);
             * // => true
             *
             * _.lte(3, 3);
             * // => true
             *
             * _.lte(3, 1);
             * // => false
             */
            var lte = createRelationalOperation(function (value, other) {
                return value <= other;
            });

            /**
             * Converts `value` to an array.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Array} Returns the converted array.
             * @example
             *
             * _.toArray({ 'a': 1, 'b': 2 });
             * // => [1, 2]
             *
             * _.toArray('abc');
             * // => ['a', 'b', 'c']
             *
             * _.toArray(1);
             * // => []
             *
             * _.toArray(null);
             * // => []
             */
            function toArray(value) {
                if (!value) {
                    return [];
                }
                if (isArrayLike(value)) {
                    return isString(value)
                        ? stringToArray(value)
                        : copyArray(value);
                }
                if (symIterator && value[symIterator]) {
                    return iteratorToArray(value[symIterator]());
                }
                var tag = getTag(value),
                    func =
                        tag == mapTag
                            ? mapToArray
                            : tag == setTag
                            ? setToArray
                            : values;

                return func(value);
            }

            /**
             * Converts `value` to a finite number.
             *
             * @static
             * @memberOf _
             * @since 4.12.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted number.
             * @example
             *
             * _.toFinite(3.2);
             * // => 3.2
             *
             * _.toFinite(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toFinite(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toFinite('3.2');
             * // => 3.2
             */
            function toFinite(value) {
                if (!value) {
                    return value === 0 ? value : 0;
                }
                value = toNumber(value);
                if (value === INFINITY || value === -INFINITY) {
                    var sign = value < 0 ? -1 : 1;
                    return sign * MAX_INTEGER;
                }
                return value === value ? value : 0;
            }

            /**
             * Converts `value` to an integer.
             *
             * **Note:** This method is loosely based on
             * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toInteger(3.2);
             * // => 3
             *
             * _.toInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toInteger(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toInteger('3.2');
             * // => 3
             */
            function toInteger(value) {
                var result = toFinite(value),
                    remainder = result % 1;

                return result === result
                    ? remainder
                        ? result - remainder
                        : result
                    : 0;
            }

            /**
             * Converts `value` to an integer suitable for use as the length of an
             * array-like object.
             *
             * **Note:** This method is based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toLength(3.2);
             * // => 3
             *
             * _.toLength(Number.MIN_VALUE);
             * // => 0
             *
             * _.toLength(Infinity);
             * // => 4294967295
             *
             * _.toLength('3.2');
             * // => 3
             */
            function toLength(value) {
                return value
                    ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH)
                    : 0;
            }

            /**
             * Converts `value` to a number.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             * @example
             *
             * _.toNumber(3.2);
             * // => 3.2
             *
             * _.toNumber(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toNumber(Infinity);
             * // => Infinity
             *
             * _.toNumber('3.2');
             * // => 3.2
             */
            function toNumber(value) {
                if (typeof value == 'number') {
                    return value;
                }
                if (isSymbol(value)) {
                    return NAN;
                }
                if (isObject(value)) {
                    var other =
                        typeof value.valueOf == 'function'
                            ? value.valueOf()
                            : value;
                    value = isObject(other) ? other + '' : other;
                }
                if (typeof value != 'string') {
                    return value === 0 ? value : +value;
                }
                value = value.replace(reTrim, '');
                var isBinary = reIsBinary.test(value);
                return isBinary || reIsOctal.test(value)
                    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                    : reIsBadHex.test(value)
                    ? NAN
                    : +value;
            }

            /**
             * Converts `value` to a plain object flattening inherited enumerable string
             * keyed properties of `value` to own properties of the plain object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Object} Returns the converted plain object.
             * @example
             *
             * function Foo() {
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.assign({ 'a': 1 }, new Foo);
             * // => { 'a': 1, 'b': 2 }
             *
             * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
             * // => { 'a': 1, 'b': 2, 'c': 3 }
             */
            function toPlainObject(value) {
                return copyObject(value, keysIn(value));
            }

            /**
             * Converts `value` to a safe integer. A safe integer can be compared and
             * represented correctly.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toSafeInteger(3.2);
             * // => 3
             *
             * _.toSafeInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toSafeInteger(Infinity);
             * // => 9007199254740991
             *
             * _.toSafeInteger('3.2');
             * // => 3
             */
            function toSafeInteger(value) {
                return value
                    ? baseClamp(
                          toInteger(value),
                          -MAX_SAFE_INTEGER,
                          MAX_SAFE_INTEGER
                      )
                    : value === 0
                    ? value
                    : 0;
            }

            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */
            function toString(value) {
                return value == null ? '' : baseToString(value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Assigns own enumerable string keyed properties of source objects to the
             * destination object. Source objects are applied from left to right.
             * Subsequent sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object` and is loosely based on
             * [`Object.assign`](https://mdn.io/Object/assign).
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assignIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assign({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'c': 3 }
             */
            var assign = createAssigner(function (object, source) {
                if (isPrototype(source) || isArrayLike(source)) {
                    copyObject(source, keys(source), object);
                    return;
                }
                for (var key in source) {
                    if (hasOwnProperty.call(source, key)) {
                        assignValue(object, key, source[key]);
                    }
                }
            });

            /**
             * This method is like `_.assign` except that it iterates over own and
             * inherited source properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extend
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assign
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assignIn({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
             */
            var assignIn = createAssigner(function (object, source) {
                copyObject(source, keysIn(source), object);
            });

            /**
             * This method is like `_.assignIn` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extendWith
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignInWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignInWith = createAssigner(function (
                object,
                source,
                srcIndex,
                customizer
            ) {
                copyObject(source, keysIn(source), object, customizer);
            });

            /**
             * This method is like `_.assign` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignInWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignWith = createAssigner(function (
                object,
                source,
                srcIndex,
                customizer
            ) {
                copyObject(source, keys(source), object, customizer);
            });

            /**
             * Creates an array of values corresponding to `paths` of `object`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Array} Returns the picked values.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _.at(object, ['a[0].b.c', 'a[1]']);
             * // => [3, 4]
             */
            var at = flatRest(baseAt);

            /**
             * Creates an object that inherits from the `prototype` object. If a
             * `properties` object is given, its own enumerable string keyed properties
             * are assigned to the created object.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Object
             * @param {Object} prototype The object to inherit from.
             * @param {Object} [properties] The properties to assign to the object.
             * @returns {Object} Returns the new object.
             * @example
             *
             * function Shape() {
             *   this.x = 0;
             *   this.y = 0;
             * }
             *
             * function Circle() {
             *   Shape.call(this);
             * }
             *
             * Circle.prototype = _.create(Shape.prototype, {
             *   'constructor': Circle
             * });
             *
             * var circle = new Circle;
             * circle instanceof Circle;
             * // => true
             *
             * circle instanceof Shape;
             * // => true
             */
            function create(prototype, properties) {
                var result = baseCreate(prototype);
                return properties == null
                    ? result
                    : baseAssign(result, properties);
            }

            /**
             * Assigns own and inherited enumerable string keyed properties of source
             * objects to the destination object for all destination properties that
             * resolve to `undefined`. Source objects are applied from left to right.
             * Once a property is set, additional values of the same property are ignored.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaultsDeep
             * @example
             *
             * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var defaults = baseRest(function (object, sources) {
                object = Object(object);

                var index = -1;
                var length = sources.length;
                var guard = length > 2 ? sources[2] : undefined$1;

                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    length = 1;
                }

                while (++index < length) {
                    var source = sources[index];
                    var props = keysIn(source);
                    var propsIndex = -1;
                    var propsLength = props.length;

                    while (++propsIndex < propsLength) {
                        var key = props[propsIndex];
                        var value = object[key];

                        if (
                            value === undefined$1 ||
                            (eq(value, objectProto[key]) &&
                                !hasOwnProperty.call(object, key))
                        ) {
                            object[key] = source[key];
                        }
                    }
                }

                return object;
            });

            /**
             * This method is like `_.defaults` except that it recursively assigns
             * default properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaults
             * @example
             *
             * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
             * // => { 'a': { 'b': 2, 'c': 3 } }
             */
            var defaultsDeep = baseRest(function (args) {
                args.push(undefined$1, customDefaultsMerge);
                return apply(mergeWith, undefined$1, args);
            });

            /**
             * This method is like `_.find` except that it returns the key of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findKey(users, function(o) { return o.age < 40; });
             * // => 'barney' (iteration order is not guaranteed)
             *
             * // The `_.matches` iteratee shorthand.
             * _.findKey(users, { 'age': 1, 'active': true });
             * // => 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findKey(users, 'active');
             * // => 'barney'
             */
            function findKey(object, predicate) {
                return baseFindKey(
                    object,
                    getIteratee(predicate, 3),
                    baseForOwn
                );
            }

            /**
             * This method is like `_.findKey` except that it iterates over elements of
             * a collection in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findLastKey(users, function(o) { return o.age < 40; });
             * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastKey(users, { 'age': 36, 'active': true });
             * // => 'barney'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastKey(users, 'active');
             * // => 'pebbles'
             */
            function findLastKey(object, predicate) {
                return baseFindKey(
                    object,
                    getIteratee(predicate, 3),
                    baseForOwnRight
                );
            }

            /**
             * Iterates over own and inherited enumerable string keyed properties of an
             * object and invokes `iteratee` for each property. The iteratee is invoked
             * with three arguments: (value, key, object). Iteratee functions may exit
             * iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forInRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forIn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
             */
            function forIn(object, iteratee) {
                return object == null
                    ? object
                    : baseFor(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * This method is like `_.forIn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forInRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
             */
            function forInRight(object, iteratee) {
                return object == null
                    ? object
                    : baseForRight(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * Iterates over own enumerable string keyed properties of an object and
             * invokes `iteratee` for each property. The iteratee is invoked with three
             * arguments: (value, key, object). Iteratee functions may exit iteration
             * early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwnRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forOwn(object, iteratee) {
                return object && baseForOwn(object, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forOwn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwnRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
             */
            function forOwnRight(object, iteratee) {
                return (
                    object && baseForOwnRight(object, getIteratee(iteratee, 3))
                );
            }

            /**
             * Creates an array of function property names from own enumerable properties
             * of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functionsIn
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functions(new Foo);
             * // => ['a', 'b']
             */
            function functions(object) {
                return object == null
                    ? []
                    : baseFunctions(object, keys(object));
            }

            /**
             * Creates an array of function property names from own and inherited
             * enumerable properties of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functions
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functionsIn(new Foo);
             * // => ['a', 'b', 'c']
             */
            function functionsIn(object) {
                return object == null
                    ? []
                    : baseFunctions(object, keysIn(object));
            }

            /**
             * Gets the value at `path` of `object`. If the resolved value is
             * `undefined`, the `defaultValue` is returned in its place.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.get(object, 'a[0].b.c');
             * // => 3
             *
             * _.get(object, ['a', '0', 'b', 'c']);
             * // => 3
             *
             * _.get(object, 'a.b.c', 'default');
             * // => 'default'
             */
            function get(object, path, defaultValue) {
                var result =
                    object == null ? undefined$1 : baseGet(object, path);
                return result === undefined$1 ? defaultValue : result;
            }

            /**
             * Checks if `path` is a direct property of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = { 'a': { 'b': 2 } };
             * var other = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.has(object, 'a');
             * // => true
             *
             * _.has(object, 'a.b');
             * // => true
             *
             * _.has(object, ['a', 'b']);
             * // => true
             *
             * _.has(other, 'a');
             * // => false
             */
            function has(object, path) {
                return object != null && hasPath(object, path, baseHas);
            }

            /**
             * Checks if `path` is a direct or inherited property of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.hasIn(object, 'a');
             * // => true
             *
             * _.hasIn(object, 'a.b');
             * // => true
             *
             * _.hasIn(object, ['a', 'b']);
             * // => true
             *
             * _.hasIn(object, 'b');
             * // => false
             */
            function hasIn(object, path) {
                return object != null && hasPath(object, path, baseHasIn);
            }

            /**
             * Creates an object composed of the inverted keys and values of `object`.
             * If `object` contains duplicate values, subsequent values overwrite
             * property assignments of previous values.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Object
             * @param {Object} object The object to invert.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invert(object);
             * // => { '1': 'c', '2': 'b' }
             */
            var invert = createInverter(function (result, value, key) {
                if (value != null && typeof value.toString != 'function') {
                    value = nativeObjectToString.call(value);
                }

                result[value] = key;
            }, constant(identity));

            /**
             * This method is like `_.invert` except that the inverted object is generated
             * from the results of running each element of `object` thru `iteratee`. The
             * corresponding inverted value of each inverted key is an array of keys
             * responsible for generating the inverted value. The iteratee is invoked
             * with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Object
             * @param {Object} object The object to invert.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invertBy(object);
             * // => { '1': ['a', 'c'], '2': ['b'] }
             *
             * _.invertBy(object, function(value) {
             *   return 'group' + value;
             * });
             * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
             */
            var invertBy = createInverter(function (result, value, key) {
                if (value != null && typeof value.toString != 'function') {
                    value = nativeObjectToString.call(value);
                }

                if (hasOwnProperty.call(result, value)) {
                    result[value].push(key);
                } else {
                    result[value] = [key];
                }
            }, getIteratee);

            /**
             * Invokes the method at `path` of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
             *
             * _.invoke(object, 'a[0].b.c.slice', 1, 3);
             * // => [2, 3]
             */
            var invoke = baseRest(baseInvoke);

            /**
             * Creates an array of the own enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects. See the
             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * for more details.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keys(new Foo);
             * // => ['a', 'b'] (iteration order is not guaranteed)
             *
             * _.keys('hi');
             * // => ['0', '1']
             */
            function keys(object) {
                return isArrayLike(object)
                    ? arrayLikeKeys(object)
                    : baseKeys(object);
            }

            /**
             * Creates an array of the own and inherited enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keysIn(new Foo);
             * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
             */
            function keysIn(object) {
                return isArrayLike(object)
                    ? arrayLikeKeys(object, true)
                    : baseKeysIn(object);
            }

            /**
             * The opposite of `_.mapValues`; this method creates an object with the
             * same values as `object` and keys generated by running each own enumerable
             * string keyed property of `object` thru `iteratee`. The iteratee is invoked
             * with three arguments: (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapValues
             * @example
             *
             * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
             *   return key + value;
             * });
             * // => { 'a1': 1, 'b2': 2 }
             */
            function mapKeys(object, iteratee) {
                var result = {};
                iteratee = getIteratee(iteratee, 3);

                baseForOwn(object, function (value, key, object) {
                    baseAssignValue(
                        result,
                        iteratee(value, key, object),
                        value
                    );
                });
                return result;
            }

            /**
             * Creates an object with the same keys as `object` and values generated
             * by running each own enumerable string keyed property of `object` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapKeys
             * @example
             *
             * var users = {
             *   'fred':    { 'user': 'fred',    'age': 40 },
             *   'pebbles': { 'user': 'pebbles', 'age': 1 }
             * };
             *
             * _.mapValues(users, function(o) { return o.age; });
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             *
             * // The `_.property` iteratee shorthand.
             * _.mapValues(users, 'age');
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             */
            function mapValues(object, iteratee) {
                var result = {};
                iteratee = getIteratee(iteratee, 3);

                baseForOwn(object, function (value, key, object) {
                    baseAssignValue(result, key, iteratee(value, key, object));
                });
                return result;
            }

            /**
             * This method is like `_.assign` except that it recursively merges own and
             * inherited enumerable string keyed properties of source objects into the
             * destination object. Source properties that resolve to `undefined` are
             * skipped if a destination value exists. Array and plain object properties
             * are merged recursively. Other objects and value types are overridden by
             * assignment. Source objects are applied from left to right. Subsequent
             * sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {
             *   'a': [{ 'b': 2 }, { 'd': 4 }]
             * };
             *
             * var other = {
             *   'a': [{ 'c': 3 }, { 'e': 5 }]
             * };
             *
             * _.merge(object, other);
             * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
             */
            var merge = createAssigner(function (object, source, srcIndex) {
                baseMerge(object, source, srcIndex);
            });

            /**
             * This method is like `_.merge` except that it accepts `customizer` which
             * is invoked to produce the merged values of the destination and source
             * properties. If `customizer` returns `undefined`, merging is handled by the
             * method instead. The `customizer` is invoked with six arguments:
             * (objValue, srcValue, key, object, source, stack).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} customizer The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   if (_.isArray(objValue)) {
             *     return objValue.concat(srcValue);
             *   }
             * }
             *
             * var object = { 'a': [1], 'b': [2] };
             * var other = { 'a': [3], 'b': [4] };
             *
             * _.mergeWith(object, other, customizer);
             * // => { 'a': [1, 3], 'b': [2, 4] }
             */
            var mergeWith = createAssigner(function (
                object,
                source,
                srcIndex,
                customizer
            ) {
                baseMerge(object, source, srcIndex, customizer);
            });

            /**
             * The opposite of `_.pick`; this method creates an object composed of the
             * own and inherited enumerable property paths of `object` that are not omitted.
             *
             * **Note:** This method is considerably slower than `_.pick`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to omit.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omit(object, ['a', 'c']);
             * // => { 'b': '2' }
             */
            var omit = flatRest(function (object, paths) {
                var result = {};
                if (object == null) {
                    return result;
                }
                var isDeep = false;
                paths = arrayMap(paths, function (path) {
                    path = castPath(path, object);
                    isDeep || (isDeep = path.length > 1);
                    return path;
                });
                copyObject(object, getAllKeysIn(object), result);
                if (isDeep) {
                    result = baseClone(
                        result,
                        CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
                        customOmitClone
                    );
                }
                var length = paths.length;
                while (length--) {
                    baseUnset(result, paths[length]);
                }
                return result;
            });

            /**
             * The opposite of `_.pickBy`; this method creates an object composed of
             * the own and inherited enumerable string keyed properties of `object` that
             * `predicate` doesn't return truthy for. The predicate is invoked with two
             * arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omitBy(object, _.isNumber);
             * // => { 'b': '2' }
             */
            function omitBy(object, predicate) {
                return pickBy(object, negate(getIteratee(predicate)));
            }

            /**
             * Creates an object composed of the picked `object` properties.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pick(object, ['a', 'c']);
             * // => { 'a': 1, 'c': 3 }
             */
            var pick = flatRest(function (object, paths) {
                return object == null ? {} : basePick(object, paths);
            });

            /**
             * Creates an object composed of the `object` properties `predicate` returns
             * truthy for. The predicate is invoked with two arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pickBy(object, _.isNumber);
             * // => { 'a': 1, 'c': 3 }
             */
            function pickBy(object, predicate) {
                if (object == null) {
                    return {};
                }
                var props = arrayMap(getAllKeysIn(object), function (prop) {
                    return [prop];
                });
                predicate = getIteratee(predicate);
                return basePickBy(object, props, function (value, path) {
                    return predicate(value, path[0]);
                });
            }

            /**
             * This method is like `_.get` except that if the resolved value is a
             * function it's invoked with the `this` binding of its parent object and
             * its result is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to resolve.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
             *
             * _.result(object, 'a[0].b.c1');
             * // => 3
             *
             * _.result(object, 'a[0].b.c2');
             * // => 4
             *
             * _.result(object, 'a[0].b.c3', 'default');
             * // => 'default'
             *
             * _.result(object, 'a[0].b.c3', _.constant('default'));
             * // => 'default'
             */
            function result(object, path, defaultValue) {
                path = castPath(path, object);

                var index = -1,
                    length = path.length;

                // Ensure the loop is entered when path is empty.
                if (!length) {
                    length = 1;
                    object = undefined$1;
                }
                while (++index < length) {
                    var value =
                        object == null
                            ? undefined$1
                            : object[toKey(path[index])];
                    if (value === undefined$1) {
                        index = length;
                        value = defaultValue;
                    }
                    object = isFunction(value) ? value.call(object) : value;
                }
                return object;
            }

            /**
             * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
             * it's created. Arrays are created for missing index properties while objects
             * are created for all other missing properties. Use `_.setWith` to customize
             * `path` creation.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.set(object, 'a[0].b.c', 4);
             * console.log(object.a[0].b.c);
             * // => 4
             *
             * _.set(object, ['x', '0', 'y', 'z'], 5);
             * console.log(object.x[0].y.z);
             * // => 5
             */
            function set(object, path, value) {
                return object == null ? object : baseSet(object, path, value);
            }

            /**
             * This method is like `_.set` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.setWith(object, '[0][1]', 'a', Object);
             * // => { '0': { '1': 'a' } }
             */
            function setWith(object, path, value, customizer) {
                customizer =
                    typeof customizer == 'function' ? customizer : undefined$1;
                return object == null
                    ? object
                    : baseSet(object, path, value, customizer);
            }

            /**
             * Creates an array of own enumerable string keyed-value pairs for `object`
             * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
             * entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entries
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairs(new Foo);
             * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
             */
            var toPairs = createToPairs(keys);

            /**
             * Creates an array of own and inherited enumerable string keyed-value pairs
             * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
             * or set, its entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entriesIn
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairsIn(new Foo);
             * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
             */
            var toPairsIn = createToPairs(keysIn);

            /**
             * An alternative to `_.reduce`; this method transforms `object` to a new
             * `accumulator` object which is the result of running each of its own
             * enumerable string keyed properties thru `iteratee`, with each invocation
             * potentially mutating the `accumulator` object. If `accumulator` is not
             * provided, a new object with the same `[[Prototype]]` will be used. The
             * iteratee is invoked with four arguments: (accumulator, value, key, object).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The custom accumulator value.
             * @returns {*} Returns the accumulated value.
             * @example
             *
             * _.transform([2, 3, 4], function(result, n) {
             *   result.push(n *= n);
             *   return n % 2 == 0;
             * }, []);
             * // => [4, 9]
             *
             * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] }
             */
            function transform(object, iteratee, accumulator) {
                var isArr = isArray(object),
                    isArrLike =
                        isArr || isBuffer(object) || isTypedArray(object);

                iteratee = getIteratee(iteratee, 4);
                if (accumulator == null) {
                    var Ctor = object && object.constructor;
                    if (isArrLike) {
                        accumulator = isArr ? new Ctor() : [];
                    } else if (isObject(object)) {
                        accumulator = isFunction(Ctor)
                            ? baseCreate(getPrototype(object))
                            : {};
                    } else {
                        accumulator = {};
                    }
                }
                (isArrLike ? arrayEach : baseForOwn)(
                    object,
                    function (value, index, object) {
                        return iteratee(accumulator, value, index, object);
                    }
                );
                return accumulator;
            }

            /**
             * Removes the property at `path` of `object`.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 7 } }] };
             * _.unset(object, 'a[0].b.c');
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             *
             * _.unset(object, ['a', '0', 'b', 'c']);
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             */
            function unset(object, path) {
                return object == null ? true : baseUnset(object, path);
            }

            /**
             * This method is like `_.set` except that accepts `updater` to produce the
             * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
             * is invoked with one argument: (value).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.update(object, 'a[0].b.c', function(n) { return n * n; });
             * console.log(object.a[0].b.c);
             * // => 9
             *
             * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
             * console.log(object.x[0].y.z);
             * // => 0
             */
            function update(object, path, updater) {
                return object == null
                    ? object
                    : baseUpdate(object, path, castFunction(updater));
            }

            /**
             * This method is like `_.update` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.updateWith(object, '[0][1]', _.constant('a'), Object);
             * // => { '0': { '1': 'a' } }
             */
            function updateWith(object, path, updater, customizer) {
                customizer =
                    typeof customizer == 'function' ? customizer : undefined$1;
                return object == null
                    ? object
                    : baseUpdate(
                          object,
                          path,
                          castFunction(updater),
                          customizer
                      );
            }

            /**
             * Creates an array of the own enumerable string keyed property values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.values(new Foo);
             * // => [1, 2] (iteration order is not guaranteed)
             *
             * _.values('hi');
             * // => ['h', 'i']
             */
            function values(object) {
                return object == null ? [] : baseValues(object, keys(object));
            }

            /**
             * Creates an array of the own and inherited enumerable string keyed property
             * values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.valuesIn(new Foo);
             * // => [1, 2, 3] (iteration order is not guaranteed)
             */
            function valuesIn(object) {
                return object == null ? [] : baseValues(object, keysIn(object));
            }

            /*------------------------------------------------------------------------*/

            /**
             * Clamps `number` within the inclusive `lower` and `upper` bounds.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Number
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             * @example
             *
             * _.clamp(-10, -5, 5);
             * // => -5
             *
             * _.clamp(10, -5, 5);
             * // => 5
             */
            function clamp(number, lower, upper) {
                if (upper === undefined$1) {
                    upper = lower;
                    lower = undefined$1;
                }
                if (upper !== undefined$1) {
                    upper = toNumber(upper);
                    upper = upper === upper ? upper : 0;
                }
                if (lower !== undefined$1) {
                    lower = toNumber(lower);
                    lower = lower === lower ? lower : 0;
                }
                return baseClamp(toNumber(number), lower, upper);
            }

            /**
             * Checks if `n` is between `start` and up to, but not including, `end`. If
             * `end` is not specified, it's set to `start` with `start` then set to `0`.
             * If `start` is greater than `end` the params are swapped to support
             * negative ranges.
             *
             * @static
             * @memberOf _
             * @since 3.3.0
             * @category Number
             * @param {number} number The number to check.
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             * @see _.range, _.rangeRight
             * @example
             *
             * _.inRange(3, 2, 4);
             * // => true
             *
             * _.inRange(4, 8);
             * // => true
             *
             * _.inRange(4, 2);
             * // => false
             *
             * _.inRange(2, 2);
             * // => false
             *
             * _.inRange(1.2, 2);
             * // => true
             *
             * _.inRange(5.2, 4);
             * // => false
             *
             * _.inRange(-3, -2, -6);
             * // => true
             */
            function inRange(number, start, end) {
                start = toFinite(start);
                if (end === undefined$1) {
                    end = start;
                    start = 0;
                } else {
                    end = toFinite(end);
                }
                number = toNumber(number);
                return baseInRange(number, start, end);
            }

            /**
             * Produces a random number between the inclusive `lower` and `upper` bounds.
             * If only one argument is provided a number between `0` and the given number
             * is returned. If `floating` is `true`, or either `lower` or `upper` are
             * floats, a floating-point number is returned instead of an integer.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Number
             * @param {number} [lower=0] The lower bound.
             * @param {number} [upper=1] The upper bound.
             * @param {boolean} [floating] Specify returning a floating-point number.
             * @returns {number} Returns the random number.
             * @example
             *
             * _.random(0, 5);
             * // => an integer between 0 and 5
             *
             * _.random(5);
             * // => also an integer between 0 and 5
             *
             * _.random(5, true);
             * // => a floating-point number between 0 and 5
             *
             * _.random(1.2, 5.2);
             * // => a floating-point number between 1.2 and 5.2
             */
            function random(lower, upper, floating) {
                if (
                    floating &&
                    typeof floating != 'boolean' &&
                    isIterateeCall(lower, upper, floating)
                ) {
                    upper = floating = undefined$1;
                }
                if (floating === undefined$1) {
                    if (typeof upper == 'boolean') {
                        floating = upper;
                        upper = undefined$1;
                    } else if (typeof lower == 'boolean') {
                        floating = lower;
                        lower = undefined$1;
                    }
                }
                if (lower === undefined$1 && upper === undefined$1) {
                    lower = 0;
                    upper = 1;
                } else {
                    lower = toFinite(lower);
                    if (upper === undefined$1) {
                        upper = lower;
                        lower = 0;
                    } else {
                        upper = toFinite(upper);
                    }
                }
                if (lower > upper) {
                    var temp = lower;
                    lower = upper;
                    upper = temp;
                }
                if (floating || lower % 1 || upper % 1) {
                    var rand = nativeRandom();
                    return nativeMin(
                        lower +
                            rand *
                                (upper -
                                    lower +
                                    freeParseFloat(
                                        '1e-' + ((rand + '').length - 1)
                                    )),
                        upper
                    );
                }
                return baseRandom(lower, upper);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the camel cased string.
             * @example
             *
             * _.camelCase('Foo Bar');
             * // => 'fooBar'
             *
             * _.camelCase('--foo-bar--');
             * // => 'fooBar'
             *
             * _.camelCase('__FOO_BAR__');
             * // => 'fooBar'
             */
            var camelCase = createCompounder(function (result, word, index) {
                word = word.toLowerCase();
                return result + (index ? capitalize(word) : word);
            });

            /**
             * Converts the first character of `string` to upper case and the remaining
             * to lower case.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to capitalize.
             * @returns {string} Returns the capitalized string.
             * @example
             *
             * _.capitalize('FRED');
             * // => 'Fred'
             */
            function capitalize(string) {
                return upperFirst(toString(string).toLowerCase());
            }

            /**
             * Deburrs `string` by converting
             * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
             * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
             * letters to basic Latin letters and removing
             * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to deburr.
             * @returns {string} Returns the deburred string.
             * @example
             *
             * _.deburr('déjà vu');
             * // => 'deja vu'
             */
            function deburr(string) {
                string = toString(string);
                return (
                    string &&
                    string
                        .replace(reLatin, deburrLetter)
                        .replace(reComboMark, '')
                );
            }

            /**
             * Checks if `string` ends with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=string.length] The position to search up to.
             * @returns {boolean} Returns `true` if `string` ends with `target`,
             *  else `false`.
             * @example
             *
             * _.endsWith('abc', 'c');
             * // => true
             *
             * _.endsWith('abc', 'b');
             * // => false
             *
             * _.endsWith('abc', 'b', 2);
             * // => true
             */
            function endsWith(string, target, position) {
                string = toString(string);
                target = baseToString(target);

                var length = string.length;
                position =
                    position === undefined$1
                        ? length
                        : baseClamp(toInteger(position), 0, length);

                var end = position;
                position -= target.length;
                return position >= 0 && string.slice(position, end) == target;
            }

            /**
             * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
             * corresponding HTML entities.
             *
             * **Note:** No other characters are escaped. To escape additional
             * characters use a third-party library like [_he_](https://mths.be/he).
             *
             * Though the ">" character is escaped for symmetry, characters like
             * ">" and "/" don't need escaping in HTML and have no special meaning
             * unless they're part of a tag or unquoted attribute value. See
             * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
             * (under "semi-related fun fact") for more details.
             *
             * When working with HTML you should always
             * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
             * XSS vectors.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escape('fred, barney, & pebbles');
             * // => 'fred, barney, &amp; pebbles'
             */
            function escape(string) {
                string = toString(string);
                return string && reHasUnescapedHtml.test(string)
                    ? string.replace(reUnescapedHtml, escapeHtmlChar)
                    : string;
            }

            /**
             * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
             * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escapeRegExp('[lodash](https://lodash.com/)');
             * // => '\[lodash\]\(https://lodash\.com/\)'
             */
            function escapeRegExp(string) {
                string = toString(string);
                return string && reHasRegExpChar.test(string)
                    ? string.replace(reRegExpChar, '\\$&')
                    : string;
            }

            /**
             * Converts `string` to
             * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the kebab cased string.
             * @example
             *
             * _.kebabCase('Foo Bar');
             * // => 'foo-bar'
             *
             * _.kebabCase('fooBar');
             * // => 'foo-bar'
             *
             * _.kebabCase('__FOO_BAR__');
             * // => 'foo-bar'
             */
            var kebabCase = createCompounder(function (result, word, index) {
                return result + (index ? '-' : '') + word.toLowerCase();
            });

            /**
             * Converts `string`, as space separated words, to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.lowerCase('--Foo-Bar--');
             * // => 'foo bar'
             *
             * _.lowerCase('fooBar');
             * // => 'foo bar'
             *
             * _.lowerCase('__FOO_BAR__');
             * // => 'foo bar'
             */
            var lowerCase = createCompounder(function (result, word, index) {
                return result + (index ? ' ' : '') + word.toLowerCase();
            });

            /**
             * Converts the first character of `string` to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.lowerFirst('Fred');
             * // => 'fred'
             *
             * _.lowerFirst('FRED');
             * // => 'fRED'
             */
            var lowerFirst = createCaseFirst('toLowerCase');

            /**
             * Pads `string` on the left and right sides if it's shorter than `length`.
             * Padding characters are truncated if they can't be evenly divided by `length`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.pad('abc', 8);
             * // => '  abc   '
             *
             * _.pad('abc', 8, '_-');
             * // => '_-abc_-_'
             *
             * _.pad('abc', 3);
             * // => 'abc'
             */
            function pad(string, length, chars) {
                string = toString(string);
                length = toInteger(length);

                var strLength = length ? stringSize(string) : 0;
                if (!length || strLength >= length) {
                    return string;
                }
                var mid = (length - strLength) / 2;
                return (
                    createPadding(nativeFloor(mid), chars) +
                    string +
                    createPadding(nativeCeil(mid), chars)
                );
            }

            /**
             * Pads `string` on the right side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padEnd('abc', 6);
             * // => 'abc   '
             *
             * _.padEnd('abc', 6, '_-');
             * // => 'abc_-_'
             *
             * _.padEnd('abc', 3);
             * // => 'abc'
             */
            function padEnd(string, length, chars) {
                string = toString(string);
                length = toInteger(length);

                var strLength = length ? stringSize(string) : 0;
                return length && strLength < length
                    ? string + createPadding(length - strLength, chars)
                    : string;
            }

            /**
             * Pads `string` on the left side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padStart('abc', 6);
             * // => '   abc'
             *
             * _.padStart('abc', 6, '_-');
             * // => '_-_abc'
             *
             * _.padStart('abc', 3);
             * // => 'abc'
             */
            function padStart(string, length, chars) {
                string = toString(string);
                length = toInteger(length);

                var strLength = length ? stringSize(string) : 0;
                return length && strLength < length
                    ? createPadding(length - strLength, chars) + string
                    : string;
            }

            /**
             * Converts `string` to an integer of the specified radix. If `radix` is
             * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
             * hexadecimal, in which case a `radix` of `16` is used.
             *
             * **Note:** This method aligns with the
             * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category String
             * @param {string} string The string to convert.
             * @param {number} [radix=10] The radix to interpret `value` by.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.parseInt('08');
             * // => 8
             *
             * _.map(['6', '08', '10'], _.parseInt);
             * // => [6, 8, 10]
             */
            function parseInt(string, radix, guard) {
                if (guard || radix == null) {
                    radix = 0;
                } else if (radix) {
                    radix = +radix;
                }
                return nativeParseInt(
                    toString(string).replace(reTrimStart, ''),
                    radix || 0
                );
            }

            /**
             * Repeats the given string `n` times.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to repeat.
             * @param {number} [n=1] The number of times to repeat the string.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the repeated string.
             * @example
             *
             * _.repeat('*', 3);
             * // => '***'
             *
             * _.repeat('abc', 2);
             * // => 'abcabc'
             *
             * _.repeat('abc', 0);
             * // => ''
             */
            function repeat(string, n, guard) {
                if (
                    guard ? isIterateeCall(string, n, guard) : n === undefined$1
                ) {
                    n = 1;
                } else {
                    n = toInteger(n);
                }
                return baseRepeat(toString(string), n);
            }

            /**
             * Replaces matches for `pattern` in `string` with `replacement`.
             *
             * **Note:** This method is based on
             * [`String#replace`](https://mdn.io/String/replace).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to modify.
             * @param {RegExp|string} pattern The pattern to replace.
             * @param {Function|string} replacement The match replacement.
             * @returns {string} Returns the modified string.
             * @example
             *
             * _.replace('Hi Fred', 'Fred', 'Barney');
             * // => 'Hi Barney'
             */
            function replace() {
                var args = arguments,
                    string = toString(args[0]);

                return args.length < 3
                    ? string
                    : string.replace(args[1], args[2]);
            }

            /**
             * Converts `string` to
             * [snake case](https://en.wikipedia.org/wiki/Snake_case).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the snake cased string.
             * @example
             *
             * _.snakeCase('Foo Bar');
             * // => 'foo_bar'
             *
             * _.snakeCase('fooBar');
             * // => 'foo_bar'
             *
             * _.snakeCase('--FOO-BAR--');
             * // => 'foo_bar'
             */
            var snakeCase = createCompounder(function (result, word, index) {
                return result + (index ? '_' : '') + word.toLowerCase();
            });

            /**
             * Splits `string` by `separator`.
             *
             * **Note:** This method is based on
             * [`String#split`](https://mdn.io/String/split).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to split.
             * @param {RegExp|string} separator The separator pattern to split by.
             * @param {number} [limit] The length to truncate results to.
             * @returns {Array} Returns the string segments.
             * @example
             *
             * _.split('a-b-c', '-', 2);
             * // => ['a', 'b']
             */
            function split(string, separator, limit) {
                if (
                    limit &&
                    typeof limit != 'number' &&
                    isIterateeCall(string, separator, limit)
                ) {
                    separator = limit = undefined$1;
                }
                limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
                if (!limit) {
                    return [];
                }
                string = toString(string);
                if (
                    string &&
                    (typeof separator == 'string' ||
                        (separator != null && !isRegExp(separator)))
                ) {
                    separator = baseToString(separator);
                    if (!separator && hasUnicode(string)) {
                        return castSlice(stringToArray(string), 0, limit);
                    }
                }
                return string.split(separator, limit);
            }

            /**
             * Converts `string` to
             * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
             *
             * @static
             * @memberOf _
             * @since 3.1.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the start cased string.
             * @example
             *
             * _.startCase('--foo-bar--');
             * // => 'Foo Bar'
             *
             * _.startCase('fooBar');
             * // => 'Foo Bar'
             *
             * _.startCase('__FOO_BAR__');
             * // => 'FOO BAR'
             */
            var startCase = createCompounder(function (result, word, index) {
                return result + (index ? ' ' : '') + upperFirst(word);
            });

            /**
             * Checks if `string` starts with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=0] The position to search from.
             * @returns {boolean} Returns `true` if `string` starts with `target`,
             *  else `false`.
             * @example
             *
             * _.startsWith('abc', 'a');
             * // => true
             *
             * _.startsWith('abc', 'b');
             * // => false
             *
             * _.startsWith('abc', 'b', 1);
             * // => true
             */
            function startsWith(string, target, position) {
                string = toString(string);
                position =
                    position == null
                        ? 0
                        : baseClamp(toInteger(position), 0, string.length);

                target = baseToString(target);
                return (
                    string.slice(position, position + target.length) == target
                );
            }

            /**
             * Creates a compiled template function that can interpolate data properties
             * in "interpolate" delimiters, HTML-escape interpolated data properties in
             * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
             * properties may be accessed as free variables in the template. If a setting
             * object is given, it takes precedence over `_.templateSettings` values.
             *
             * **Note:** In the development build `_.template` utilizes
             * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
             * for easier debugging.
             *
             * For more information on precompiling templates see
             * [lodash's custom builds documentation](https://lodash.com/custom-builds).
             *
             * For more information on Chrome extension sandboxes see
             * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The template string.
             * @param {Object} [options={}] The options object.
             * @param {RegExp} [options.escape=_.templateSettings.escape]
             *  The HTML "escape" delimiter.
             * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
             *  The "evaluate" delimiter.
             * @param {Object} [options.imports=_.templateSettings.imports]
             *  An object to import into the template as free variables.
             * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
             *  The "interpolate" delimiter.
             * @param {string} [options.sourceURL='lodash.templateSources[n]']
             *  The sourceURL of the compiled template.
             * @param {string} [options.variable='obj']
             *  The data object variable name.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the compiled template function.
             * @example
             *
             * // Use the "interpolate" delimiter to create a compiled template.
             * var compiled = _.template('hello <%= user %>!');
             * compiled({ 'user': 'fred' });
             * // => 'hello fred!'
             *
             * // Use the HTML "escape" delimiter to escape data property values.
             * var compiled = _.template('<b><%- value %></b>');
             * compiled({ 'value': '<script>' });
             * // => '<b>&lt;script&gt;</b>'
             *
             * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
             * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the internal `print` function in "evaluate" delimiters.
             * var compiled = _.template('<% print("hello " + user); %>!');
             * compiled({ 'user': 'barney' });
             * // => 'hello barney!'
             *
             * // Use the ES template literal delimiter as an "interpolate" delimiter.
             * // Disable support by replacing the "interpolate" delimiter.
             * var compiled = _.template('hello ${ user }!');
             * compiled({ 'user': 'pebbles' });
             * // => 'hello pebbles!'
             *
             * // Use backslashes to treat delimiters as plain text.
             * var compiled = _.template('<%= "\\<%- value %\\>" %>');
             * compiled({ 'value': 'ignored' });
             * // => '<%- value %>'
             *
             * // Use the `imports` option to import `jQuery` as `jq`.
             * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
             * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the `sourceURL` option to specify a custom sourceURL for the template.
             * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
             * compiled(data);
             * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
             *
             * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
             * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
             * compiled.source;
             * // => function(data) {
             * //   var __t, __p = '';
             * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
             * //   return __p;
             * // }
             *
             * // Use custom template delimiters.
             * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
             * var compiled = _.template('hello {{ user }}!');
             * compiled({ 'user': 'mustache' });
             * // => 'hello mustache!'
             *
             * // Use the `source` property to inline compiled templates for meaningful
             * // line numbers in error messages and stack traces.
             * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
             *   var JST = {\
             *     "main": ' + _.template(mainText).source + '\
             *   };\
             * ');
             */
            function template(string, options, guard) {
                // Based on John Resig's `tmpl` implementation
                // (http://ejohn.org/blog/javascript-micro-templating/)
                // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                var settings = lodash.templateSettings;

                if (guard && isIterateeCall(string, options, guard)) {
                    options = undefined$1;
                }
                string = toString(string);
                options = assignInWith(
                    {},
                    options,
                    settings,
                    customDefaultsAssignIn
                );

                var imports = assignInWith(
                        {},
                        options.imports,
                        settings.imports,
                        customDefaultsAssignIn
                    ),
                    importsKeys = keys(imports),
                    importsValues = baseValues(imports, importsKeys);

                var isEscaping,
                    isEvaluating,
                    index = 0,
                    interpolate = options.interpolate || reNoMatch,
                    source = "__p += '";

                // Compile the regexp to match each delimiter.
                var reDelimiters = RegExp(
                    (options.escape || reNoMatch).source +
                        '|' +
                        interpolate.source +
                        '|' +
                        (interpolate === reInterpolate
                            ? reEsTemplate
                            : reNoMatch
                        ).source +
                        '|' +
                        (options.evaluate || reNoMatch).source +
                        '|$',
                    'g'
                );

                // Use a sourceURL for easier debugging.
                // The sourceURL gets injected into the source that's eval-ed, so be careful
                // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
                // and escape the comment, thus injecting code that gets evaled.
                var sourceURL =
                    '//# sourceURL=' +
                    (hasOwnProperty.call(options, 'sourceURL')
                        ? (options.sourceURL + '').replace(/\s/g, ' ')
                        : 'lodash.templateSources[' + ++templateCounter + ']') +
                    '\n';

                string.replace(
                    reDelimiters,
                    function (
                        match,
                        escapeValue,
                        interpolateValue,
                        esTemplateValue,
                        evaluateValue,
                        offset
                    ) {
                        interpolateValue ||
                            (interpolateValue = esTemplateValue);

                        // Escape characters that can't be included in string literals.
                        source += string
                            .slice(index, offset)
                            .replace(reUnescapedString, escapeStringChar);

                        // Replace delimiters with snippets.
                        if (escapeValue) {
                            isEscaping = true;
                            source += "' +\n__e(" + escapeValue + ") +\n'";
                        }
                        if (evaluateValue) {
                            isEvaluating = true;
                            source += "';\n" + evaluateValue + ";\n__p += '";
                        }
                        if (interpolateValue) {
                            source +=
                                "' +\n((__t = (" +
                                interpolateValue +
                                ")) == null ? '' : __t) +\n'";
                        }
                        index = offset + match.length;

                        // The JS engine embedded in Adobe products needs `match` returned in
                        // order to produce the correct `offset` value.
                        return match;
                    }
                );

                source += "';\n";

                // If `variable` is not specified wrap a with-statement around the generated
                // code to add the data object to the top of the scope chain.
                var variable =
                    hasOwnProperty.call(options, 'variable') &&
                    options.variable;
                if (!variable) {
                    source = 'with (obj) {\n' + source + '\n}\n';
                }
                // Cleanup code by stripping empty strings.
                source = (
                    isEvaluating
                        ? source.replace(reEmptyStringLeading, '')
                        : source
                )
                    .replace(reEmptyStringMiddle, '$1')
                    .replace(reEmptyStringTrailing, '$1;');

                // Frame code as the function body.
                source =
                    'function(' +
                    (variable || 'obj') +
                    ') {\n' +
                    (variable ? '' : 'obj || (obj = {});\n') +
                    "var __t, __p = ''" +
                    (isEscaping ? ', __e = _.escape' : '') +
                    (isEvaluating
                        ? ', __j = Array.prototype.join;\n' +
                          "function print() { __p += __j.call(arguments, '') }\n"
                        : ';\n') +
                    source +
                    'return __p\n}';

                var result = attempt(function () {
                    return Function(
                        importsKeys,
                        sourceURL + 'return ' + source
                    ).apply(undefined$1, importsValues);
                });

                // Provide the compiled function's source by its `toString` method or
                // the `source` property as a convenience for inlining compiled templates.
                result.source = source;
                if (isError(result)) {
                    throw result;
                }
                return result;
            }

            /**
             * Converts `string`, as a whole, to lower case just like
             * [String#toLowerCase](https://mdn.io/toLowerCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.toLower('--Foo-Bar--');
             * // => '--foo-bar--'
             *
             * _.toLower('fooBar');
             * // => 'foobar'
             *
             * _.toLower('__FOO_BAR__');
             * // => '__foo_bar__'
             */
            function toLower(value) {
                return toString(value).toLowerCase();
            }

            /**
             * Converts `string`, as a whole, to upper case just like
             * [String#toUpperCase](https://mdn.io/toUpperCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.toUpper('--foo-bar--');
             * // => '--FOO-BAR--'
             *
             * _.toUpper('fooBar');
             * // => 'FOOBAR'
             *
             * _.toUpper('__foo_bar__');
             * // => '__FOO_BAR__'
             */
            function toUpper(value) {
                return toString(value).toUpperCase();
            }

            /**
             * Removes leading and trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trim('  abc  ');
             * // => 'abc'
             *
             * _.trim('-_-abc-_-', '_-');
             * // => 'abc'
             *
             * _.map(['  foo  ', '  bar  '], _.trim);
             * // => ['foo', 'bar']
             */
            function trim(string, chars, guard) {
                string = toString(string);
                if (string && (guard || chars === undefined$1)) {
                    return string.replace(reTrim, '');
                }
                if (!string || !(chars = baseToString(chars))) {
                    return string;
                }
                var strSymbols = stringToArray(string),
                    chrSymbols = stringToArray(chars),
                    start = charsStartIndex(strSymbols, chrSymbols),
                    end = charsEndIndex(strSymbols, chrSymbols) + 1;

                return castSlice(strSymbols, start, end).join('');
            }

            /**
             * Removes trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimEnd('  abc  ');
             * // => '  abc'
             *
             * _.trimEnd('-_-abc-_-', '_-');
             * // => '-_-abc'
             */
            function trimEnd(string, chars, guard) {
                string = toString(string);
                if (string && (guard || chars === undefined$1)) {
                    return string.replace(reTrimEnd, '');
                }
                if (!string || !(chars = baseToString(chars))) {
                    return string;
                }
                var strSymbols = stringToArray(string),
                    end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

                return castSlice(strSymbols, 0, end).join('');
            }

            /**
             * Removes leading whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimStart('  abc  ');
             * // => 'abc  '
             *
             * _.trimStart('-_-abc-_-', '_-');
             * // => 'abc-_-'
             */
            function trimStart(string, chars, guard) {
                string = toString(string);
                if (string && (guard || chars === undefined$1)) {
                    return string.replace(reTrimStart, '');
                }
                if (!string || !(chars = baseToString(chars))) {
                    return string;
                }
                var strSymbols = stringToArray(string),
                    start = charsStartIndex(strSymbols, stringToArray(chars));

                return castSlice(strSymbols, start).join('');
            }

            /**
             * Truncates `string` if it's longer than the given maximum string length.
             * The last characters of the truncated string are replaced with the omission
             * string which defaults to "...".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to truncate.
             * @param {Object} [options={}] The options object.
             * @param {number} [options.length=30] The maximum string length.
             * @param {string} [options.omission='...'] The string to indicate text is omitted.
             * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
             * @returns {string} Returns the truncated string.
             * @example
             *
             * _.truncate('hi-diddly-ho there, neighborino');
             * // => 'hi-diddly-ho there, neighbo...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': ' '
             * });
             * // => 'hi-diddly-ho there,...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': /,? +/
             * });
             * // => 'hi-diddly-ho there...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'omission': ' [...]'
             * });
             * // => 'hi-diddly-ho there, neig [...]'
             */
            function truncate(string, options) {
                var length = DEFAULT_TRUNC_LENGTH,
                    omission = DEFAULT_TRUNC_OMISSION;

                if (isObject(options)) {
                    var separator =
                        'separator' in options ? options.separator : separator;
                    length =
                        'length' in options
                            ? toInteger(options.length)
                            : length;
                    omission =
                        'omission' in options
                            ? baseToString(options.omission)
                            : omission;
                }
                string = toString(string);

                var strLength = string.length;
                if (hasUnicode(string)) {
                    var strSymbols = stringToArray(string);
                    strLength = strSymbols.length;
                }
                if (length >= strLength) {
                    return string;
                }
                var end = length - stringSize(omission);
                if (end < 1) {
                    return omission;
                }
                var result = strSymbols
                    ? castSlice(strSymbols, 0, end).join('')
                    : string.slice(0, end);

                if (separator === undefined$1) {
                    return result + omission;
                }
                if (strSymbols) {
                    end += result.length - end;
                }
                if (isRegExp(separator)) {
                    if (string.slice(end).search(separator)) {
                        var match,
                            substring = result;

                        if (!separator.global) {
                            separator = RegExp(
                                separator.source,
                                toString(reFlags.exec(separator)) + 'g'
                            );
                        }
                        separator.lastIndex = 0;
                        while ((match = separator.exec(substring))) {
                            var newEnd = match.index;
                        }
                        result = result.slice(
                            0,
                            newEnd === undefined$1 ? end : newEnd
                        );
                    }
                } else if (
                    string.indexOf(baseToString(separator), end) != end
                ) {
                    var index = result.lastIndexOf(separator);
                    if (index > -1) {
                        result = result.slice(0, index);
                    }
                }
                return result + omission;
            }

            /**
             * The inverse of `_.escape`; this method converts the HTML entities
             * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
             * their corresponding characters.
             *
             * **Note:** No other HTML entities are unescaped. To unescape additional
             * HTML entities use a third-party library like [_he_](https://mths.be/he).
             *
             * @static
             * @memberOf _
             * @since 0.6.0
             * @category String
             * @param {string} [string=''] The string to unescape.
             * @returns {string} Returns the unescaped string.
             * @example
             *
             * _.unescape('fred, barney, &amp; pebbles');
             * // => 'fred, barney, & pebbles'
             */
            function unescape(string) {
                string = toString(string);
                return string && reHasEscapedHtml.test(string)
                    ? string.replace(reEscapedHtml, unescapeHtmlChar)
                    : string;
            }

            /**
             * Converts `string`, as space separated words, to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.upperCase('--foo-bar');
             * // => 'FOO BAR'
             *
             * _.upperCase('fooBar');
             * // => 'FOO BAR'
             *
             * _.upperCase('__foo_bar__');
             * // => 'FOO BAR'
             */
            var upperCase = createCompounder(function (result, word, index) {
                return result + (index ? ' ' : '') + word.toUpperCase();
            });

            /**
             * Converts the first character of `string` to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.upperFirst('fred');
             * // => 'Fred'
             *
             * _.upperFirst('FRED');
             * // => 'FRED'
             */
            var upperFirst = createCaseFirst('toUpperCase');

            /**
             * Splits `string` into an array of its words.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {RegExp|string} [pattern] The pattern to match words.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the words of `string`.
             * @example
             *
             * _.words('fred, barney, & pebbles');
             * // => ['fred', 'barney', 'pebbles']
             *
             * _.words('fred, barney, & pebbles', /[^, ]+/g);
             * // => ['fred', 'barney', '&', 'pebbles']
             */
            function words(string, pattern, guard) {
                string = toString(string);
                pattern = guard ? undefined$1 : pattern;

                if (pattern === undefined$1) {
                    return hasUnicodeWord(string)
                        ? unicodeWords(string)
                        : asciiWords(string);
                }
                return string.match(pattern) || [];
            }

            /*------------------------------------------------------------------------*/

            /**
             * Attempts to invoke `func`, returning either the result or the caught error
             * object. Any additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Function} func The function to attempt.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {*} Returns the `func` result or error object.
             * @example
             *
             * // Avoid throwing errors for invalid selectors.
             * var elements = _.attempt(function(selector) {
             *   return document.querySelectorAll(selector);
             * }, '>_>');
             *
             * if (_.isError(elements)) {
             *   elements = [];
             * }
             */
            var attempt = baseRest(function (func, args) {
                try {
                    return apply(func, undefined$1, args);
                } catch (e) {
                    return isError(e) ? e : new Error(e);
                }
            });

            /**
             * Binds methods of an object to the object itself, overwriting the existing
             * method.
             *
             * **Note:** This method doesn't set the "length" property of bound functions.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Object} object The object to bind and assign the bound methods to.
             * @param {...(string|string[])} methodNames The object method names to bind.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var view = {
             *   'label': 'docs',
             *   'click': function() {
             *     console.log('clicked ' + this.label);
             *   }
             * };
             *
             * _.bindAll(view, ['click']);
             * jQuery(element).on('click', view.click);
             * // => Logs 'clicked docs' when clicked.
             */
            var bindAll = flatRest(function (object, methodNames) {
                arrayEach(methodNames, function (key) {
                    key = toKey(key);
                    baseAssignValue(object, key, bind(object[key], object));
                });
                return object;
            });

            /**
             * Creates a function that iterates over `pairs` and invokes the corresponding
             * function of the first predicate to return truthy. The predicate-function
             * pairs are invoked with the `this` binding and arguments of the created
             * function.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Array} pairs The predicate-function pairs.
             * @returns {Function} Returns the new composite function.
             * @example
             *
             * var func = _.cond([
             *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
             *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
             *   [_.stubTrue,                      _.constant('no match')]
             * ]);
             *
             * func({ 'a': 1, 'b': 2 });
             * // => 'matches A'
             *
             * func({ 'a': 0, 'b': 1 });
             * // => 'matches B'
             *
             * func({ 'a': '1', 'b': '2' });
             * // => 'no match'
             */
            function cond(pairs) {
                var length = pairs == null ? 0 : pairs.length,
                    toIteratee = getIteratee();

                pairs = !length
                    ? []
                    : arrayMap(pairs, function (pair) {
                          if (typeof pair[1] != 'function') {
                              throw new TypeError(FUNC_ERROR_TEXT);
                          }
                          return [toIteratee(pair[0]), pair[1]];
                      });

                return baseRest(function (args) {
                    var index = -1;
                    while (++index < length) {
                        var pair = pairs[index];
                        if (apply(pair[0], this, args)) {
                            return apply(pair[1], this, args);
                        }
                    }
                });
            }

            /**
             * Creates a function that invokes the predicate properties of `source` with
             * the corresponding property values of a given object, returning `true` if
             * all predicates return truthy, else `false`.
             *
             * **Note:** The created function is equivalent to `_.conformsTo` with
             * `source` partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 2, 'b': 1 },
             *   { 'a': 1, 'b': 2 }
             * ];
             *
             * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
             * // => [{ 'a': 1, 'b': 2 }]
             */
            function conforms(source) {
                return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that returns `value`.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {*} value The value to return from the new function.
             * @returns {Function} Returns the new constant function.
             * @example
             *
             * var objects = _.times(2, _.constant({ 'a': 1 }));
             *
             * console.log(objects);
             * // => [{ 'a': 1 }, { 'a': 1 }]
             *
             * console.log(objects[0] === objects[1]);
             * // => true
             */
            function constant(value) {
                return function () {
                    return value;
                };
            }

            /**
             * Checks `value` to determine whether a default value should be returned in
             * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
             * or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Util
             * @param {*} value The value to check.
             * @param {*} defaultValue The default value.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * _.defaultTo(1, 10);
             * // => 1
             *
             * _.defaultTo(undefined, 10);
             * // => 10
             */
            function defaultTo(value, defaultValue) {
                return value == null || value !== value ? defaultValue : value;
            }

            /**
             * Creates a function that returns the result of invoking the given functions
             * with the `this` binding of the created function, where each successive
             * invocation is supplied the return value of the previous.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flowRight
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flow([_.add, square]);
             * addSquare(1, 2);
             * // => 9
             */
            var flow = createFlow();

            /**
             * This method is like `_.flow` except that it creates a function that
             * invokes the given functions from right to left.
             *
             * @static
             * @since 3.0.0
             * @memberOf _
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flow
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flowRight([square, _.add]);
             * addSquare(1, 2);
             * // => 9
             */
            var flowRight = createFlow(true);

            /**
             * This method returns the first argument it receives.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {*} value Any value.
             * @returns {*} Returns `value`.
             * @example
             *
             * var object = { 'a': 1 };
             *
             * console.log(_.identity(object) === object);
             * // => true
             */
            function identity(value) {
                return value;
            }

            /**
             * Creates a function that invokes `func` with the arguments of the created
             * function. If `func` is a property name, the created function returns the
             * property value for a given element. If `func` is an array or object, the
             * created function returns `true` for elements that contain the equivalent
             * source properties, otherwise it returns `false`.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Util
             * @param {*} [func=_.identity] The value to convert to a callback.
             * @returns {Function} Returns the callback.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
             * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, _.iteratee(['user', 'fred']));
             * // => [{ 'user': 'fred', 'age': 40 }]
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, _.iteratee('user'));
             * // => ['barney', 'fred']
             *
             * // Create custom iteratee shorthands.
             * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
             *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
             *     return func.test(string);
             *   };
             * });
             *
             * _.filter(['abc', 'def'], /ef/);
             * // => ['def']
             */
            function iteratee(func) {
                return baseIteratee(
                    typeof func == 'function'
                        ? func
                        : baseClone(func, CLONE_DEEP_FLAG)
                );
            }

            /**
             * Creates a function that performs a partial deep comparison between a given
             * object and `source`, returning `true` if the given object has equivalent
             * property values, else `false`.
             *
             * **Note:** The created function is equivalent to `_.isMatch` with `source`
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * **Note:** Multiple values can be checked by combining several matchers
             * using `_.overSome`
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
             * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
             *
             * // Checking for several possible values
             * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matches(source) {
                return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that performs a partial deep comparison between the
             * value at `path` of a given object to `srcValue`, returning `true` if the
             * object value is equivalent, else `false`.
             *
             * **Note:** Partial comparisons will match empty array and empty object
             * `srcValue` values against any array or object value, respectively. See
             * `_.isEqual` for a list of supported value comparisons.
             *
             * **Note:** Multiple values can be checked by combining several matchers
             * using `_.overSome`
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.find(objects, _.matchesProperty('a', 4));
             * // => { 'a': 4, 'b': 5, 'c': 6 }
             *
             * // Checking for several possible values
             * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matchesProperty(path, srcValue) {
                return baseMatchesProperty(
                    path,
                    baseClone(srcValue, CLONE_DEEP_FLAG)
                );
            }

            /**
             * Creates a function that invokes the method at `path` of a given object.
             * Any additional arguments are provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': _.constant(2) } },
             *   { 'a': { 'b': _.constant(1) } }
             * ];
             *
             * _.map(objects, _.method('a.b'));
             * // => [2, 1]
             *
             * _.map(objects, _.method(['a', 'b']));
             * // => [2, 1]
             */
            var method = baseRest(function (path, args) {
                return function (object) {
                    return baseInvoke(object, path, args);
                };
            });

            /**
             * The opposite of `_.method`; this method creates a function that invokes
             * the method at a given path of `object`. Any additional arguments are
             * provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Object} object The object to query.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var array = _.times(3, _.constant),
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.methodOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
             * // => [2, 0]
             */
            var methodOf = baseRest(function (object, args) {
                return function (path) {
                    return baseInvoke(object, path, args);
                };
            });

            /**
             * Adds all own enumerable string keyed function properties of a source
             * object to the destination object. If `object` is a function, then methods
             * are added to its prototype as well.
             *
             * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
             * avoid conflicts caused by modifying the original.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Function|Object} [object=lodash] The destination object.
             * @param {Object} source The object of functions to add.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
             * @returns {Function|Object} Returns `object`.
             * @example
             *
             * function vowels(string) {
             *   return _.filter(string, function(v) {
             *     return /[aeiou]/i.test(v);
             *   });
             * }
             *
             * _.mixin({ 'vowels': vowels });
             * _.vowels('fred');
             * // => ['e']
             *
             * _('fred').vowels().value();
             * // => ['e']
             *
             * _.mixin({ 'vowels': vowels }, { 'chain': false });
             * _('fred').vowels();
             * // => ['e']
             */
            function mixin(object, source, options) {
                var props = keys(source),
                    methodNames = baseFunctions(source, props);

                if (
                    options == null &&
                    !(isObject(source) && (methodNames.length || !props.length))
                ) {
                    options = source;
                    source = object;
                    object = this;
                    methodNames = baseFunctions(source, keys(source));
                }
                var chain =
                        !(isObject(options) && 'chain' in options) ||
                        !!options.chain,
                    isFunc = isFunction(object);

                arrayEach(methodNames, function (methodName) {
                    var func = source[methodName];
                    object[methodName] = func;
                    if (isFunc) {
                        object.prototype[methodName] = function () {
                            var chainAll = this.__chain__;
                            if (chain || chainAll) {
                                var result = object(this.__wrapped__),
                                    actions = (result.__actions__ = copyArray(
                                        this.__actions__
                                    ));

                                actions.push({
                                    func: func,
                                    args: arguments,
                                    thisArg: object,
                                });
                                result.__chain__ = chainAll;
                                return result;
                            }
                            return func.apply(
                                object,
                                arrayPush([this.value()], arguments)
                            );
                        };
                    }
                });

                return object;
            }

            /**
             * Reverts the `_` variable to its previous value and returns a reference to
             * the `lodash` function.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @returns {Function} Returns the `lodash` function.
             * @example
             *
             * var lodash = _.noConflict();
             */
            function noConflict() {
                if (root._ === this) {
                    root._ = oldDash;
                }
                return this;
            }

            /**
             * This method returns `undefined`.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Util
             * @example
             *
             * _.times(2, _.noop);
             * // => [undefined, undefined]
             */
            function noop() {
                // No operation performed.
            }

            /**
             * Creates a function that gets the argument at index `n`. If `n` is negative,
             * the nth argument from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [n=0] The index of the argument to return.
             * @returns {Function} Returns the new pass-thru function.
             * @example
             *
             * var func = _.nthArg(1);
             * func('a', 'b', 'c', 'd');
             * // => 'b'
             *
             * var func = _.nthArg(-2);
             * func('a', 'b', 'c', 'd');
             * // => 'c'
             */
            function nthArg(n) {
                n = toInteger(n);
                return baseRest(function (args) {
                    return baseNth(args, n);
                });
            }

            /**
             * Creates a function that invokes `iteratees` with the arguments it receives
             * and returns their results.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to invoke.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.over([Math.max, Math.min]);
             *
             * func(1, 2, 3, 4);
             * // => [4, 1]
             */
            var over = createOver(arrayMap);

            /**
             * Creates a function that checks if **all** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * Following shorthands are possible for providing predicates.
             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overEvery([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => false
             *
             * func(NaN);
             * // => false
             */
            var overEvery = createOver(arrayEvery);

            /**
             * Creates a function that checks if **any** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * Following shorthands are possible for providing predicates.
             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overSome([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => true
             *
             * func(NaN);
             * // => false
             *
             * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
             * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
             */
            var overSome = createOver(arraySome);

            /**
             * Creates a function that returns the value at `path` of a given object.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': 2 } },
             *   { 'a': { 'b': 1 } }
             * ];
             *
             * _.map(objects, _.property('a.b'));
             * // => [2, 1]
             *
             * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
             * // => [1, 2]
             */
            function property(path) {
                return isKey(path)
                    ? baseProperty(toKey(path))
                    : basePropertyDeep(path);
            }

            /**
             * The opposite of `_.property`; this method creates a function that returns
             * the value at a given path of `object`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} object The object to query.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var array = [0, 1, 2],
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
             * // => [2, 0]
             */
            function propertyOf(object) {
                return function (path) {
                    return object == null ? undefined$1 : baseGet(object, path);
                };
            }

            /**
             * Creates an array of numbers (positive and/or negative) progressing from
             * `start` up to, but not including, `end`. A step of `-1` is used if a negative
             * `start` is specified without an `end` or `step`. If `end` is not specified,
             * it's set to `start` with `start` then set to `0`.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.rangeRight
             * @example
             *
             * _.range(4);
             * // => [0, 1, 2, 3]
             *
             * _.range(-4);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 5);
             * // => [1, 2, 3, 4]
             *
             * _.range(0, 20, 5);
             * // => [0, 5, 10, 15]
             *
             * _.range(0, -4, -1);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.range(0);
             * // => []
             */
            var range = createRange();

            /**
             * This method is like `_.range` except that it populates values in
             * descending order.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.range
             * @example
             *
             * _.rangeRight(4);
             * // => [3, 2, 1, 0]
             *
             * _.rangeRight(-4);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 5);
             * // => [4, 3, 2, 1]
             *
             * _.rangeRight(0, 20, 5);
             * // => [15, 10, 5, 0]
             *
             * _.rangeRight(0, -4, -1);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.rangeRight(0);
             * // => []
             */
            var rangeRight = createRange(true);

            /**
             * This method returns a new empty array.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Array} Returns the new empty array.
             * @example
             *
             * var arrays = _.times(2, _.stubArray);
             *
             * console.log(arrays);
             * // => [[], []]
             *
             * console.log(arrays[0] === arrays[1]);
             * // => false
             */
            function stubArray() {
                return [];
            }

            /**
             * This method returns `false`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `false`.
             * @example
             *
             * _.times(2, _.stubFalse);
             * // => [false, false]
             */
            function stubFalse() {
                return false;
            }

            /**
             * This method returns a new empty object.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Object} Returns the new empty object.
             * @example
             *
             * var objects = _.times(2, _.stubObject);
             *
             * console.log(objects);
             * // => [{}, {}]
             *
             * console.log(objects[0] === objects[1]);
             * // => false
             */
            function stubObject() {
                return {};
            }

            /**
             * This method returns an empty string.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {string} Returns the empty string.
             * @example
             *
             * _.times(2, _.stubString);
             * // => ['', '']
             */
            function stubString() {
                return '';
            }

            /**
             * This method returns `true`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `true`.
             * @example
             *
             * _.times(2, _.stubTrue);
             * // => [true, true]
             */
            function stubTrue() {
                return true;
            }

            /**
             * Invokes the iteratee `n` times, returning an array of the results of
             * each invocation. The iteratee is invoked with one argument; (index).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} n The number of times to invoke `iteratee`.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.times(3, String);
             * // => ['0', '1', '2']
             *
             *  _.times(4, _.constant(0));
             * // => [0, 0, 0, 0]
             */
            function times(n, iteratee) {
                n = toInteger(n);
                if (n < 1 || n > MAX_SAFE_INTEGER) {
                    return [];
                }
                var index = MAX_ARRAY_LENGTH,
                    length = nativeMin(n, MAX_ARRAY_LENGTH);

                iteratee = getIteratee(iteratee);
                n -= MAX_ARRAY_LENGTH;

                var result = baseTimes(length, iteratee);
                while (++index < n) {
                    iteratee(index);
                }
                return result;
            }

            /**
             * Converts `value` to a property path array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {*} value The value to convert.
             * @returns {Array} Returns the new property path array.
             * @example
             *
             * _.toPath('a.b.c');
             * // => ['a', 'b', 'c']
             *
             * _.toPath('a[0].b.c');
             * // => ['a', '0', 'b', 'c']
             */
            function toPath(value) {
                if (isArray(value)) {
                    return arrayMap(value, toKey);
                }
                return isSymbol(value)
                    ? [value]
                    : copyArray(stringToPath(toString(value)));
            }

            /**
             * Generates a unique ID. If `prefix` is given, the ID is appended to it.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {string} [prefix=''] The value to prefix the ID with.
             * @returns {string} Returns the unique ID.
             * @example
             *
             * _.uniqueId('contact_');
             * // => 'contact_104'
             *
             * _.uniqueId();
             * // => '105'
             */
            function uniqueId(prefix) {
                var id = ++idCounter;
                return toString(prefix) + id;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Adds two numbers.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {number} augend The first number in an addition.
             * @param {number} addend The second number in an addition.
             * @returns {number} Returns the total.
             * @example
             *
             * _.add(6, 4);
             * // => 10
             */
            var add = createMathOperation(function (augend, addend) {
                return augend + addend;
            }, 0);

            /**
             * Computes `number` rounded up to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round up.
             * @param {number} [precision=0] The precision to round up to.
             * @returns {number} Returns the rounded up number.
             * @example
             *
             * _.ceil(4.006);
             * // => 5
             *
             * _.ceil(6.004, 2);
             * // => 6.01
             *
             * _.ceil(6040, -2);
             * // => 6100
             */
            var ceil = createRound('ceil');

            /**
             * Divide two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} dividend The first number in a division.
             * @param {number} divisor The second number in a division.
             * @returns {number} Returns the quotient.
             * @example
             *
             * _.divide(6, 4);
             * // => 1.5
             */
            var divide = createMathOperation(function (dividend, divisor) {
                return dividend / divisor;
            }, 1);

            /**
             * Computes `number` rounded down to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round down.
             * @param {number} [precision=0] The precision to round down to.
             * @returns {number} Returns the rounded down number.
             * @example
             *
             * _.floor(4.006);
             * // => 4
             *
             * _.floor(0.046, 2);
             * // => 0.04
             *
             * _.floor(4060, -2);
             * // => 4000
             */
            var floor = createRound('floor');

            /**
             * Computes the maximum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * _.max([4, 2, 8, 6]);
             * // => 8
             *
             * _.max([]);
             * // => undefined
             */
            function max(array) {
                return array && array.length
                    ? baseExtremum(array, identity, baseGt)
                    : undefined$1;
            }

            /**
             * This method is like `_.max` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.maxBy(objects, function(o) { return o.n; });
             * // => { 'n': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.maxBy(objects, 'n');
             * // => { 'n': 2 }
             */
            function maxBy(array, iteratee) {
                return array && array.length
                    ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                    : undefined$1;
            }

            /**
             * Computes the mean of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the mean.
             * @example
             *
             * _.mean([4, 2, 8, 6]);
             * // => 5
             */
            function mean(array) {
                return baseMean(array, identity);
            }

            /**
             * This method is like `_.mean` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be averaged.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the mean.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.meanBy(objects, function(o) { return o.n; });
             * // => 5
             *
             * // The `_.property` iteratee shorthand.
             * _.meanBy(objects, 'n');
             * // => 5
             */
            function meanBy(array, iteratee) {
                return baseMean(array, getIteratee(iteratee, 2));
            }

            /**
             * Computes the minimum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * _.min([4, 2, 8, 6]);
             * // => 2
             *
             * _.min([]);
             * // => undefined
             */
            function min(array) {
                return array && array.length
                    ? baseExtremum(array, identity, baseLt)
                    : undefined$1;
            }

            /**
             * This method is like `_.min` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.minBy(objects, function(o) { return o.n; });
             * // => { 'n': 1 }
             *
             * // The `_.property` iteratee shorthand.
             * _.minBy(objects, 'n');
             * // => { 'n': 1 }
             */
            function minBy(array, iteratee) {
                return array && array.length
                    ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                    : undefined$1;
            }

            /**
             * Multiply two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} multiplier The first number in a multiplication.
             * @param {number} multiplicand The second number in a multiplication.
             * @returns {number} Returns the product.
             * @example
             *
             * _.multiply(6, 4);
             * // => 24
             */
            var multiply = createMathOperation(function (
                multiplier,
                multiplicand
            ) {
                return multiplier * multiplicand;
            },
            1);

            /**
             * Computes `number` rounded to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round.
             * @param {number} [precision=0] The precision to round to.
             * @returns {number} Returns the rounded number.
             * @example
             *
             * _.round(4.006);
             * // => 4
             *
             * _.round(4.006, 2);
             * // => 4.01
             *
             * _.round(4060, -2);
             * // => 4100
             */
            var round = createRound('round');

            /**
             * Subtract two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {number} minuend The first number in a subtraction.
             * @param {number} subtrahend The second number in a subtraction.
             * @returns {number} Returns the difference.
             * @example
             *
             * _.subtract(6, 4);
             * // => 2
             */
            var subtract = createMathOperation(function (minuend, subtrahend) {
                return minuend - subtrahend;
            }, 0);

            /**
             * Computes the sum of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the sum.
             * @example
             *
             * _.sum([4, 2, 8, 6]);
             * // => 20
             */
            function sum(array) {
                return array && array.length ? baseSum(array, identity) : 0;
            }

            /**
             * This method is like `_.sum` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be summed.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the sum.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.sumBy(objects, function(o) { return o.n; });
             * // => 20
             *
             * // The `_.property` iteratee shorthand.
             * _.sumBy(objects, 'n');
             * // => 20
             */
            function sumBy(array, iteratee) {
                return array && array.length
                    ? baseSum(array, getIteratee(iteratee, 2))
                    : 0;
            }

            /*------------------------------------------------------------------------*/

            // Add methods that return wrapped values in chain sequences.
            lodash.after = after;
            lodash.ary = ary;
            lodash.assign = assign;
            lodash.assignIn = assignIn;
            lodash.assignInWith = assignInWith;
            lodash.assignWith = assignWith;
            lodash.at = at;
            lodash.before = before;
            lodash.bind = bind;
            lodash.bindAll = bindAll;
            lodash.bindKey = bindKey;
            lodash.castArray = castArray;
            lodash.chain = chain;
            lodash.chunk = chunk;
            lodash.compact = compact;
            lodash.concat = concat;
            lodash.cond = cond;
            lodash.conforms = conforms;
            lodash.constant = constant;
            lodash.countBy = countBy;
            lodash.create = create;
            lodash.curry = curry;
            lodash.curryRight = curryRight;
            lodash.debounce = debounce;
            lodash.defaults = defaults;
            lodash.defaultsDeep = defaultsDeep;
            lodash.defer = defer;
            lodash.delay = delay;
            lodash.difference = difference;
            lodash.differenceBy = differenceBy;
            lodash.differenceWith = differenceWith;
            lodash.drop = drop;
            lodash.dropRight = dropRight;
            lodash.dropRightWhile = dropRightWhile;
            lodash.dropWhile = dropWhile;
            lodash.fill = fill;
            lodash.filter = filter;
            lodash.flatMap = flatMap;
            lodash.flatMapDeep = flatMapDeep;
            lodash.flatMapDepth = flatMapDepth;
            lodash.flatten = flatten;
            lodash.flattenDeep = flattenDeep;
            lodash.flattenDepth = flattenDepth;
            lodash.flip = flip;
            lodash.flow = flow;
            lodash.flowRight = flowRight;
            lodash.fromPairs = fromPairs;
            lodash.functions = functions;
            lodash.functionsIn = functionsIn;
            lodash.groupBy = groupBy;
            lodash.initial = initial;
            lodash.intersection = intersection;
            lodash.intersectionBy = intersectionBy;
            lodash.intersectionWith = intersectionWith;
            lodash.invert = invert;
            lodash.invertBy = invertBy;
            lodash.invokeMap = invokeMap;
            lodash.iteratee = iteratee;
            lodash.keyBy = keyBy;
            lodash.keys = keys;
            lodash.keysIn = keysIn;
            lodash.map = map;
            lodash.mapKeys = mapKeys;
            lodash.mapValues = mapValues;
            lodash.matches = matches;
            lodash.matchesProperty = matchesProperty;
            lodash.memoize = memoize;
            lodash.merge = merge;
            lodash.mergeWith = mergeWith;
            lodash.method = method;
            lodash.methodOf = methodOf;
            lodash.mixin = mixin;
            lodash.negate = negate;
            lodash.nthArg = nthArg;
            lodash.omit = omit;
            lodash.omitBy = omitBy;
            lodash.once = once;
            lodash.orderBy = orderBy;
            lodash.over = over;
            lodash.overArgs = overArgs;
            lodash.overEvery = overEvery;
            lodash.overSome = overSome;
            lodash.partial = partial;
            lodash.partialRight = partialRight;
            lodash.partition = partition;
            lodash.pick = pick;
            lodash.pickBy = pickBy;
            lodash.property = property;
            lodash.propertyOf = propertyOf;
            lodash.pull = pull;
            lodash.pullAll = pullAll;
            lodash.pullAllBy = pullAllBy;
            lodash.pullAllWith = pullAllWith;
            lodash.pullAt = pullAt;
            lodash.range = range;
            lodash.rangeRight = rangeRight;
            lodash.rearg = rearg;
            lodash.reject = reject;
            lodash.remove = remove;
            lodash.rest = rest;
            lodash.reverse = reverse;
            lodash.sampleSize = sampleSize;
            lodash.set = set;
            lodash.setWith = setWith;
            lodash.shuffle = shuffle;
            lodash.slice = slice;
            lodash.sortBy = sortBy;
            lodash.sortedUniq = sortedUniq;
            lodash.sortedUniqBy = sortedUniqBy;
            lodash.split = split;
            lodash.spread = spread;
            lodash.tail = tail;
            lodash.take = take;
            lodash.takeRight = takeRight;
            lodash.takeRightWhile = takeRightWhile;
            lodash.takeWhile = takeWhile;
            lodash.tap = tap;
            lodash.throttle = throttle;
            lodash.thru = thru;
            lodash.toArray = toArray;
            lodash.toPairs = toPairs;
            lodash.toPairsIn = toPairsIn;
            lodash.toPath = toPath;
            lodash.toPlainObject = toPlainObject;
            lodash.transform = transform;
            lodash.unary = unary;
            lodash.union = union;
            lodash.unionBy = unionBy;
            lodash.unionWith = unionWith;
            lodash.uniq = uniq;
            lodash.uniqBy = uniqBy;
            lodash.uniqWith = uniqWith;
            lodash.unset = unset;
            lodash.unzip = unzip;
            lodash.unzipWith = unzipWith;
            lodash.update = update;
            lodash.updateWith = updateWith;
            lodash.values = values;
            lodash.valuesIn = valuesIn;
            lodash.without = without;
            lodash.words = words;
            lodash.wrap = wrap;
            lodash.xor = xor;
            lodash.xorBy = xorBy;
            lodash.xorWith = xorWith;
            lodash.zip = zip;
            lodash.zipObject = zipObject;
            lodash.zipObjectDeep = zipObjectDeep;
            lodash.zipWith = zipWith;

            // Add aliases.
            lodash.entries = toPairs;
            lodash.entriesIn = toPairsIn;
            lodash.extend = assignIn;
            lodash.extendWith = assignInWith;

            // Add methods to `lodash.prototype`.
            mixin(lodash, lodash);

            /*------------------------------------------------------------------------*/

            // Add methods that return unwrapped values in chain sequences.
            lodash.add = add;
            lodash.attempt = attempt;
            lodash.camelCase = camelCase;
            lodash.capitalize = capitalize;
            lodash.ceil = ceil;
            lodash.clamp = clamp;
            lodash.clone = clone;
            lodash.cloneDeep = cloneDeep;
            lodash.cloneDeepWith = cloneDeepWith;
            lodash.cloneWith = cloneWith;
            lodash.conformsTo = conformsTo;
            lodash.deburr = deburr;
            lodash.defaultTo = defaultTo;
            lodash.divide = divide;
            lodash.endsWith = endsWith;
            lodash.eq = eq;
            lodash.escape = escape;
            lodash.escapeRegExp = escapeRegExp;
            lodash.every = every;
            lodash.find = find;
            lodash.findIndex = findIndex;
            lodash.findKey = findKey;
            lodash.findLast = findLast;
            lodash.findLastIndex = findLastIndex;
            lodash.findLastKey = findLastKey;
            lodash.floor = floor;
            lodash.forEach = forEach;
            lodash.forEachRight = forEachRight;
            lodash.forIn = forIn;
            lodash.forInRight = forInRight;
            lodash.forOwn = forOwn;
            lodash.forOwnRight = forOwnRight;
            lodash.get = get;
            lodash.gt = gt;
            lodash.gte = gte;
            lodash.has = has;
            lodash.hasIn = hasIn;
            lodash.head = head;
            lodash.identity = identity;
            lodash.includes = includes;
            lodash.indexOf = indexOf;
            lodash.inRange = inRange;
            lodash.invoke = invoke;
            lodash.isArguments = isArguments;
            lodash.isArray = isArray;
            lodash.isArrayBuffer = isArrayBuffer;
            lodash.isArrayLike = isArrayLike;
            lodash.isArrayLikeObject = isArrayLikeObject;
            lodash.isBoolean = isBoolean;
            lodash.isBuffer = isBuffer;
            lodash.isDate = isDate;
            lodash.isElement = isElement;
            lodash.isEmpty = isEmpty;
            lodash.isEqual = isEqual;
            lodash.isEqualWith = isEqualWith;
            lodash.isError = isError;
            lodash.isFinite = isFinite;
            lodash.isFunction = isFunction;
            lodash.isInteger = isInteger;
            lodash.isLength = isLength;
            lodash.isMap = isMap;
            lodash.isMatch = isMatch;
            lodash.isMatchWith = isMatchWith;
            lodash.isNaN = isNaN;
            lodash.isNative = isNative;
            lodash.isNil = isNil;
            lodash.isNull = isNull;
            lodash.isNumber = isNumber;
            lodash.isObject = isObject;
            lodash.isObjectLike = isObjectLike;
            lodash.isPlainObject = isPlainObject;
            lodash.isRegExp = isRegExp;
            lodash.isSafeInteger = isSafeInteger;
            lodash.isSet = isSet;
            lodash.isString = isString;
            lodash.isSymbol = isSymbol;
            lodash.isTypedArray = isTypedArray;
            lodash.isUndefined = isUndefined;
            lodash.isWeakMap = isWeakMap;
            lodash.isWeakSet = isWeakSet;
            lodash.join = join;
            lodash.kebabCase = kebabCase;
            lodash.last = last;
            lodash.lastIndexOf = lastIndexOf;
            lodash.lowerCase = lowerCase;
            lodash.lowerFirst = lowerFirst;
            lodash.lt = lt;
            lodash.lte = lte;
            lodash.max = max;
            lodash.maxBy = maxBy;
            lodash.mean = mean;
            lodash.meanBy = meanBy;
            lodash.min = min;
            lodash.minBy = minBy;
            lodash.stubArray = stubArray;
            lodash.stubFalse = stubFalse;
            lodash.stubObject = stubObject;
            lodash.stubString = stubString;
            lodash.stubTrue = stubTrue;
            lodash.multiply = multiply;
            lodash.nth = nth;
            lodash.noConflict = noConflict;
            lodash.noop = noop;
            lodash.now = now;
            lodash.pad = pad;
            lodash.padEnd = padEnd;
            lodash.padStart = padStart;
            lodash.parseInt = parseInt;
            lodash.random = random;
            lodash.reduce = reduce;
            lodash.reduceRight = reduceRight;
            lodash.repeat = repeat;
            lodash.replace = replace;
            lodash.result = result;
            lodash.round = round;
            lodash.runInContext = runInContext;
            lodash.sample = sample;
            lodash.size = size;
            lodash.snakeCase = snakeCase;
            lodash.some = some;
            lodash.sortedIndex = sortedIndex;
            lodash.sortedIndexBy = sortedIndexBy;
            lodash.sortedIndexOf = sortedIndexOf;
            lodash.sortedLastIndex = sortedLastIndex;
            lodash.sortedLastIndexBy = sortedLastIndexBy;
            lodash.sortedLastIndexOf = sortedLastIndexOf;
            lodash.startCase = startCase;
            lodash.startsWith = startsWith;
            lodash.subtract = subtract;
            lodash.sum = sum;
            lodash.sumBy = sumBy;
            lodash.template = template;
            lodash.times = times;
            lodash.toFinite = toFinite;
            lodash.toInteger = toInteger;
            lodash.toLength = toLength;
            lodash.toLower = toLower;
            lodash.toNumber = toNumber;
            lodash.toSafeInteger = toSafeInteger;
            lodash.toString = toString;
            lodash.toUpper = toUpper;
            lodash.trim = trim;
            lodash.trimEnd = trimEnd;
            lodash.trimStart = trimStart;
            lodash.truncate = truncate;
            lodash.unescape = unescape;
            lodash.uniqueId = uniqueId;
            lodash.upperCase = upperCase;
            lodash.upperFirst = upperFirst;

            // Add aliases.
            lodash.each = forEach;
            lodash.eachRight = forEachRight;
            lodash.first = head;

            mixin(
                lodash,
                (function () {
                    var source = {};
                    baseForOwn(lodash, function (func, methodName) {
                        if (
                            !hasOwnProperty.call(lodash.prototype, methodName)
                        ) {
                            source[methodName] = func;
                        }
                    });
                    return source;
                })(),
                { chain: false }
            );

            /*------------------------------------------------------------------------*/

            /**
             * The semantic version number.
             *
             * @static
             * @memberOf _
             * @type {string}
             */
            lodash.VERSION = VERSION;

            // Assign default placeholders.
            arrayEach(
                [
                    'bind',
                    'bindKey',
                    'curry',
                    'curryRight',
                    'partial',
                    'partialRight',
                ],
                function (methodName) {
                    lodash[methodName].placeholder = lodash;
                }
            );

            // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
            arrayEach(['drop', 'take'], function (methodName, index) {
                LazyWrapper.prototype[methodName] = function (n) {
                    n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

                    var result =
                        this.__filtered__ && !index
                            ? new LazyWrapper(this)
                            : this.clone();

                    if (result.__filtered__) {
                        result.__takeCount__ = nativeMin(
                            n,
                            result.__takeCount__
                        );
                    } else {
                        result.__views__.push({
                            size: nativeMin(n, MAX_ARRAY_LENGTH),
                            type:
                                methodName +
                                (result.__dir__ < 0 ? 'Right' : ''),
                        });
                    }
                    return result;
                };

                LazyWrapper.prototype[methodName + 'Right'] = function (n) {
                    return this.reverse()[methodName](n).reverse();
                };
            });

            // Add `LazyWrapper` methods that accept an `iteratee` value.
            arrayEach(
                ['filter', 'map', 'takeWhile'],
                function (methodName, index) {
                    var type = index + 1,
                        isFilter =
                            type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                    LazyWrapper.prototype[methodName] = function (iteratee) {
                        var result = this.clone();
                        result.__iteratees__.push({
                            iteratee: getIteratee(iteratee, 3),
                            type: type,
                        });
                        result.__filtered__ = result.__filtered__ || isFilter;
                        return result;
                    };
                }
            );

            // Add `LazyWrapper` methods for `_.head` and `_.last`.
            arrayEach(['head', 'last'], function (methodName, index) {
                var takeName = 'take' + (index ? 'Right' : '');

                LazyWrapper.prototype[methodName] = function () {
                    return this[takeName](1).value()[0];
                };
            });

            // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
            arrayEach(['initial', 'tail'], function (methodName, index) {
                var dropName = 'drop' + (index ? '' : 'Right');

                LazyWrapper.prototype[methodName] = function () {
                    return this.__filtered__
                        ? new LazyWrapper(this)
                        : this[dropName](1);
                };
            });

            LazyWrapper.prototype.compact = function () {
                return this.filter(identity);
            };

            LazyWrapper.prototype.find = function (predicate) {
                return this.filter(predicate).head();
            };

            LazyWrapper.prototype.findLast = function (predicate) {
                return this.reverse().find(predicate);
            };

            LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
                if (typeof path == 'function') {
                    return new LazyWrapper(this);
                }
                return this.map(function (value) {
                    return baseInvoke(value, path, args);
                });
            });

            LazyWrapper.prototype.reject = function (predicate) {
                return this.filter(negate(getIteratee(predicate)));
            };

            LazyWrapper.prototype.slice = function (start, end) {
                start = toInteger(start);

                var result = this;
                if (result.__filtered__ && (start > 0 || end < 0)) {
                    return new LazyWrapper(result);
                }
                if (start < 0) {
                    result = result.takeRight(-start);
                } else if (start) {
                    result = result.drop(start);
                }
                if (end !== undefined$1) {
                    end = toInteger(end);
                    result =
                        end < 0
                            ? result.dropRight(-end)
                            : result.take(end - start);
                }
                return result;
            };

            LazyWrapper.prototype.takeRightWhile = function (predicate) {
                return this.reverse().takeWhile(predicate).reverse();
            };

            LazyWrapper.prototype.toArray = function () {
                return this.take(MAX_ARRAY_LENGTH);
            };

            // Add `LazyWrapper` methods to `lodash.prototype`.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(
                        methodName
                    ),
                    isTaker = /^(?:head|last)$/.test(methodName),
                    lodashFunc =
                        lodash[
                            isTaker
                                ? 'take' + (methodName == 'last' ? 'Right' : '')
                                : methodName
                        ],
                    retUnwrapped = isTaker || /^find/.test(methodName);

                if (!lodashFunc) {
                    return;
                }
                lodash.prototype[methodName] = function () {
                    var value = this.__wrapped__,
                        args = isTaker ? [1] : arguments,
                        isLazy = value instanceof LazyWrapper,
                        iteratee = args[0],
                        useLazy = isLazy || isArray(value);

                    var interceptor = function (value) {
                        var result = lodashFunc.apply(
                            lodash,
                            arrayPush([value], args)
                        );
                        return isTaker && chainAll ? result[0] : result;
                    };

                    if (
                        useLazy &&
                        checkIteratee &&
                        typeof iteratee == 'function' &&
                        iteratee.length != 1
                    ) {
                        // Avoid lazy use if the iteratee has a "length" value other than `1`.
                        isLazy = useLazy = false;
                    }
                    var chainAll = this.__chain__,
                        isHybrid = !!this.__actions__.length,
                        isUnwrapped = retUnwrapped && !chainAll,
                        onlyLazy = isLazy && !isHybrid;

                    if (!retUnwrapped && useLazy) {
                        value = onlyLazy ? value : new LazyWrapper(this);
                        var result = func.apply(value, args);
                        result.__actions__.push({
                            func: thru,
                            args: [interceptor],
                            thisArg: undefined$1,
                        });
                        return new LodashWrapper(result, chainAll);
                    }
                    if (isUnwrapped && onlyLazy) {
                        return func.apply(this, args);
                    }
                    result = this.thru(interceptor);
                    return isUnwrapped
                        ? isTaker
                            ? result.value()[0]
                            : result.value()
                        : result;
                };
            });

            // Add `Array` methods to `lodash.prototype`.
            arrayEach(
                ['pop', 'push', 'shift', 'sort', 'splice', 'unshift'],
                function (methodName) {
                    var func = arrayProto[methodName],
                        chainName = /^(?:push|sort|unshift)$/.test(methodName)
                            ? 'tap'
                            : 'thru',
                        retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                    lodash.prototype[methodName] = function () {
                        var args = arguments;
                        if (retUnwrapped && !this.__chain__) {
                            var value = this.value();
                            return func.apply(
                                isArray(value) ? value : [],
                                args
                            );
                        }
                        return this[chainName](function (value) {
                            return func.apply(
                                isArray(value) ? value : [],
                                args
                            );
                        });
                    };
                }
            );

            // Map minified method names to their real names.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                var lodashFunc = lodash[methodName];
                if (lodashFunc) {
                    var key = lodashFunc.name + '';
                    if (!hasOwnProperty.call(realNames, key)) {
                        realNames[key] = [];
                    }
                    realNames[key].push({ name: methodName, func: lodashFunc });
                }
            });

            realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [
                {
                    name: 'wrapper',
                    func: undefined$1,
                },
            ];

            // Add methods to `LazyWrapper`.
            LazyWrapper.prototype.clone = lazyClone;
            LazyWrapper.prototype.reverse = lazyReverse;
            LazyWrapper.prototype.value = lazyValue;

            // Add chain sequence methods to the `lodash` wrapper.
            lodash.prototype.at = wrapperAt;
            lodash.prototype.chain = wrapperChain;
            lodash.prototype.commit = wrapperCommit;
            lodash.prototype.next = wrapperNext;
            lodash.prototype.plant = wrapperPlant;
            lodash.prototype.reverse = wrapperReverse;
            lodash.prototype.toJSON =
                lodash.prototype.valueOf =
                lodash.prototype.value =
                    wrapperValue;

            // Add lazy aliases.
            lodash.prototype.first = lodash.prototype.head;

            if (symIterator) {
                lodash.prototype[symIterator] = wrapperToIterator;
            }
            return lodash;
        };

        /*--------------------------------------------------------------------------*/

        // Export lodash.
        var _ = runInContext();

        // Some AMD build optimizers, like r.js, check for condition patterns like:
        if (freeModule) {
            // Export for Node.js.
            (freeModule.exports = _)._ = _;
            // Export for CommonJS support.
            freeExports._ = _;
        } else {
            // Export to the global object.
            root._ = _;
        }
    }.call(commonjsGlobal));
})(lodash, lodash.exports);

var _ = lodash.exports;

/**
 * Obliterator Iterator Class
 * ===========================
 *
 * Simple class representing the library's iterators.
 */

/**
 * Iterator class.
 *
 * @constructor
 * @param {function} next - Next function.
 */
function Iterator$2(next) {
    if (typeof next !== 'function')
        throw new Error('obliterator/iterator: expecting a function!');

    this.next = next;
}

/**
 * If symbols are supported, we add `next` to `Symbol.iterator`.
 */
if (typeof Symbol !== 'undefined')
    Iterator$2.prototype[Symbol.iterator] = function () {
        return this;
    };

/**
 * Returning an iterator of the given values.
 *
 * @param  {any...} values - Values.
 * @return {Iterator}
 */
Iterator$2.of = function () {
    var args = arguments,
        l = args.length,
        i = 0;

    return new Iterator$2(function () {
        if (i >= l) return { done: true };

        return { done: false, value: args[i++] };
    });
};

/**
 * Returning an empty iterator.
 *
 * @return {Iterator}
 */
Iterator$2.empty = function () {
    var iterator = new Iterator$2(function () {
        return { done: true };
    });

    return iterator;
};

/**
 * Returning an iterator over the given indexed sequence.
 *
 * @param  {string|Array} sequence - Target sequence.
 * @return {Iterator}
 */
Iterator$2.fromSequence = function (sequence) {
    var i = 0,
        l = sequence.length;

    return new Iterator$2(function () {
        if (i >= l) return { done: true };

        return { done: false, value: sequence[i++] };
    });
};

/**
 * Returning whether the given value is an iterator.
 *
 * @param  {any} value - Value.
 * @return {boolean}
 */
Iterator$2.is = function (value) {
    if (value instanceof Iterator$2) return true;

    return (
        typeof value === 'object' &&
        value !== null &&
        typeof value.next === 'function'
    );
};

/**
 * Exporting.
 */
var iterator = Iterator$2;

var support$1 = {};

support$1.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined';
support$1.SYMBOL_SUPPORT = typeof Symbol !== 'undefined';

/**
 * Obliterator Iter Function
 * ==========================
 *
 * Function coercing values to an iterator. It can be quite useful when needing
 * to handle iterables and iterators the same way.
 */

var Iterator$1 = iterator;
var support = support$1;

var ARRAY_BUFFER_SUPPORT = support.ARRAY_BUFFER_SUPPORT;
var SYMBOL_SUPPORT = support.SYMBOL_SUPPORT;

function iterOrNull(target) {
    // Indexed sequence
    if (
        typeof target === 'string' ||
        Array.isArray(target) ||
        (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(target))
    )
        return Iterator$1.fromSequence(target);

    // Invalid value
    if (typeof target !== 'object' || target === null) return null;

    // Iterable
    if (SYMBOL_SUPPORT && typeof target[Symbol.iterator] === 'function')
        return target[Symbol.iterator]();

    // Iterator duck-typing
    if (typeof target.next === 'function') return target;

    // Invalid object
    return null;
}

var iter$2 = function iter(target) {
    var iterator = iterOrNull(target);

    if (!iterator)
        throw new Error(
            'obliterator: target is not iterable nor a valid iterator.'
        );

    return iterator;
};

/* eslint no-constant-condition: 0 */

/**
 * Obliterator Take Function
 * ==========================
 *
 * Function taking n or every value of the given iterator and returns them
 * into an array.
 */
var iter$1 = iter$2;

/**
 * Take.
 *
 * @param  {Iterable} iterable - Target iterable.
 * @param  {number}   [n]      - Optional number of items to take.
 * @return {array}
 */
var take = function take(iterable, n) {
    var l = arguments.length > 1 ? n : Infinity,
        array = l !== Infinity ? new Array(l) : [],
        step,
        i = 0;

    var iterator = iter$1(iterable);

    while (true) {
        if (i === l) return array;

        step = iterator.next();

        if (step.done) {
            if (i !== n) array.length = i;

            return array;
        }

        array[i++] = step.value;
    }
};

/**
 * Obliterator Chain Function
 * ===========================
 *
 * Variadic function combining the given iterables.
 */

var Iterator = iterator,
    iter = iter$2;

/**
 * Chain.
 *
 * @param  {...Iterator} iterables - Target iterables.
 * @return {Iterator}
 */
var chain = function chain() {
    var iterables = arguments;
    var current = null;
    var i = -1;

    return new Iterator(function iterate() {
        if (current === null) {
            i++;

            if (i >= iterables.length) return { done: true };

            current = iter(iterables[i]);
        }

        var step = current.next();

        if (step.done) {
            current = null;
            return iterate();
        }

        return step;
    });
};

/**
 * Graphology Utilities
 * =====================
 *
 * Collection of helpful functions used by the implementation.
 */

/**
 * Object.assign-like polyfill.
 *
 * @param  {object} target       - First object.
 * @param  {object} [...objects] - Objects to merge.
 * @return {object}
 */
function assignPolyfill() {
    const target = arguments[0];

    for (let i = 1, l = arguments.length; i < l; i++) {
        if (!arguments[i]) continue;

        for (const k in arguments[i]) target[k] = arguments[i][k];
    }

    return target;
}

let assign = assignPolyfill;

if (typeof Object.assign === 'function') assign = Object.assign;

/**
 * Function returning the first matching edge for given path.
 * Note: this function does not check the existence of source & target. This
 * must be performed by the caller.
 *
 * @param  {Graph}  graph  - Target graph.
 * @param  {any}    source - Source node.
 * @param  {any}    target - Target node.
 * @param  {string} type   - Type of the edge (mixed, directed or undirected).
 * @return {string|null}
 */
function getMatchingEdge(graph, source, target, type) {
    const sourceData = graph._nodes.get(source);

    let edge = null;

    if (!sourceData) return edge;

    if (type === 'mixed') {
        edge =
            (sourceData.out && sourceData.out[target]) ||
            (sourceData.undirected && sourceData.undirected[target]);
    } else if (type === 'directed') {
        edge = sourceData.out && sourceData.out[target];
    } else {
        edge = sourceData.undirected && sourceData.undirected[target];
    }

    return edge;
}

/**
 * Checks whether the given value is a Graph implementation instance.
 *
 * @param  {mixed}   value - Target value.
 * @return {boolean}
 */
function isGraph(value) {
    return (
        value !== null &&
        typeof value === 'object' &&
        typeof value.addUndirectedEdgeWithKey === 'function' &&
        typeof value.dropNode === 'function'
    );
}

/**
 * Checks whether the given value is a plain object.
 *
 * @param  {mixed}   value - Target value.
 * @return {boolean}
 */
function isPlainObject(value) {
    return (
        typeof value === 'object' &&
        value !== null &&
        value.constructor === Object
    );
}

/**
 * Checks whether the given object is empty.
 *
 * @param  {object}  o - Target Object.
 * @return {boolean}
 */
function isEmpty(o) {
    let k;

    for (k in o) return false;

    return true;
}

/**
 * Creates a "private" property for the given member name by concealing it
 * using the `enumerable` option.
 *
 * @param {object} target - Target object.
 * @param {string} name   - Member name.
 */
function privateProperty(target, name, value) {
    Object.defineProperty(target, name, {
        enumerable: false,
        configurable: false,
        writable: true,
        value,
    });
}

/**
 * Creates a read-only property for the given member name & the given getter.
 *
 * @param {object}   target - Target object.
 * @param {string}   name   - Member name.
 * @param {mixed}    value  - The attached getter or fixed value.
 */
function readOnlyProperty(target, name, value) {
    const descriptor = {
        enumerable: true,
        configurable: true,
    };

    if (typeof value === 'function') {
        descriptor.get = value;
    } else {
        descriptor.value = value;
        descriptor.writable = false;
    }

    Object.defineProperty(target, name, descriptor);
}

/**
 * Returns whether the given object constitute valid hints.
 *
 * @param {object} hints - Target object.
 */
function validateHints(hints) {
    if (!isPlainObject(hints)) return false;

    if (hints.attributes && !Array.isArray(hints.attributes)) return false;

    return true;
}

/**
 * Creates a function generating incremental ids for edges.
 *
 * @return {function}
 */
function incrementalIdStartingFromRandomByte() {
    let i = Math.floor(Math.random() * 256) & 0xff;

    return () => {
        return i++;
    };
}

/**
 * Graphology Custom Errors
 * =========================
 *
 * Defining custom errors for ease of use & easy unit tests across
 * implementations (normalized typology rather than relying on error
 * messages to check whether the correct error was found).
 */
class GraphError extends Error {
    constructor(message) {
        super();
        this.name = 'GraphError';
        this.message = message;
    }
}

class InvalidArgumentsGraphError extends GraphError {
    constructor(message) {
        super(message);
        this.name = 'InvalidArgumentsGraphError';

        // This is V8 specific to enhance stack readability
        if (typeof Error.captureStackTrace === 'function')
            Error.captureStackTrace(
                this,
                InvalidArgumentsGraphError.prototype.constructor
            );
    }
}

class NotFoundGraphError extends GraphError {
    constructor(message) {
        super(message);
        this.name = 'NotFoundGraphError';

        // This is V8 specific to enhance stack readability
        if (typeof Error.captureStackTrace === 'function')
            Error.captureStackTrace(
                this,
                NotFoundGraphError.prototype.constructor
            );
    }
}

class UsageGraphError extends GraphError {
    constructor(message) {
        super(message);
        this.name = 'UsageGraphError';

        // This is V8 specific to enhance stack readability
        if (typeof Error.captureStackTrace === 'function')
            Error.captureStackTrace(
                this,
                UsageGraphError.prototype.constructor
            );
    }
}

/**
 * Graphology Internal Data Classes
 * =================================
 *
 * Internal classes hopefully reduced to structs by engines & storing
 * necessary information for nodes & edges.
 *
 * Note that those classes don't rely on the `class` keyword to avoid some
 * cruft introduced by most of ES2015 transpilers.
 */

/**
 * MixedNodeData class.
 *
 * @constructor
 * @param {string} string     - The node's key.
 * @param {object} attributes - Node's attributes.
 */
function MixedNodeData(key, attributes) {
    // Attributes
    this.key = key;
    this.attributes = attributes;

    this.clear();
}

MixedNodeData.prototype.clear = function () {
    // Degrees
    this.inDegree = 0;
    this.outDegree = 0;
    this.undirectedDegree = 0;
    this.directedSelfLoops = 0;
    this.undirectedSelfLoops = 0;

    // Indices
    this.in = {};
    this.out = {};
    this.undirected = {};
};

/**
 * DirectedNodeData class.
 *
 * @constructor
 * @param {string} string     - The node's key.
 * @param {object} attributes - Node's attributes.
 */
function DirectedNodeData(key, attributes) {
    // Attributes
    this.key = key;
    this.attributes = attributes;

    this.clear();
}

DirectedNodeData.prototype.clear = function () {
    // Degrees
    this.inDegree = 0;
    this.outDegree = 0;
    this.directedSelfLoops = 0;

    // Indices
    this.in = {};
    this.out = {};
};

DirectedNodeData.prototype.upgradeToMixed = function () {
    // Degrees
    this.undirectedDegree = 0;
    this.undirectedSelfLoops = 0;

    // Indices
    this.undirected = {};
};

/**
 * UndirectedNodeData class.
 *
 * @constructor
 * @param {string} string     - The node's key.
 * @param {object} attributes - Node's attributes.
 */
function UndirectedNodeData(key, attributes) {
    // Attributes
    this.key = key;
    this.attributes = attributes;

    this.clear();
}

UndirectedNodeData.prototype.clear = function () {
    // Degrees
    this.undirectedDegree = 0;
    this.undirectedSelfLoops = 0;

    // Indices
    this.undirected = {};
};

UndirectedNodeData.prototype.upgradeToMixed = function () {
    // Degrees
    this.inDegree = 0;
    this.outDegree = 0;
    this.directedSelfLoops = 0;

    // Indices
    this.in = {};
    this.out = {};
};

/**
 * EdgeData class.
 *
 * @constructor
 * @param {boolean} undirected   - Whether the edge is undirected.
 * @param {string}  string       - The edge's key.
 * @param {string}  source       - Source of the edge.
 * @param {string}  target       - Target of the edge.
 * @param {object}  attributes   - Edge's attributes.
 */
function EdgeData(undirected, key, source, target, attributes) {
    // Attributes
    this.key = key;
    this.attributes = attributes;
    this.undirected = undirected;

    // Extremities
    this.source = source;
    this.target = target;
}

/**
 * Graphology Indexes Functions
 * =============================
 *
 * Bunch of functions used to compute or clear indexes.
 */

/**
 * Function updating the 'structure' index with the given edge's data.
 * Note that in the case of the multi graph, related edges are stored in a
 * set that is the same for A -> B & B <- A.
 *
 * @param {Graph}    graph      - Target Graph instance.
 * @param {EdgeData} edgeData   - Added edge's data.
 * @param {NodeData} sourceData - Source node's data.
 * @param {NodeData} targetData - Target node's data.
 */
function updateStructureIndex(
    graph,
    undirected,
    edgeData,
    source,
    target,
    sourceData,
    targetData
) {
    const multi = graph.multi;

    let outKey = 'out';
    let inKey = 'in';

    if (undirected) outKey = inKey = 'undirected';

    let adj, container;

    if (multi) {
        // Handling source
        adj = sourceData[outKey];
        container = adj[target];

        if (typeof container === 'undefined') {
            container = new Set();
            adj[target] = container;
        }

        container.add(edgeData);

        // If selfLoop, we break here
        if (source === target && undirected) return;

        // Handling target (we won't add the edge because it was already taken
        // care of with source above)
        adj = targetData[inKey];
        if (typeof adj[source] === 'undefined') adj[source] = container;
    } else {
        // Handling source
        sourceData[outKey][target] = edgeData;

        // If selfLoop, we break here
        if (source === target && undirected) return;

        // Handling target
        targetData[inKey][source] = edgeData;
    }
}

/**
 * Function clearing the 'structure' index data related to the given edge.
 *
 * @param {Graph}    graph    - Target Graph instance.
 * @param {EdgeData} edgeData - Dropped edge's data.
 */
function clearEdgeFromStructureIndex(graph, undirected, edgeData) {
    const multi = graph.multi;

    const { source: sourceData, target: targetData } = edgeData;

    const source = sourceData.key,
        target = targetData.key;

    // NOTE: since the edge set is the same for source & target, we can only
    // affect source
    const outKey = undirected ? 'undirected' : 'out',
        sourceIndex = sourceData[outKey];

    const inKey = undirected ? 'undirected' : 'in';

    if (target in sourceIndex) {
        if (multi) {
            const set = sourceIndex[target];

            if (set.size === 1) {
                delete sourceIndex[target];
                delete targetData[inKey][source];
            } else {
                set.delete(edgeData);
            }
        } else delete sourceIndex[target];
    }

    if (multi) return;

    const targetIndex = targetData[inKey];

    delete targetIndex[source];
}

/**
 * Function clearing the whole 'structure' index.
 *
 * @param {Graph} graph - Target Graph instance.
 */
function clearStructureIndex(graph) {
    const iterator = graph._nodes.values();

    let step;

    while (((step = iterator.next()), step.done !== true)) {
        step.value.clear();
    }
}

/**
 * Function used to upgrade a simple `structure` index to a multi on.
 *
 * @param {Graph}  graph - Target Graph instance.
 */
function upgradeStructureIndexToMulti(graph) {
    graph._nodes.forEach((data, node) => {
        // Directed
        if (data.out) {
            for (const neighbor in data.out) {
                const edges = new Set();
                edges.add(data.out[neighbor]);
                data.out[neighbor] = edges;
                graph._nodes.get(neighbor).in[node] = edges;
            }
        }

        // Undirected
        if (data.undirected) {
            for (const neighbor in data.undirected) {
                if (neighbor > node) continue;

                const edges = new Set();
                edges.add(data.undirected[neighbor]);
                data.undirected[neighbor] = edges;
                graph._nodes.get(neighbor).undirected[node] = edges;
            }
        }
    });
}

/**
 * Graphology Node Attributes methods
 * ===================================
 */

const NODE = 0;
const SOURCE = 1;
const TARGET = 2;
const OPPOSITE = 3;

function findRelevantNodeData(
    graph,
    method,
    mode,
    nodeOrEdge,
    nameOrEdge,
    add1,
    add2
) {
    let nodeData, edgeData, arg1, arg2;

    nodeOrEdge = '' + nodeOrEdge;

    if (mode === NODE) {
        nodeData = graph._nodes.get(nodeOrEdge);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.${method}: could not find the "${nodeOrEdge}" node in the graph.`
            );

        arg1 = nameOrEdge;
        arg2 = add1;
    } else if (mode === OPPOSITE) {
        nameOrEdge = '' + nameOrEdge;

        edgeData = graph._edges.get(nameOrEdge);

        if (!edgeData)
            throw new NotFoundGraphError(
                `Graph.${method}: could not find the "${nameOrEdge}" edge in the graph.`
            );

        const source = edgeData.source.key;
        const target = edgeData.target.key;

        if (nodeOrEdge === source) {
            nodeData = edgeData.target;
        } else if (nodeOrEdge === target) {
            nodeData = edgeData.source;
        } else {
            throw new NotFoundGraphError(
                `Graph.${method}: the "${nodeOrEdge}" node is not attached to the "${nameOrEdge}" edge (${source}, ${target}).`
            );
        }

        arg1 = add1;
        arg2 = add2;
    } else {
        edgeData = graph._edges.get(nodeOrEdge);

        if (!edgeData)
            throw new NotFoundGraphError(
                `Graph.${method}: could not find the "${nodeOrEdge}" edge in the graph.`
            );

        if (mode === SOURCE) {
            nodeData = edgeData.source;
        } else {
            nodeData = edgeData.target;
        }

        arg1 = nameOrEdge;
        arg2 = add1;
    }

    return [nodeData, arg1, arg2];
}

function attachNodeAttributeGetter(Class, method, mode) {
    Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {
        const [data, name] = findRelevantNodeData(
            this,
            method,
            mode,
            nodeOrEdge,
            nameOrEdge,
            add1
        );

        return data.attributes[name];
    };
}

function attachNodeAttributesGetter(Class, method, mode) {
    Class.prototype[method] = function (nodeOrEdge, nameOrEdge) {
        const [data] = findRelevantNodeData(
            this,
            method,
            mode,
            nodeOrEdge,
            nameOrEdge
        );

        return data.attributes;
    };
}

function attachNodeAttributeChecker(Class, method, mode) {
    Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {
        const [data, name] = findRelevantNodeData(
            this,
            method,
            mode,
            nodeOrEdge,
            nameOrEdge,
            add1
        );

        return data.attributes.hasOwnProperty(name);
    };
}

function attachNodeAttributeSetter(Class, method, mode) {
    Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {
        const [data, name, value] = findRelevantNodeData(
            this,
            method,
            mode,
            nodeOrEdge,
            nameOrEdge,
            add1,
            add2
        );

        data.attributes[name] = value;

        // Emitting
        this.emit('nodeAttributesUpdated', {
            key: data.key,
            type: 'set',
            attributes: data.attributes,
            name,
        });

        return this;
    };
}

function attachNodeAttributeUpdater(Class, method, mode) {
    Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {
        const [data, name, updater] = findRelevantNodeData(
            this,
            method,
            mode,
            nodeOrEdge,
            nameOrEdge,
            add1,
            add2
        );

        if (typeof updater !== 'function')
            throw new InvalidArgumentsGraphError(
                `Graph.${method}: updater should be a function.`
            );

        const attributes = data.attributes;
        const value = updater(attributes[name]);

        attributes[name] = value;

        // Emitting
        this.emit('nodeAttributesUpdated', {
            key: data.key,
            type: 'set',
            attributes: data.attributes,
            name,
        });

        return this;
    };
}

function attachNodeAttributeRemover(Class, method, mode) {
    Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {
        const [data, name] = findRelevantNodeData(
            this,
            method,
            mode,
            nodeOrEdge,
            nameOrEdge,
            add1
        );

        delete data.attributes[name];

        // Emitting
        this.emit('nodeAttributesUpdated', {
            key: data.key,
            type: 'remove',
            attributes: data.attributes,
            name,
        });

        return this;
    };
}

function attachNodeAttributesReplacer(Class, method, mode) {
    Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {
        const [data, attributes] = findRelevantNodeData(
            this,
            method,
            mode,
            nodeOrEdge,
            nameOrEdge,
            add1
        );

        if (!isPlainObject(attributes))
            throw new InvalidArgumentsGraphError(
                `Graph.${method}: provided attributes are not a plain object.`
            );

        data.attributes = attributes;

        // Emitting
        this.emit('nodeAttributesUpdated', {
            key: data.key,
            type: 'replace',
            attributes: data.attributes,
        });

        return this;
    };
}

function attachNodeAttributesMerger(Class, method, mode) {
    Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {
        const [data, attributes] = findRelevantNodeData(
            this,
            method,
            mode,
            nodeOrEdge,
            nameOrEdge,
            add1
        );

        if (!isPlainObject(attributes))
            throw new InvalidArgumentsGraphError(
                `Graph.${method}: provided attributes are not a plain object.`
            );

        assign(data.attributes, attributes);

        // Emitting
        this.emit('nodeAttributesUpdated', {
            key: data.key,
            type: 'merge',
            attributes: data.attributes,
            data: attributes,
        });

        return this;
    };
}

function attachNodeAttributesUpdater(Class, method, mode) {
    Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {
        const [data, updater] = findRelevantNodeData(
            this,
            method,
            mode,
            nodeOrEdge,
            nameOrEdge,
            add1
        );

        if (typeof updater !== 'function')
            throw new InvalidArgumentsGraphError(
                `Graph.${method}: provided updater is not a function.`
            );

        data.attributes = updater(data.attributes);

        // Emitting
        this.emit('nodeAttributesUpdated', {
            key: data.key,
            type: 'update',
            attributes: data.attributes,
        });

        return this;
    };
}

/**
 * List of methods to attach.
 */
const NODE_ATTRIBUTES_METHODS = [
    {
        name: (element) => `get${element}Attribute`,
        attacher: attachNodeAttributeGetter,
    },
    {
        name: (element) => `get${element}Attributes`,
        attacher: attachNodeAttributesGetter,
    },
    {
        name: (element) => `has${element}Attribute`,
        attacher: attachNodeAttributeChecker,
    },
    {
        name: (element) => `set${element}Attribute`,
        attacher: attachNodeAttributeSetter,
    },
    {
        name: (element) => `update${element}Attribute`,
        attacher: attachNodeAttributeUpdater,
    },
    {
        name: (element) => `remove${element}Attribute`,
        attacher: attachNodeAttributeRemover,
    },
    {
        name: (element) => `replace${element}Attributes`,
        attacher: attachNodeAttributesReplacer,
    },
    {
        name: (element) => `merge${element}Attributes`,
        attacher: attachNodeAttributesMerger,
    },
    {
        name: (element) => `update${element}Attributes`,
        attacher: attachNodeAttributesUpdater,
    },
];

/**
 * Attach every attributes-related methods to a Graph class.
 *
 * @param {function} Graph - Target class.
 */
function attachNodeAttributesMethods(Graph) {
    NODE_ATTRIBUTES_METHODS.forEach(function ({ name, attacher }) {
        // For nodes
        attacher(Graph, name('Node'), NODE);

        // For sources
        attacher(Graph, name('Source'), SOURCE);

        // For targets
        attacher(Graph, name('Target'), TARGET);

        // For opposites
        attacher(Graph, name('Opposite'), OPPOSITE);
    });
}

/**
 * Graphology Edge Attributes methods
 * ===================================
 */

/**
 * Attach an attribute getter method onto the provided class.
 *
 * @param {function} Class         - Target class.
 * @param {string}   method        - Method name.
 * @param {string}   type          - Type of the edge to find.
 */
function attachEdgeAttributeGetter(Class, method, type) {
    /**
     * Get the desired attribute for the given element (node or edge).
     *
     * Arity 2:
     * @param  {any}    element - Target element.
     * @param  {string} name    - Attribute's name.
     *
     * Arity 3 (only for edges):
     * @param  {any}     source - Source element.
     * @param  {any}     target - Target element.
     * @param  {string}  name   - Attribute's name.
     *
     * @return {mixed}          - The attribute's value.
     *
     * @throws {Error} - Will throw if too many arguments are provided.
     * @throws {Error} - Will throw if any of the elements is not found.
     */
    Class.prototype[method] = function (element, name) {
        let data;

        if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)
            throw new UsageGraphError(
                `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`
            );

        if (arguments.length > 2) {
            if (this.multi)
                throw new UsageGraphError(
                    `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`
                );

            const source = '' + element,
                target = '' + name;

            name = arguments[2];

            data = getMatchingEdge(this, source, target, type);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find an edge for the given path ("${source}" - "${target}").`
                );
        } else {
            element = '' + element;
            data = this._edges.get(element);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find the "${element}" edge in the graph.`
                );
        }

        if (type !== 'mixed' && data.undirected !== (type === 'undirected'))
            throw new NotFoundGraphError(
                `Graph.${method}: could not find the "${element}" ${type} edge in the graph.`
            );

        return data.attributes[name];
    };
}

/**
 * Attach an attributes getter method onto the provided class.
 *
 * @param {function} Class       - Target class.
 * @param {string}   method      - Method name.
 * @param {string}   type        - Type of the edge to find.
 */
function attachEdgeAttributesGetter(Class, method, type) {
    /**
     * Retrieves all the target element's attributes.
     *
     * Arity 2:
     * @param  {any}    element - Target element.
     *
     * Arity 3 (only for edges):
     * @param  {any}     source - Source element.
     * @param  {any}     target - Target element.
     *
     * @return {object}          - The element's attributes.
     *
     * @throws {Error} - Will throw if too many arguments are provided.
     * @throws {Error} - Will throw if any of the elements is not found.
     */
    Class.prototype[method] = function (element) {
        let data;

        if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)
            throw new UsageGraphError(
                `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`
            );

        if (arguments.length > 1) {
            if (this.multi)
                throw new UsageGraphError(
                    `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`
                );

            const source = '' + element,
                target = '' + arguments[1];

            data = getMatchingEdge(this, source, target, type);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find an edge for the given path ("${source}" - "${target}").`
                );
        } else {
            element = '' + element;
            data = this._edges.get(element);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find the "${element}" edge in the graph.`
                );
        }

        if (type !== 'mixed' && data.undirected !== (type === 'undirected'))
            throw new NotFoundGraphError(
                `Graph.${method}: could not find the "${element}" ${type} edge in the graph.`
            );

        return data.attributes;
    };
}

/**
 * Attach an attribute checker method onto the provided class.
 *
 * @param {function} Class       - Target class.
 * @param {string}   method      - Method name.
 * @param {string}   type        - Type of the edge to find.
 */
function attachEdgeAttributeChecker(Class, method, type) {
    /**
     * Checks whether the desired attribute is set for the given element (node or edge).
     *
     * Arity 2:
     * @param  {any}    element - Target element.
     * @param  {string} name    - Attribute's name.
     *
     * Arity 3 (only for edges):
     * @param  {any}     source - Source element.
     * @param  {any}     target - Target element.
     * @param  {string}  name   - Attribute's name.
     *
     * @return {boolean}
     *
     * @throws {Error} - Will throw if too many arguments are provided.
     * @throws {Error} - Will throw if any of the elements is not found.
     */
    Class.prototype[method] = function (element, name) {
        let data;

        if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)
            throw new UsageGraphError(
                `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`
            );

        if (arguments.length > 2) {
            if (this.multi)
                throw new UsageGraphError(
                    `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`
                );

            const source = '' + element,
                target = '' + name;

            name = arguments[2];

            data = getMatchingEdge(this, source, target, type);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find an edge for the given path ("${source}" - "${target}").`
                );
        } else {
            element = '' + element;
            data = this._edges.get(element);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find the "${element}" edge in the graph.`
                );
        }

        if (type !== 'mixed' && data.undirected !== (type === 'undirected'))
            throw new NotFoundGraphError(
                `Graph.${method}: could not find the "${element}" ${type} edge in the graph.`
            );

        return data.attributes.hasOwnProperty(name);
    };
}

/**
 * Attach an attribute setter method onto the provided class.
 *
 * @param {function} Class         - Target class.
 * @param {string}   method        - Method name.
 * @param {string}   type          - Type of the edge to find.
 */
function attachEdgeAttributeSetter(Class, method, type) {
    /**
     * Set the desired attribute for the given element (node or edge).
     *
     * Arity 2:
     * @param  {any}    element - Target element.
     * @param  {string} name    - Attribute's name.
     * @param  {mixed}  value   - New attribute value.
     *
     * Arity 3 (only for edges):
     * @param  {any}     source - Source element.
     * @param  {any}     target - Target element.
     * @param  {string}  name   - Attribute's name.
     * @param  {mixed}  value   - New attribute value.
     *
     * @return {Graph}          - Returns itself for chaining.
     *
     * @throws {Error} - Will throw if too many arguments are provided.
     * @throws {Error} - Will throw if any of the elements is not found.
     */
    Class.prototype[method] = function (element, name, value) {
        let data;

        if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)
            throw new UsageGraphError(
                `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`
            );

        if (arguments.length > 3) {
            if (this.multi)
                throw new UsageGraphError(
                    `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`
                );

            const source = '' + element,
                target = '' + name;

            name = arguments[2];
            value = arguments[3];

            data = getMatchingEdge(this, source, target, type);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find an edge for the given path ("${source}" - "${target}").`
                );
        } else {
            element = '' + element;
            data = this._edges.get(element);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find the "${element}" edge in the graph.`
                );
        }

        if (type !== 'mixed' && data.undirected !== (type === 'undirected'))
            throw new NotFoundGraphError(
                `Graph.${method}: could not find the "${element}" ${type} edge in the graph.`
            );

        data.attributes[name] = value;

        // Emitting
        this.emit('edgeAttributesUpdated', {
            key: data.key,
            type: 'set',
            attributes: data.attributes,
            name,
        });

        return this;
    };
}

/**
 * Attach an attribute updater method onto the provided class.
 *
 * @param {function} Class         - Target class.
 * @param {string}   method        - Method name.
 * @param {string}   type          - Type of the edge to find.
 */
function attachEdgeAttributeUpdater(Class, method, type) {
    /**
     * Update the desired attribute for the given element (node or edge) using
     * the provided function.
     *
     * Arity 2:
     * @param  {any}      element - Target element.
     * @param  {string}   name    - Attribute's name.
     * @param  {function} updater - Updater function.
     *
     * Arity 3 (only for edges):
     * @param  {any}      source  - Source element.
     * @param  {any}      target  - Target element.
     * @param  {string}   name    - Attribute's name.
     * @param  {function} updater - Updater function.
     *
     * @return {Graph}            - Returns itself for chaining.
     *
     * @throws {Error} - Will throw if too many arguments are provided.
     * @throws {Error} - Will throw if any of the elements is not found.
     */
    Class.prototype[method] = function (element, name, updater) {
        let data;

        if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)
            throw new UsageGraphError(
                `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`
            );

        if (arguments.length > 3) {
            if (this.multi)
                throw new UsageGraphError(
                    `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`
                );

            const source = '' + element,
                target = '' + name;

            name = arguments[2];
            updater = arguments[3];

            data = getMatchingEdge(this, source, target, type);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find an edge for the given path ("${source}" - "${target}").`
                );
        } else {
            element = '' + element;
            data = this._edges.get(element);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find the "${element}" edge in the graph.`
                );
        }

        if (typeof updater !== 'function')
            throw new InvalidArgumentsGraphError(
                `Graph.${method}: updater should be a function.`
            );

        if (type !== 'mixed' && data.undirected !== (type === 'undirected'))
            throw new NotFoundGraphError(
                `Graph.${method}: could not find the "${element}" ${type} edge in the graph.`
            );

        data.attributes[name] = updater(data.attributes[name]);

        // Emitting
        this.emit('edgeAttributesUpdated', {
            key: data.key,
            type: 'set',
            attributes: data.attributes,
            name,
        });

        return this;
    };
}

/**
 * Attach an attribute remover method onto the provided class.
 *
 * @param {function} Class         - Target class.
 * @param {string}   method        - Method name.
 * @param {string}   type          - Type of the edge to find.
 */
function attachEdgeAttributeRemover(Class, method, type) {
    /**
     * Remove the desired attribute for the given element (node or edge).
     *
     * Arity 2:
     * @param  {any}    element - Target element.
     * @param  {string} name    - Attribute's name.
     *
     * Arity 3 (only for edges):
     * @param  {any}     source - Source element.
     * @param  {any}     target - Target element.
     * @param  {string}  name   - Attribute's name.
     *
     * @return {Graph}          - Returns itself for chaining.
     *
     * @throws {Error} - Will throw if too many arguments are provided.
     * @throws {Error} - Will throw if any of the elements is not found.
     */
    Class.prototype[method] = function (element, name) {
        let data;

        if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)
            throw new UsageGraphError(
                `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`
            );

        if (arguments.length > 2) {
            if (this.multi)
                throw new UsageGraphError(
                    `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`
                );

            const source = '' + element,
                target = '' + name;

            name = arguments[2];

            data = getMatchingEdge(this, source, target, type);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find an edge for the given path ("${source}" - "${target}").`
                );
        } else {
            element = '' + element;
            data = this._edges.get(element);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find the "${element}" edge in the graph.`
                );
        }

        if (type !== 'mixed' && data.undirected !== (type === 'undirected'))
            throw new NotFoundGraphError(
                `Graph.${method}: could not find the "${element}" ${type} edge in the graph.`
            );

        delete data.attributes[name];

        // Emitting
        this.emit('edgeAttributesUpdated', {
            key: data.key,
            type: 'remove',
            attributes: data.attributes,
            name,
        });

        return this;
    };
}

/**
 * Attach an attribute replacer method onto the provided class.
 *
 * @param {function} Class         - Target class.
 * @param {string}   method        - Method name.
 * @param {string}   type          - Type of the edge to find.
 */
function attachEdgeAttributesReplacer(Class, method, type) {
    /**
     * Replace the attributes for the given element (node or edge).
     *
     * Arity 2:
     * @param  {any}    element    - Target element.
     * @param  {object} attributes - New attributes.
     *
     * Arity 3 (only for edges):
     * @param  {any}     source     - Source element.
     * @param  {any}     target     - Target element.
     * @param  {object}  attributes - New attributes.
     *
     * @return {Graph}              - Returns itself for chaining.
     *
     * @throws {Error} - Will throw if too many arguments are provided.
     * @throws {Error} - Will throw if any of the elements is not found.
     */
    Class.prototype[method] = function (element, attributes) {
        let data;

        if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)
            throw new UsageGraphError(
                `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`
            );

        if (arguments.length > 2) {
            if (this.multi)
                throw new UsageGraphError(
                    `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`
                );

            const source = '' + element,
                target = '' + attributes;

            attributes = arguments[2];

            data = getMatchingEdge(this, source, target, type);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find an edge for the given path ("${source}" - "${target}").`
                );
        } else {
            element = '' + element;
            data = this._edges.get(element);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find the "${element}" edge in the graph.`
                );
        }

        if (!isPlainObject(attributes))
            throw new InvalidArgumentsGraphError(
                `Graph.${method}: provided attributes are not a plain object.`
            );

        if (type !== 'mixed' && data.undirected !== (type === 'undirected'))
            throw new NotFoundGraphError(
                `Graph.${method}: could not find the "${element}" ${type} edge in the graph.`
            );

        data.attributes = attributes;

        // Emitting
        this.emit('edgeAttributesUpdated', {
            key: data.key,
            type: 'replace',
            attributes: data.attributes,
        });

        return this;
    };
}

/**
 * Attach an attribute merger method onto the provided class.
 *
 * @param {function} Class         - Target class.
 * @param {string}   method        - Method name.
 * @param {string}   type          - Type of the edge to find.
 */
function attachEdgeAttributesMerger(Class, method, type) {
    /**
     * Merge the attributes for the given element (node or edge).
     *
     * Arity 2:
     * @param  {any}    element    - Target element.
     * @param  {object} attributes - Attributes to merge.
     *
     * Arity 3 (only for edges):
     * @param  {any}     source     - Source element.
     * @param  {any}     target     - Target element.
     * @param  {object}  attributes - Attributes to merge.
     *
     * @return {Graph}              - Returns itself for chaining.
     *
     * @throws {Error} - Will throw if too many arguments are provided.
     * @throws {Error} - Will throw if any of the elements is not found.
     */
    Class.prototype[method] = function (element, attributes) {
        let data;

        if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)
            throw new UsageGraphError(
                `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`
            );

        if (arguments.length > 2) {
            if (this.multi)
                throw new UsageGraphError(
                    `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`
                );

            const source = '' + element,
                target = '' + attributes;

            attributes = arguments[2];

            data = getMatchingEdge(this, source, target, type);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find an edge for the given path ("${source}" - "${target}").`
                );
        } else {
            element = '' + element;
            data = this._edges.get(element);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find the "${element}" edge in the graph.`
                );
        }

        if (!isPlainObject(attributes))
            throw new InvalidArgumentsGraphError(
                `Graph.${method}: provided attributes are not a plain object.`
            );

        if (type !== 'mixed' && data.undirected !== (type === 'undirected'))
            throw new NotFoundGraphError(
                `Graph.${method}: could not find the "${element}" ${type} edge in the graph.`
            );

        assign(data.attributes, attributes);

        // Emitting
        this.emit('edgeAttributesUpdated', {
            key: data.key,
            type: 'merge',
            attributes: data.attributes,
            data: attributes,
        });

        return this;
    };
}

/**
 * Attach an attribute updater method onto the provided class.
 *
 * @param {function} Class         - Target class.
 * @param {string}   method        - Method name.
 * @param {string}   type          - Type of the edge to find.
 */
function attachEdgeAttributesUpdater(Class, method, type) {
    /**
     * Update the attributes of the given element (node or edge).
     *
     * Arity 2:
     * @param  {any}      element - Target element.
     * @param  {function} updater - Updater function.
     *
     * Arity 3 (only for edges):
     * @param  {any}      source  - Source element.
     * @param  {any}      target  - Target element.
     * @param  {function} updater - Updater function.
     *
     * @return {Graph}            - Returns itself for chaining.
     *
     * @throws {Error} - Will throw if too many arguments are provided.
     * @throws {Error} - Will throw if any of the elements is not found.
     */
    Class.prototype[method] = function (element, updater) {
        let data;

        if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)
            throw new UsageGraphError(
                `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`
            );

        if (arguments.length > 2) {
            if (this.multi)
                throw new UsageGraphError(
                    `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`
                );

            const source = '' + element,
                target = '' + updater;

            updater = arguments[2];

            data = getMatchingEdge(this, source, target, type);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find an edge for the given path ("${source}" - "${target}").`
                );
        } else {
            element = '' + element;
            data = this._edges.get(element);

            if (!data)
                throw new NotFoundGraphError(
                    `Graph.${method}: could not find the "${element}" edge in the graph.`
                );
        }

        if (typeof updater !== 'function')
            throw new InvalidArgumentsGraphError(
                `Graph.${method}: provided updater is not a function.`
            );

        if (type !== 'mixed' && data.undirected !== (type === 'undirected'))
            throw new NotFoundGraphError(
                `Graph.${method}: could not find the "${element}" ${type} edge in the graph.`
            );

        data.attributes = updater(data.attributes);

        // Emitting
        this.emit('edgeAttributesUpdated', {
            key: data.key,
            type: 'update',
            attributes: data.attributes,
        });

        return this;
    };
}

/**
 * List of methods to attach.
 */
const EDGE_ATTRIBUTES_METHODS = [
    {
        name: (element) => `get${element}Attribute`,
        attacher: attachEdgeAttributeGetter,
    },
    {
        name: (element) => `get${element}Attributes`,
        attacher: attachEdgeAttributesGetter,
    },
    {
        name: (element) => `has${element}Attribute`,
        attacher: attachEdgeAttributeChecker,
    },
    {
        name: (element) => `set${element}Attribute`,
        attacher: attachEdgeAttributeSetter,
    },
    {
        name: (element) => `update${element}Attribute`,
        attacher: attachEdgeAttributeUpdater,
    },
    {
        name: (element) => `remove${element}Attribute`,
        attacher: attachEdgeAttributeRemover,
    },
    {
        name: (element) => `replace${element}Attributes`,
        attacher: attachEdgeAttributesReplacer,
    },
    {
        name: (element) => `merge${element}Attributes`,
        attacher: attachEdgeAttributesMerger,
    },
    {
        name: (element) => `update${element}Attributes`,
        attacher: attachEdgeAttributesUpdater,
    },
];

/**
 * Attach every attributes-related methods to a Graph class.
 *
 * @param {function} Graph - Target class.
 */
function attachEdgeAttributesMethods(Graph) {
    EDGE_ATTRIBUTES_METHODS.forEach(function ({ name, attacher }) {
        // For edges
        attacher(Graph, name('Edge'), 'mixed');

        // For directed edges
        attacher(Graph, name('DirectedEdge'), 'directed');

        // For undirected edges
        attacher(Graph, name('UndirectedEdge'), 'undirected');
    });
}

/**
 * Graphology Edge Iteration
 * ==========================
 *
 * Attaching some methods to the Graph class to be able to iterate over a
 * graph's edges.
 */

/**
 * Definitions.
 */
const EDGES_ITERATION = [
    {
        name: 'edges',
        type: 'mixed',
    },
    {
        name: 'inEdges',
        type: 'directed',
        direction: 'in',
    },
    {
        name: 'outEdges',
        type: 'directed',
        direction: 'out',
    },
    {
        name: 'inboundEdges',
        type: 'mixed',
        direction: 'in',
    },
    {
        name: 'outboundEdges',
        type: 'mixed',
        direction: 'out',
    },
    {
        name: 'directedEdges',
        type: 'directed',
    },
    {
        name: 'undirectedEdges',
        type: 'undirected',
    },
];

/**
 * Function collecting edges from the given object.
 *
 * @param  {array}  edges  - Edges array to populate.
 * @param  {object} object - Target object.
 * @return {array}         - The found edges.
 */
function collectSimple(edges, object) {
    for (const k in object) edges.push(object[k].key);
}

function collectMulti(edges, object) {
    for (const k in object)
        object[k].forEach((edgeData) => edges.push(edgeData.key));
}

/**
 * Function iterating over edges from the given object using a callback.
 *
 * @param {object}   object   - Target object.
 * @param {function} callback - Function to call.
 */
function forEachSimple(object, callback, avoid) {
    for (const k in object) {
        if (k === avoid) continue;

        const edgeData = object[k];

        callback(
            edgeData.key,
            edgeData.attributes,
            edgeData.source.key,
            edgeData.target.key,
            edgeData.source.attributes,
            edgeData.target.attributes,
            edgeData.undirected
        );
    }
}

function forEachMulti(object, callback, avoid) {
    for (const k in object) {
        if (k === avoid) continue;

        object[k].forEach((edgeData) =>
            callback(
                edgeData.key,
                edgeData.attributes,
                edgeData.source.key,
                edgeData.target.key,
                edgeData.source.attributes,
                edgeData.target.attributes,
                edgeData.undirected
            )
        );
    }
}

/**
 * Function iterating over edges from the given object to match one of them.
 *
 * @param {object}   object   - Target object.
 * @param {function} callback - Function to call.
 */
function findSimple(object, callback, avoid) {
    let shouldBreak = false;

    for (const k in object) {
        if (k === avoid) continue;

        const edgeData = object[k];

        shouldBreak = callback(
            edgeData.key,
            edgeData.attributes,
            edgeData.source.key,
            edgeData.target.key,
            edgeData.source.attributes,
            edgeData.target.attributes,
            edgeData.undirected
        );

        if (shouldBreak) return edgeData.key;
    }

    return;
}

function findMulti(object, callback, avoid) {
    let iterator, step, edgeData, source, target;

    let shouldBreak = false;

    for (const k in object) {
        if (k === avoid) continue;

        iterator = object[k].values();

        while (((step = iterator.next()), step.done !== true)) {
            edgeData = step.value;
            source = edgeData.source;
            target = edgeData.target;

            shouldBreak = callback(
                edgeData.key,
                edgeData.attributes,
                source.key,
                target.key,
                source.attributes,
                target.attributes,
                edgeData.undirected
            );

            if (shouldBreak) return edgeData.key;
        }
    }

    return;
}

/**
 * Function returning an iterator over edges from the given object.
 *
 * @param  {object}   object - Target object.
 * @return {Iterator}
 */
function createIterator(object, avoid) {
    const keys = Object.keys(object),
        l = keys.length;

    let inner = null,
        i = 0;

    return new iterator(function next() {
        let edgeData;

        if (inner) {
            const step = inner.next();

            if (step.done) {
                inner = null;
                i++;
                return next();
            }

            edgeData = step.value;
        } else {
            if (i >= l) return { done: true };

            const k = keys[i];

            if (k === avoid) {
                i++;
                return next();
            }

            edgeData = object[k];

            if (edgeData instanceof Set) {
                inner = edgeData.values();
                return next();
            }

            i++;
        }

        return {
            done: false,
            value: {
                edge: edgeData.key,
                attributes: edgeData.attributes,
                source: edgeData.source.key,
                target: edgeData.target.key,
                sourceAttributes: edgeData.source.attributes,
                targetAttributes: edgeData.target.attributes,
                undirected: edgeData.undirected,
            },
        };
    });
}

/**
 * Function collecting edges from the given object at given key.
 *
 * @param  {array}  edges  - Edges array to populate.
 * @param  {object} object - Target object.
 * @param  {mixed}  k      - Neighbor key.
 * @return {array}         - The found edges.
 */
function collectForKeySimple(edges, object, k) {
    const edgeData = object[k];

    if (!edgeData) return;

    edges.push(edgeData.key);
}

function collectForKeyMulti(edges, object, k) {
    const edgesData = object[k];

    if (!edgesData) return;

    edgesData.forEach((edgeData) => edges.push(edgeData.key));
}

/**
 * Function iterating over the egdes from the object at given key using
 * a callback.
 *
 * @param {object}   object   - Target object.
 * @param {mixed}    k        - Neighbor key.
 * @param {function} callback - Callback to use.
 */
function forEachForKeySimple(object, k, callback) {
    const edgeData = object[k];

    if (!edgeData) return;

    const sourceData = edgeData.source;
    const targetData = edgeData.target;

    callback(
        edgeData.key,
        edgeData.attributes,
        sourceData.key,
        targetData.key,
        sourceData.attributes,
        targetData.attributes,
        edgeData.undirected
    );
}

function forEachForKeyMulti(object, k, callback) {
    const edgesData = object[k];

    if (!edgesData) return;

    edgesData.forEach((edgeData) =>
        callback(
            edgeData.key,
            edgeData.attributes,
            edgeData.source.key,
            edgeData.target.key,
            edgeData.source.attributes,
            edgeData.target.attributes,
            edgeData.undirected
        )
    );
}

/**
 * Function iterating over the egdes from the object at given key to match
 * one of them.
 *
 * @param {object}   object   - Target object.
 * @param {mixed}    k        - Neighbor key.
 * @param {function} callback - Callback to use.
 */
function findForKeySimple(object, k, callback) {
    const edgeData = object[k];

    if (!edgeData) return;

    const sourceData = edgeData.source;
    const targetData = edgeData.target;

    if (
        callback(
            edgeData.key,
            edgeData.attributes,
            sourceData.key,
            targetData.key,
            sourceData.attributes,
            targetData.attributes,
            edgeData.undirected
        )
    )
        return edgeData.key;
}

function findForKeyMulti(object, k, callback) {
    const edgesData = object[k];

    if (!edgesData) return;

    let shouldBreak = false;

    const iterator = edgesData.values();
    let step, edgeData;

    while (((step = iterator.next()), step.done !== true)) {
        edgeData = step.value;

        shouldBreak = callback(
            edgeData.key,
            edgeData.attributes,
            edgeData.source.key,
            edgeData.target.key,
            edgeData.source.attributes,
            edgeData.target.attributes,
            edgeData.undirected
        );

        if (shouldBreak) return edgeData.key;
    }

    return;
}

/**
 * Function returning an iterator over the egdes from the object at given key.
 *
 * @param  {object}   object   - Target object.
 * @param  {mixed}    k        - Neighbor key.
 * @return {Iterator}
 */
function createIteratorForKey(object, k) {
    const v = object[k];

    if (v instanceof Set) {
        const iterator$1 = v.values();

        return new iterator(function () {
            const step = iterator$1.next();

            if (step.done) return step;

            const edgeData = step.value;

            return {
                done: false,
                value: {
                    edge: edgeData.key,
                    attributes: edgeData.attributes,
                    source: edgeData.source.key,
                    target: edgeData.target.key,
                    sourceAttributes: edgeData.source.attributes,
                    targetAttributes: edgeData.target.attributes,
                    undirected: edgeData.undirected,
                },
            };
        });
    }

    return iterator.of([
        v.key,
        v.attributes,
        v.source.key,
        v.target.key,
        v.source.attributes,
        v.target.attributes,
    ]);
}

/**
 * Function creating an array of edges for the given type.
 *
 * @param  {Graph}   graph - Target Graph instance.
 * @param  {string}  type  - Type of edges to retrieve.
 * @return {array}         - Array of edges.
 */
function createEdgeArray(graph, type) {
    if (graph.size === 0) return [];

    if (type === 'mixed' || type === graph.type) {
        if (typeof Array.from === 'function')
            return Array.from(graph._edges.keys());

        return take(graph._edges.keys(), graph._edges.size);
    }

    const size =
        type === 'undirected' ? graph.undirectedSize : graph.directedSize;

    const list = new Array(size),
        mask = type === 'undirected';

    const iterator = graph._edges.values();

    let i = 0;
    let step, data;

    while (((step = iterator.next()), step.done !== true)) {
        data = step.value;

        if (data.undirected === mask) list[i++] = data.key;
    }

    return list;
}

/**
 * Function iterating over a graph's edges using a callback.
 *
 * @param  {Graph}    graph    - Target Graph instance.
 * @param  {string}   type     - Type of edges to retrieve.
 * @param  {function} callback - Function to call.
 */
function forEachEdge(graph, type, callback) {
    if (graph.size === 0) return;

    const shouldFilter = type !== 'mixed' && type !== graph.type;
    const mask = type === 'undirected';

    let step, data;
    const iterator = graph._edges.values();

    while (((step = iterator.next()), step.done !== true)) {
        data = step.value;

        if (shouldFilter && data.undirected !== mask) continue;

        const { key, attributes, source, target } = data;

        callback(
            key,
            attributes,
            source.key,
            target.key,
            source.attributes,
            target.attributes,
            data.undirected
        );
    }
}

/**
 * Function iterating over a graph's edges using a callback to match one of
 * them.
 *
 * @param  {Graph}    graph    - Target Graph instance.
 * @param  {string}   type     - Type of edges to retrieve.
 * @param  {function} callback - Function to call.
 */
function findEdge(graph, type, callback) {
    if (graph.size === 0) return;

    const shouldFilter = type !== 'mixed' && type !== graph.type;
    const mask = type === 'undirected';

    let step, data;
    let shouldBreak = false;
    const iterator = graph._edges.values();

    while (((step = iterator.next()), step.done !== true)) {
        data = step.value;

        if (shouldFilter && data.undirected !== mask) continue;

        const { key, attributes, source, target } = data;

        shouldBreak = callback(
            key,
            attributes,
            source.key,
            target.key,
            source.attributes,
            target.attributes,
            data.undirected
        );

        if (shouldBreak) return key;
    }

    return;
}

/**
 * Function creating an iterator of edges for the given type.
 *
 * @param  {Graph}    graph - Target Graph instance.
 * @param  {string}   type  - Type of edges to retrieve.
 * @return {Iterator}
 */
function createEdgeIterator(graph, type) {
    if (graph.size === 0) return iterator.empty();

    const shouldFilter = type !== 'mixed' && type !== graph.type;
    const mask = type === 'undirected';

    const iterator$1 = graph._edges.values();

    return new iterator(function next() {
        let step, data;

        // eslint-disable-next-line no-constant-condition
        while (true) {
            step = iterator$1.next();

            if (step.done) return step;

            data = step.value;

            if (shouldFilter && data.undirected !== mask) continue;

            break;
        }

        const value = {
            edge: data.key,
            attributes: data.attributes,
            source: data.source.key,
            target: data.target.key,
            sourceAttributes: data.source.attributes,
            targetAttributes: data.target.attributes,
            undirected: data.undirected,
        };

        return { value, done: false };
    });
}

/**
 * Function creating an array of edges for the given type & the given node.
 *
 * @param  {boolean} multi     - Whether the graph is multi or not.
 * @param  {string}  type      - Type of edges to retrieve.
 * @param  {string}  direction - In or out?
 * @param  {any}     nodeData  - Target node's data.
 * @return {array}             - Array of edges.
 */
function createEdgeArrayForNode(multi, type, direction, nodeData) {
    const edges = [];

    const fn = multi ? collectMulti : collectSimple;

    if (type !== 'undirected') {
        if (direction !== 'out') fn(edges, nodeData.in);
        if (direction !== 'in') fn(edges, nodeData.out);

        // Handling self loop edge case
        if (!direction && nodeData.directedSelfLoops > 0)
            edges.splice(edges.lastIndexOf(nodeData.key), 1);
    }

    if (type !== 'directed') {
        fn(edges, nodeData.undirected);
    }

    return edges;
}

/**
 * Function iterating over a node's edges using a callback.
 *
 * @param  {boolean}  multi     - Whether the graph is multi or not.
 * @param  {string}   type      - Type of edges to retrieve.
 * @param  {string}   direction - In or out?
 * @param  {any}      nodeData  - Target node's data.
 * @param  {function} callback  - Function to call.
 */
function forEachEdgeForNode(multi, type, direction, nodeData, callback) {
    const fn = multi ? forEachMulti : forEachSimple;

    if (type !== 'undirected') {
        if (direction !== 'out') fn(nodeData.in, callback);
        if (direction !== 'in')
            fn(nodeData.out, callback, !direction ? nodeData.key : null);
    }

    if (type !== 'directed') {
        fn(nodeData.undirected, callback);
    }
}

/**
 * Function iterating over a node's edges using a callback to match one of them.
 *
 * @param  {boolean}  multi     - Whether the graph is multi or not.
 * @param  {string}   type      - Type of edges to retrieve.
 * @param  {string}   direction - In or out?
 * @param  {any}      nodeData  - Target node's data.
 * @param  {function} callback  - Function to call.
 */
function findEdgeForNode(multi, type, direction, nodeData, callback) {
    const fn = multi ? findMulti : findSimple;

    let found;

    if (type !== 'undirected') {
        if (direction !== 'out') {
            found = fn(nodeData.in, callback);

            if (found) return found;
        }
        if (direction !== 'in') {
            found = fn(
                nodeData.out,
                callback,
                !direction ? nodeData.key : null
            );

            if (found) return found;
        }
    }

    if (type !== 'directed') {
        found = fn(nodeData.undirected, callback);

        if (found) return found;
    }

    return;
}

/**
 * Function iterating over a node's edges using a callback.
 *
 * @param  {string}   type      - Type of edges to retrieve.
 * @param  {string}   direction - In or out?
 * @param  {any}      nodeData  - Target node's data.
 * @return {Iterator}
 */
function createEdgeIteratorForNode(type, direction, nodeData) {
    let iterator$1 = iterator.empty();

    if (type !== 'undirected') {
        if (direction !== 'out' && typeof nodeData.in !== 'undefined')
            iterator$1 = chain(iterator$1, createIterator(nodeData.in));
        if (direction !== 'in' && typeof nodeData.out !== 'undefined')
            iterator$1 = chain(
                iterator$1,
                createIterator(nodeData.out, !direction ? nodeData.key : null)
            );
    }

    if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {
        iterator$1 = chain(iterator$1, createIterator(nodeData.undirected));
    }

    return iterator$1;
}

/**
 * Function creating an array of edges for the given path.
 *
 * @param  {string}   type       - Type of edges to retrieve.
 * @param  {boolean}  multi      - Whether the graph is multi.
 * @param  {string}   direction  - In or out?
 * @param  {NodeData} sourceData - Source node's data.
 * @param  {any}      target     - Target node.
 * @return {array}               - Array of edges.
 */
function createEdgeArrayForPath(type, multi, direction, sourceData, target) {
    const fn = multi ? collectForKeyMulti : collectForKeySimple;

    const edges = [];

    if (type !== 'undirected') {
        if (typeof sourceData.in !== 'undefined' && direction !== 'out')
            fn(edges, sourceData.in, target);

        if (typeof sourceData.out !== 'undefined' && direction !== 'in')
            fn(edges, sourceData.out, target);

        // Handling self loop edge case
        if (!direction && sourceData.directedSelfLoops > 0)
            edges.splice(edges.lastIndexOf(sourceData.key), 1);
    }

    if (type !== 'directed') {
        if (typeof sourceData.undirected !== 'undefined')
            fn(edges, sourceData.undirected, target);
    }

    return edges;
}

/**
 * Function iterating over edges for the given path using a callback.
 *
 * @param  {string}   type       - Type of edges to retrieve.
 * @param  {boolean}  multi      - Whether the graph is multi.
 * @param  {string}   direction  - In or out?
 * @param  {NodeData} sourceData - Source node's data.
 * @param  {string}   target     - Target node.
 * @param  {function} callback   - Function to call.
 */
function forEachEdgeForPath(
    type,
    multi,
    direction,
    sourceData,
    target,
    callback
) {
    const fn = multi ? forEachForKeyMulti : forEachForKeySimple;

    if (type !== 'undirected') {
        if (typeof sourceData.in !== 'undefined' && direction !== 'out')
            fn(sourceData.in, target, callback);

        if (sourceData.key !== target)
            if (typeof sourceData.out !== 'undefined' && direction !== 'in')
                fn(sourceData.out, target, callback);
    }

    if (type !== 'directed') {
        if (typeof sourceData.undirected !== 'undefined')
            fn(sourceData.undirected, target, callback);
    }
}

/**
 * Function iterating over edges for the given path using a callback to match
 * one of them.
 *
 * @param  {string}   type       - Type of edges to retrieve.
 * @param  {boolean}  multi      - Whether the graph is multi.
 * @param  {string}   direction  - In or out?
 * @param  {NodeData} sourceData - Source node's data.
 * @param  {string}   target     - Target node.
 * @param  {function} callback   - Function to call.
 */
function findEdgeForPath(type, multi, direction, sourceData, target, callback) {
    const fn = multi ? findForKeyMulti : findForKeySimple;

    let found;

    if (type !== 'undirected') {
        if (typeof sourceData.in !== 'undefined' && direction !== 'out') {
            found = fn(sourceData.in, target, callback);

            if (found) return found;
        }

        if (sourceData.key !== target)
            if (typeof sourceData.out !== 'undefined' && direction !== 'in') {
                found = fn(
                    sourceData.out,
                    target,
                    callback,
                    !direction ? sourceData.key : null
                );

                if (found) return found;
            }
    }

    if (type !== 'directed') {
        if (typeof sourceData.undirected !== 'undefined') {
            found = fn(sourceData.undirected, target, callback);

            if (found) return found;
        }
    }

    return;
}

/**
 * Function returning an iterator over edges for the given path.
 *
 * @param  {string}   type       - Type of edges to retrieve.
 * @param  {string}   direction  - In or out?
 * @param  {NodeData} sourceData - Source node's data.
 * @param  {string}   target     - Target node.
 * @param  {function} callback   - Function to call.
 */
function createEdgeIteratorForPath(type, direction, sourceData, target) {
    let iterator$1 = iterator.empty();

    if (type !== 'undirected') {
        if (
            typeof sourceData.in !== 'undefined' &&
            direction !== 'out' &&
            target in sourceData.in
        )
            iterator$1 = chain(
                iterator$1,
                createIteratorForKey(sourceData.in, target)
            );

        if (
            typeof sourceData.out !== 'undefined' &&
            direction !== 'in' &&
            target in sourceData.out
        )
            iterator$1 = chain(
                iterator$1,
                createIteratorForKey(sourceData.out, target)
            );
    }

    if (type !== 'directed') {
        if (
            typeof sourceData.undirected !== 'undefined' &&
            target in sourceData.undirected
        )
            iterator$1 = chain(
                iterator$1,
                createIteratorForKey(sourceData.undirected, target)
            );
    }

    return iterator$1;
}

/**
 * Function attaching an edge array creator method to the Graph prototype.
 *
 * @param {function} Class       - Target class.
 * @param {object}   description - Method description.
 */
function attachEdgeArrayCreator(Class, description) {
    const { name, type, direction } = description;

    /**
     * Function returning an array of certain edges.
     *
     * Arity 0: Return all the relevant edges.
     *
     * Arity 1: Return all of a node's relevant edges.
     * @param  {any}   node   - Target node.
     *
     * Arity 2: Return the relevant edges across the given path.
     * @param  {any}   source - Source node.
     * @param  {any}   target - Target node.
     *
     * @return {array|number} - The edges or the number of edges.
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    Class.prototype[name] = function (source, target) {
        // Early termination
        if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)
            return [];

        if (!arguments.length) return createEdgeArray(this, type);

        if (arguments.length === 1) {
            source = '' + source;

            const nodeData = this._nodes.get(source);

            if (typeof nodeData === 'undefined')
                throw new NotFoundGraphError(
                    `Graph.${name}: could not find the "${source}" node in the graph.`
                );

            // Iterating over a node's edges
            return createEdgeArrayForNode(
                this.multi,
                type === 'mixed' ? this.type : type,
                direction,
                nodeData
            );
        }

        if (arguments.length === 2) {
            source = '' + source;
            target = '' + target;

            const sourceData = this._nodes.get(source);

            if (!sourceData)
                throw new NotFoundGraphError(
                    `Graph.${name}:  could not find the "${source}" source node in the graph.`
                );

            if (!this._nodes.has(target))
                throw new NotFoundGraphError(
                    `Graph.${name}:  could not find the "${target}" target node in the graph.`
                );

            // Iterating over the edges between source & target
            return createEdgeArrayForPath(
                type,
                this.multi,
                direction,
                sourceData,
                target
            );
        }

        throw new InvalidArgumentsGraphError(
            `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`
        );
    };
}

/**
 * Function attaching a edge callback iterator method to the Graph prototype.
 *
 * @param {function} Class       - Target class.
 * @param {object}   description - Method description.
 */
function attachForEachEdge(Class, description) {
    const { name, type, direction } = description;

    const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);

    /**
     * Function iterating over the graph's relevant edges by applying the given
     * callback.
     *
     * Arity 1: Iterate over all the relevant edges.
     * @param  {function} callback - Callback to use.
     *
     * Arity 2: Iterate over all of a node's relevant edges.
     * @param  {any}      node     - Target node.
     * @param  {function} callback - Callback to use.
     *
     * Arity 3: Iterate over the relevant edges across the given path.
     * @param  {any}      source   - Source node.
     * @param  {any}      target   - Target node.
     * @param  {function} callback - Callback to use.
     *
     * @return {undefined}
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    Class.prototype[forEachName] = function (source, target, callback) {
        // Early termination
        if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)
            return;

        if (arguments.length === 1) {
            callback = source;
            return forEachEdge(this, type, callback);
        }

        if (arguments.length === 2) {
            source = '' + source;
            callback = target;

            const nodeData = this._nodes.get(source);

            if (typeof nodeData === 'undefined')
                throw new NotFoundGraphError(
                    `Graph.${forEachName}: could not find the "${source}" node in the graph.`
                );

            // Iterating over a node's edges
            // TODO: maybe attach the sub method to the instance dynamically?
            return forEachEdgeForNode(
                this.multi,
                type === 'mixed' ? this.type : type,
                direction,
                nodeData,
                callback
            );
        }

        if (arguments.length === 3) {
            source = '' + source;
            target = '' + target;

            const sourceData = this._nodes.get(source);

            if (!sourceData)
                throw new NotFoundGraphError(
                    `Graph.${forEachName}:  could not find the "${source}" source node in the graph.`
                );

            if (!this._nodes.has(target))
                throw new NotFoundGraphError(
                    `Graph.${forEachName}:  could not find the "${target}" target node in the graph.`
                );

            // Iterating over the edges between source & target
            return forEachEdgeForPath(
                type,
                this.multi,
                direction,
                sourceData,
                target,
                callback
            );
        }

        throw new InvalidArgumentsGraphError(
            `Graph.${forEachName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`
        );
    };

    /**
     * Function mapping the graph's relevant edges by applying the given
     * callback.
     *
     * Arity 1: Map all the relevant edges.
     * @param  {function} callback - Callback to use.
     *
     * Arity 2: Map all of a node's relevant edges.
     * @param  {any}      node     - Target node.
     * @param  {function} callback - Callback to use.
     *
     * Arity 3: Map the relevant edges across the given path.
     * @param  {any}      source   - Source node.
     * @param  {any}      target   - Target node.
     * @param  {function} callback - Callback to use.
     *
     * @return {undefined}
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    const mapName = 'map' + name[0].toUpperCase() + name.slice(1);

    Class.prototype[mapName] = function () {
        const args = Array.prototype.slice.call(arguments);
        const callback = args.pop();

        let result;

        // We know the result length beforehand
        if (args.length === 0) {
            let length = 0;

            if (type !== 'directed') length += this.undirectedSize;
            if (type !== 'undirected') length += this.directedSize;

            result = new Array(length);

            let i = 0;

            args.push((e, ea, s, t, sa, ta, u) => {
                result[i++] = callback(e, ea, s, t, sa, ta, u);
            });
        }

        // We don't know the result length beforehand
        // TODO: we can in some instances of simple graphs, knowing degree
        else {
            result = [];

            args.push((e, ea, s, t, sa, ta, u) => {
                result.push(callback(e, ea, s, t, sa, ta, u));
            });
        }

        this[forEachName].apply(this, args);

        return result;
    };

    /**
     * Function filtering the graph's relevant edges using the provided predicate
     * function.
     *
     * Arity 1: Filter all the relevant edges.
     * @param  {function} predicate - Predicate to use.
     *
     * Arity 2: Filter all of a node's relevant edges.
     * @param  {any}      node      - Target node.
     * @param  {function} predicate - Predicate to use.
     *
     * Arity 3: Filter the relevant edges across the given path.
     * @param  {any}      source    - Source node.
     * @param  {any}      target    - Target node.
     * @param  {function} predicate - Predicate to use.
     *
     * @return {undefined}
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);

    Class.prototype[filterName] = function () {
        const args = Array.prototype.slice.call(arguments);
        const callback = args.pop();

        const result = [];

        args.push((e, ea, s, t, sa, ta, u) => {
            if (callback(e, ea, s, t, sa, ta, u)) result.push(e);
        });

        this[forEachName].apply(this, args);

        return result;
    };

    /**
     * Function reducing the graph's relevant edges using the provided accumulator
     * function.
     *
     * Arity 1: Reduce all the relevant edges.
     * @param  {function} accumulator  - Accumulator to use.
     * @param  {any}      initialValue - Initial value.
     *
     * Arity 2: Reduce all of a node's relevant edges.
     * @param  {any}      node         - Target node.
     * @param  {function} accumulator  - Accumulator to use.
     * @param  {any}      initialValue - Initial value.
     *
     * Arity 3: Reduce the relevant edges across the given path.
     * @param  {any}      source       - Source node.
     * @param  {any}      target       - Target node.
     * @param  {function} accumulator  - Accumulator to use.
     * @param  {any}      initialValue - Initial value.
     *
     * @return {undefined}
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);

    Class.prototype[reduceName] = function () {
        let args = Array.prototype.slice.call(arguments);

        if (args.length < 2 || args.length > 4) {
            throw new InvalidArgumentsGraphError(
                `Graph.${reduceName}: invalid number of arguments (expecting 2, 3 or 4 and got ${args.length}).`
            );
        }

        if (
            typeof args[args.length - 1] === 'function' &&
            typeof args[args.length - 2] !== 'function'
        ) {
            throw new InvalidArgumentsGraphError(
                `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`
            );
        }

        let callback;
        let initialValue;

        if (args.length === 2) {
            callback = args[0];
            initialValue = args[1];
            args = [];
        } else if (args.length === 3) {
            callback = args[1];
            initialValue = args[2];
            args = [args[0]];
        } else if (args.length === 4) {
            callback = args[2];
            initialValue = args[3];
            args = [args[0], args[1]];
        }

        let accumulator = initialValue;

        args.push((e, ea, s, t, sa, ta, u) => {
            accumulator = callback(accumulator, e, ea, s, t, sa, ta, u);
        });

        this[forEachName].apply(this, args);

        return accumulator;
    };
}

/**
 * Function attaching a breakable edge callback iterator method to the Graph
 * prototype.
 *
 * @param {function} Class       - Target class.
 * @param {object}   description - Method description.
 */
function attachFindEdge(Class, description) {
    const { name, type, direction } = description;

    const findEdgeName = 'find' + name[0].toUpperCase() + name.slice(1, -1);

    /**
     * Function iterating over the graph's relevant edges in order to match
     * one of them using the provided predicate function.
     *
     * Arity 1: Iterate over all the relevant edges.
     * @param  {function} callback - Callback to use.
     *
     * Arity 2: Iterate over all of a node's relevant edges.
     * @param  {any}      node     - Target node.
     * @param  {function} callback - Callback to use.
     *
     * Arity 3: Iterate over the relevant edges across the given path.
     * @param  {any}      source   - Source node.
     * @param  {any}      target   - Target node.
     * @param  {function} callback - Callback to use.
     *
     * @return {undefined}
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    Class.prototype[findEdgeName] = function (source, target, callback) {
        // Early termination
        if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)
            return false;

        if (arguments.length === 1) {
            callback = source;
            return findEdge(this, type, callback);
        }

        if (arguments.length === 2) {
            source = '' + source;
            callback = target;

            const nodeData = this._nodes.get(source);

            if (typeof nodeData === 'undefined')
                throw new NotFoundGraphError(
                    `Graph.${findEdgeName}: could not find the "${source}" node in the graph.`
                );

            // Iterating over a node's edges
            // TODO: maybe attach the sub method to the instance dynamically?
            return findEdgeForNode(
                this.multi,
                type === 'mixed' ? this.type : type,
                direction,
                nodeData,
                callback
            );
        }

        if (arguments.length === 3) {
            source = '' + source;
            target = '' + target;

            const sourceData = this._nodes.get(source);

            if (!sourceData)
                throw new NotFoundGraphError(
                    `Graph.${findEdgeName}:  could not find the "${source}" source node in the graph.`
                );

            if (!this._nodes.has(target))
                throw new NotFoundGraphError(
                    `Graph.${findEdgeName}:  could not find the "${target}" target node in the graph.`
                );

            // Iterating over the edges between source & target
            return findEdgeForPath(
                type,
                this.multi,
                direction,
                sourceData,
                target,
                callback
            );
        }

        throw new InvalidArgumentsGraphError(
            `Graph.${findEdgeName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`
        );
    };

    /**
     * Function iterating over the graph's relevant edges in order to assert
     * whether any one of them matches the provided predicate function.
     *
     * Arity 1: Iterate over all the relevant edges.
     * @param  {function} callback - Callback to use.
     *
     * Arity 2: Iterate over all of a node's relevant edges.
     * @param  {any}      node     - Target node.
     * @param  {function} callback - Callback to use.
     *
     * Arity 3: Iterate over the relevant edges across the given path.
     * @param  {any}      source   - Source node.
     * @param  {any}      target   - Target node.
     * @param  {function} callback - Callback to use.
     *
     * @return {undefined}
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    const someName = 'some' + name[0].toUpperCase() + name.slice(1, -1);

    Class.prototype[someName] = function () {
        const args = Array.prototype.slice.call(arguments);
        const callback = args.pop();

        args.push((e, ea, s, t, sa, ta, u) => {
            return callback(e, ea, s, t, sa, ta, u);
        });

        const found = this[findEdgeName].apply(this, args);

        if (found) return true;

        return false;
    };

    /**
     * Function iterating over the graph's relevant edges in order to assert
     * whether all of them matche the provided predicate function.
     *
     * Arity 1: Iterate over all the relevant edges.
     * @param  {function} callback - Callback to use.
     *
     * Arity 2: Iterate over all of a node's relevant edges.
     * @param  {any}      node     - Target node.
     * @param  {function} callback - Callback to use.
     *
     * Arity 3: Iterate over the relevant edges across the given path.
     * @param  {any}      source   - Source node.
     * @param  {any}      target   - Target node.
     * @param  {function} callback - Callback to use.
     *
     * @return {undefined}
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    const everyName = 'every' + name[0].toUpperCase() + name.slice(1, -1);

    Class.prototype[everyName] = function () {
        const args = Array.prototype.slice.call(arguments);
        const callback = args.pop();

        args.push((e, ea, s, t, sa, ta, u) => {
            return !callback(e, ea, s, t, sa, ta, u);
        });

        const found = this[findEdgeName].apply(this, args);

        if (found) return false;

        return true;
    };
}

/**
 * Function attaching an edge iterator method to the Graph prototype.
 *
 * @param {function} Class       - Target class.
 * @param {object}   description - Method description.
 */
function attachEdgeIteratorCreator(Class, description) {
    const { name: originalName, type, direction } = description;

    const name = originalName.slice(0, -1) + 'Entries';

    /**
     * Function returning an iterator over the graph's edges.
     *
     * Arity 0: Iterate over all the relevant edges.
     *
     * Arity 1: Iterate over all of a node's relevant edges.
     * @param  {any}   node   - Target node.
     *
     * Arity 2: Iterate over the relevant edges across the given path.
     * @param  {any}   source - Source node.
     * @param  {any}   target - Target node.
     *
     * @return {array|number} - The edges or the number of edges.
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    Class.prototype[name] = function (source, target) {
        // Early termination
        if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)
            return iterator.empty();

        if (!arguments.length) return createEdgeIterator(this, type);

        if (arguments.length === 1) {
            source = '' + source;

            const sourceData = this._nodes.get(source);

            if (!sourceData)
                throw new NotFoundGraphError(
                    `Graph.${name}: could not find the "${source}" node in the graph.`
                );

            // Iterating over a node's edges
            return createEdgeIteratorForNode(type, direction, sourceData);
        }

        if (arguments.length === 2) {
            source = '' + source;
            target = '' + target;

            const sourceData = this._nodes.get(source);

            if (!sourceData)
                throw new NotFoundGraphError(
                    `Graph.${name}:  could not find the "${source}" source node in the graph.`
                );

            if (!this._nodes.has(target))
                throw new NotFoundGraphError(
                    `Graph.${name}:  could not find the "${target}" target node in the graph.`
                );

            // Iterating over the edges between source & target
            return createEdgeIteratorForPath(
                type,
                direction,
                sourceData,
                target
            );
        }

        throw new InvalidArgumentsGraphError(
            `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`
        );
    };
}

/**
 * Function attaching every edge iteration method to the Graph class.
 *
 * @param {function} Graph - Graph class.
 */
function attachEdgeIterationMethods(Graph) {
    EDGES_ITERATION.forEach((description) => {
        attachEdgeArrayCreator(Graph, description);
        attachForEachEdge(Graph, description);
        attachFindEdge(Graph, description);
        attachEdgeIteratorCreator(Graph, description);
    });
}

/**
 * Graphology Neighbor Iteration
 * ==============================
 *
 * Attaching some methods to the Graph class to be able to iterate over
 * neighbors.
 */

/**
 * Definitions.
 */
const NEIGHBORS_ITERATION = [
    {
        name: 'neighbors',
        type: 'mixed',
    },
    {
        name: 'inNeighbors',
        type: 'directed',
        direction: 'in',
    },
    {
        name: 'outNeighbors',
        type: 'directed',
        direction: 'out',
    },
    {
        name: 'inboundNeighbors',
        type: 'mixed',
        direction: 'in',
    },
    {
        name: 'outboundNeighbors',
        type: 'mixed',
        direction: 'out',
    },
    {
        name: 'directedNeighbors',
        type: 'directed',
    },
    {
        name: 'undirectedNeighbors',
        type: 'undirected',
    },
];

/**
 * Function merging neighbors into the given set iterating over the given object.
 *
 * @param {BasicSet} neighbors - Neighbors set.
 * @param {object}   object    - Target object.
 */
function merge(neighbors, object) {
    if (typeof object === 'undefined') return;

    for (const neighbor in object) neighbors.add(neighbor);
}

/**
 * Function creating an array of relevant neighbors for the given node.
 *
 * @param  {string}       type      - Type of neighbors.
 * @param  {string}       direction - Direction.
 * @param  {any}          nodeData  - Target node's data.
 * @return {Array}                  - The list of neighbors.
 */
function createNeighborArrayForNode(type, direction, nodeData) {
    // If we want only undirected or in or out, we can roll some optimizations
    if (type !== 'mixed') {
        if (type === 'undirected') return Object.keys(nodeData.undirected);

        if (typeof direction === 'string')
            return Object.keys(nodeData[direction]);
    }

    // Else we need to keep a set of neighbors not to return duplicates
    const neighbors = new Set();

    if (type !== 'undirected') {
        if (direction !== 'out') {
            merge(neighbors, nodeData.in);
        }
        if (direction !== 'in') {
            merge(neighbors, nodeData.out);
        }
    }

    if (type !== 'directed') {
        merge(neighbors, nodeData.undirected);
    }

    return take(neighbors.values(), neighbors.size);
}

/**
 * Function iterating over the given node's relevant neighbors using a
 * callback.
 *
 * @param  {string}   type      - Type of neighbors.
 * @param  {string}   direction - Direction.
 * @param  {any}      nodeData  - Target node's data.
 * @param  {function} callback  - Callback to use.
 */
function forEachInObject(nodeData, object, callback) {
    for (const k in object) {
        let edgeData = object[k];

        if (edgeData instanceof Set) edgeData = edgeData.values().next().value;

        const sourceData = edgeData.source,
            targetData = edgeData.target;

        const neighborData = sourceData === nodeData ? targetData : sourceData;

        callback(neighborData.key, neighborData.attributes);
    }
}

function forEachInObjectOnce(visited, nodeData, object, callback) {
    for (const k in object) {
        let edgeData = object[k];

        if (edgeData instanceof Set) edgeData = edgeData.values().next().value;

        const sourceData = edgeData.source,
            targetData = edgeData.target;

        const neighborData = sourceData === nodeData ? targetData : sourceData;

        if (visited.has(neighborData.key)) continue;

        visited.add(neighborData.key);

        callback(neighborData.key, neighborData.attributes);
    }
}

/**
 * Function iterating over the given node's relevant neighbors to match
 * one of them using a predicated function.
 *
 * @param  {string}   type      - Type of neighbors.
 * @param  {string}   direction - Direction.
 * @param  {any}      nodeData  - Target node's data.
 * @param  {function} callback  - Callback to use.
 */
function findInObject(nodeData, object, callback) {
    for (const k in object) {
        let edgeData = object[k];

        if (edgeData instanceof Set) edgeData = edgeData.values().next().value;

        const sourceData = edgeData.source;
        const targetData = edgeData.target;

        const neighborData = sourceData === nodeData ? targetData : sourceData;

        const shouldBreak = callback(neighborData.key, neighborData.attributes);

        if (shouldBreak) return neighborData.key;
    }

    return;
}

function findInObjectOnce(visited, nodeData, object, callback) {
    for (const k in object) {
        let edgeData = object[k];

        if (edgeData instanceof Set) edgeData = edgeData.values().next().value;

        const sourceData = edgeData.source;
        const targetData = edgeData.target;

        const neighborData = sourceData === nodeData ? targetData : sourceData;

        if (visited.has(neighborData.key)) continue;

        visited.add(neighborData.key);

        const shouldBreak = callback(neighborData.key, neighborData.attributes);

        if (shouldBreak) return neighborData.key;
    }

    return;
}

function forEachNeighborForNode(type, direction, nodeData, callback) {
    // If we want only undirected or in or out, we can roll some optimizations
    if (type !== 'mixed') {
        if (type === 'undirected')
            return forEachInObject(nodeData, nodeData.undirected, callback);

        if (typeof direction === 'string')
            return forEachInObject(nodeData, nodeData[direction], callback);
    }

    // Else we need to keep a set of neighbors not to return duplicates
    const visited = new Set();

    if (type !== 'undirected') {
        if (direction !== 'out') {
            forEachInObjectOnce(visited, nodeData, nodeData.in, callback);
        }
        if (direction !== 'in') {
            forEachInObjectOnce(visited, nodeData, nodeData.out, callback);
        }
    }

    if (type !== 'directed') {
        forEachInObjectOnce(visited, nodeData, nodeData.undirected, callback);
    }
}

function findNeighbor(type, direction, nodeData, callback) {
    // If we want only undirected or in or out, we can roll some optimizations
    if (type !== 'mixed') {
        if (type === 'undirected')
            return findInObject(nodeData, nodeData.undirected, callback);

        if (typeof direction === 'string')
            return findInObject(nodeData, nodeData[direction], callback);
    }

    // Else we need to keep a set of neighbors not to return duplicates
    const visited = new Set();

    let found;

    if (type !== 'undirected') {
        if (direction !== 'out') {
            found = findInObjectOnce(visited, nodeData, nodeData.in, callback);

            if (found) return found;
        }
        if (direction !== 'in') {
            found = findInObjectOnce(visited, nodeData, nodeData.out, callback);

            if (found) return found;
        }
    }

    if (type !== 'directed') {
        found = findInObjectOnce(
            visited,
            nodeData,
            nodeData.undirected,
            callback
        );

        if (found) return found;
    }

    return;
}

/**
 * Function returning an iterator over the given node's relevant neighbors.
 *
 * @param  {string}   type      - Type of neighbors.
 * @param  {string}   direction - Direction.
 * @param  {any}      nodeData  - Target node's data.
 * @return {Iterator}
 */
function createObjectIterator(nodeData, object) {
    const keys = Object.keys(object),
        l = keys.length;

    let i = 0;

    return new iterator(function () {
        if (i >= l) return { done: true };

        let edgeData = object[keys[i++]];

        if (edgeData instanceof Set) edgeData = edgeData.values().next().value;

        const sourceData = edgeData.source,
            targetData = edgeData.target;

        const neighborData = sourceData === nodeData ? targetData : sourceData;

        return {
            done: false,
            value: {
                neighbor: neighborData.key,
                attributes: neighborData.attributes,
            },
        };
    });
}

function createDedupedObjectIterator(visited, nodeData, object) {
    const keys = Object.keys(object),
        l = keys.length;

    let i = 0;

    return new iterator(function next() {
        if (i >= l) return { done: true };

        let edgeData = object[keys[i++]];

        if (edgeData instanceof Set) edgeData = edgeData.values().next().value;

        const sourceData = edgeData.source,
            targetData = edgeData.target;

        const neighborData = sourceData === nodeData ? targetData : sourceData;

        if (visited.has(neighborData.key)) return next();

        visited.add(neighborData.key);

        return {
            done: false,
            value: {
                neighbor: neighborData.key,
                attributes: neighborData.attributes,
            },
        };
    });
}

function createNeighborIterator(type, direction, nodeData) {
    // If we want only undirected or in or out, we can roll some optimizations
    if (type !== 'mixed') {
        if (type === 'undirected')
            return createObjectIterator(nodeData, nodeData.undirected);

        if (typeof direction === 'string')
            return createObjectIterator(nodeData, nodeData[direction]);
    }

    let iterator$1 = iterator.empty();

    // Else we need to keep a set of neighbors not to return duplicates
    const visited = new Set();

    if (type !== 'undirected') {
        if (direction !== 'out') {
            iterator$1 = chain(
                iterator$1,
                createDedupedObjectIterator(visited, nodeData, nodeData.in)
            );
        }
        if (direction !== 'in') {
            iterator$1 = chain(
                iterator$1,
                createDedupedObjectIterator(visited, nodeData, nodeData.out)
            );
        }
    }

    if (type !== 'directed') {
        iterator$1 = chain(
            iterator$1,
            createDedupedObjectIterator(visited, nodeData, nodeData.undirected)
        );
    }

    return iterator$1;
}

/**
 * Function attaching a neighbors array creator method to the Graph prototype.
 *
 * @param {function} Class       - Target class.
 * @param {object}   description - Method description.
 */
function attachNeighborArrayCreator(Class, description) {
    const { name, type, direction } = description;

    /**
     * Function returning an array of certain neighbors.
     *
     * @param  {any}   node   - Target node.
     * @return {array} - The neighbors of neighbors.
     *
     * @throws {Error} - Will throw if node is not found in the graph.
     */
    Class.prototype[name] = function (node) {
        // Early termination
        if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)
            return [];

        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (typeof nodeData === 'undefined')
            throw new NotFoundGraphError(
                `Graph.${name}: could not find the "${node}" node in the graph.`
            );

        // Here, we want to iterate over a node's relevant neighbors
        return createNeighborArrayForNode(
            type === 'mixed' ? this.type : type,
            direction,
            nodeData
        );
    };
}

/**
 * Function attaching a neighbors callback iterator method to the Graph prototype.
 *
 * @param {function} Class       - Target class.
 * @param {object}   description - Method description.
 */
function attachForEachNeighbor(Class, description) {
    const { name, type, direction } = description;

    const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);

    /**
     * Function iterating over all the relevant neighbors using a callback.
     *
     * @param  {any}      node     - Target node.
     * @param  {function} callback - Callback to use.
     * @return {undefined}
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    Class.prototype[forEachName] = function (node, callback) {
        // Early termination
        if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)
            return;

        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (typeof nodeData === 'undefined')
            throw new NotFoundGraphError(
                `Graph.${forEachName}: could not find the "${node}" node in the graph.`
            );

        // Here, we want to iterate over a node's relevant neighbors
        forEachNeighborForNode(
            type === 'mixed' ? this.type : type,
            direction,
            nodeData,
            callback
        );
    };

    /**
     * Function mapping the relevant neighbors using a callback.
     *
     * @param  {any}      node     - Target node.
     * @param  {function} callback - Callback to use.
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    const mapName = 'map' + name[0].toUpperCase() + name.slice(1);

    Class.prototype[mapName] = function (node, callback) {
        // TODO: optimize when size is known beforehand
        const result = [];

        this[forEachName](node, (n, a) => {
            result.push(callback(n, a));
        });

        return result;
    };

    /**
     * Function filtering the relevant neighbors using a callback.
     *
     * @param  {any}      node     - Target node.
     * @param  {function} callback - Callback to use.
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);

    Class.prototype[filterName] = function (node, callback) {
        const result = [];

        this[forEachName](node, (n, a) => {
            if (callback(n, a)) result.push(n);
        });

        return result;
    };

    /**
     * Function reducing the relevant neighbors using a callback.
     *
     * @param  {any}      node     - Target node.
     * @param  {function} callback - Callback to use.
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);

    Class.prototype[reduceName] = function (node, callback, initialValue) {
        if (arguments.length < 3)
            throw new InvalidArgumentsGraphError(
                `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`
            );

        let accumulator = initialValue;

        this[forEachName](node, (n, a) => {
            accumulator = callback(accumulator, n, a);
        });

        return accumulator;
    };
}

/**
 * Function attaching a breakable neighbors callback iterator method to the
 * Graph prototype.
 *
 * @param {function} Class       - Target class.
 * @param {object}   description - Method description.
 */
function attachFindNeighbor(Class, description) {
    const { name, type, direction } = description;

    const capitalizedSingular = name[0].toUpperCase() + name.slice(1, -1);

    const findName = 'find' + capitalizedSingular;

    /**
     * Function iterating over all the relevant neighbors using a callback.
     *
     * @param  {any}      node     - Target node.
     * @param  {function} callback - Callback to use.
     * @return {undefined}
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    Class.prototype[findName] = function (node, callback) {
        // Early termination
        if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)
            return;

        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (typeof nodeData === 'undefined')
            throw new NotFoundGraphError(
                `Graph.${findName}: could not find the "${node}" node in the graph.`
            );

        // Here, we want to iterate over a node's relevant neighbors
        return findNeighbor(
            type === 'mixed' ? this.type : type,
            direction,
            nodeData,
            callback
        );
    };

    /**
     * Function iterating over all the relevant neighbors to find if any of them
     * matches the given predicate.
     *
     * @param  {any}      node     - Target node.
     * @param  {function} callback - Callback to use.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    const someName = 'some' + capitalizedSingular;

    Class.prototype[someName] = function (node, callback) {
        const found = this[findName](node, callback);

        if (found) return true;

        return false;
    };

    /**
     * Function iterating over all the relevant neighbors to find if all of them
     * matche the given predicate.
     *
     * @param  {any}      node     - Target node.
     * @param  {function} callback - Callback to use.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    const everyName = 'every' + capitalizedSingular;

    Class.prototype[everyName] = function (node, callback) {
        const found = this[findName](node, (n, a) => {
            return !callback(n, a);
        });

        if (found) return false;

        return true;
    };
}

/**
 * Function attaching a neighbors callback iterator method to the Graph prototype.
 *
 * @param {function} Class       - Target class.
 * @param {object}   description - Method description.
 */
function attachNeighborIteratorCreator(Class, description) {
    const { name, type, direction } = description;

    const iteratorName = name.slice(0, -1) + 'Entries';

    /**
     * Function returning an iterator over all the relevant neighbors.
     *
     * @param  {any}      node     - Target node.
     * @return {Iterator}
     *
     * @throws {Error} - Will throw if there are too many arguments.
     */
    Class.prototype[iteratorName] = function (node) {
        // Early termination
        if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)
            return iterator.empty();

        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (typeof nodeData === 'undefined')
            throw new NotFoundGraphError(
                `Graph.${iteratorName}: could not find the "${node}" node in the graph.`
            );

        // Here, we want to iterate over a node's relevant neighbors
        return createNeighborIterator(
            type === 'mixed' ? this.type : type,
            direction,
            nodeData
        );
    };
}

/**
 * Function attaching every neighbor iteration method to the Graph class.
 *
 * @param {function} Graph - Graph class.
 */
function attachNeighborIterationMethods(Graph) {
    NEIGHBORS_ITERATION.forEach((description) => {
        attachNeighborArrayCreator(Graph, description);
        attachForEachNeighbor(Graph, description);
        attachFindNeighbor(Graph, description);
        attachNeighborIteratorCreator(Graph, description);
    });
}

/**
 * Graphology Adjacency Iteration
 * ================================
 *
 * Attaching some methods to the Graph class to be able to iterate over a
 * graph's adjacency.
 */

/**
 * Function iterating over a simple graph's adjacency using a callback.
 *
 * @param {boolean}  breakable         - Can we break?
 * @param {boolean}  assymetric        - Whether to emit undirected edges only once.
 * @param {boolean}  disconnectedNodes - Whether to emit disconnected nodes.
 * @param {Graph}    graph             - Target Graph instance.
 * @param {callback} function          - Iteration callback.
 */
function forEachAdjacencySimple(
    breakable,
    assymetric,
    disconnectedNodes,
    graph,
    callback
) {
    const iterator = graph._nodes.values();

    const type = graph.type;

    let step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;

    while (((step = iterator.next()), step.done !== true)) {
        let hasEdges = false;

        sourceData = step.value;

        if (type !== 'undirected') {
            adj = sourceData.out;

            for (neighbor in adj) {
                edgeData = adj[neighbor];
                targetData = edgeData.target;

                hasEdges = true;
                shouldBreak = callback(
                    sourceData.key,
                    targetData.key,
                    sourceData.attributes,
                    targetData.attributes,
                    edgeData.key,
                    edgeData.attributes,
                    edgeData.undirected
                );

                if (breakable && shouldBreak) return edgeData;
            }
        }

        if (type !== 'directed') {
            adj = sourceData.undirected;

            for (neighbor in adj) {
                if (assymetric && sourceData.key > neighbor) continue;

                edgeData = adj[neighbor];
                targetData = edgeData.target;

                if (targetData.key !== neighbor) targetData = edgeData.source;

                hasEdges = true;
                shouldBreak = callback(
                    sourceData.key,
                    targetData.key,
                    sourceData.attributes,
                    targetData.attributes,
                    edgeData.key,
                    edgeData.attributes,
                    edgeData.undirected
                );

                if (breakable && shouldBreak) return edgeData;
            }
        }

        if (disconnectedNodes && !hasEdges) {
            shouldBreak = callback(
                sourceData.key,
                null,
                sourceData.attributes,
                null,
                null,
                null,
                null
            );

            if (breakable && shouldBreak) return null;
        }
    }

    return;
}

/**
 * Function iterating over a multi graph's adjacency using a callback.
 *
 * @param {boolean}  breakable         - Can we break?
 * @param {boolean}  assymetric        - Whether to emit undirected edges only once.
 * @param {boolean}  disconnectedNodes - Whether to emit disconnected nodes.
 * @param {Graph}    graph             - Target Graph instance.
 * @param {callback} function          - Iteration callback.
 */
function forEachAdjacencyMulti(
    breakable,
    assymetric,
    disconnectedNodes,
    graph,
    callback
) {
    const iterator = graph._nodes.values();

    const type = graph.type;

    let step;
    let sourceData;
    let neighbor;
    let container;
    let containerStep;
    let adj;
    let edgeData;
    let targetData;
    let shouldBreak;

    while (((step = iterator.next()), step.done !== true)) {
        let hasEdges = false;

        sourceData = step.value;

        if (type !== 'undirected') {
            adj = sourceData.out;

            for (neighbor in adj) {
                container = adj[neighbor].values();

                while (
                    ((containerStep = container.next()),
                    containerStep.done !== true)
                ) {
                    edgeData = containerStep.value;
                    targetData = edgeData.target;

                    hasEdges = true;
                    shouldBreak = callback(
                        sourceData.key,
                        targetData.key,
                        sourceData.attributes,
                        targetData.attributes,
                        edgeData.key,
                        edgeData.attributes,
                        edgeData.undirected
                    );

                    if (breakable && shouldBreak) return edgeData;
                }
            }
        }

        if (type !== 'directed') {
            adj = sourceData.undirected;

            for (neighbor in adj) {
                if (assymetric && sourceData.key > neighbor) continue;

                container = adj[neighbor].values();

                while (
                    ((containerStep = container.next()),
                    containerStep.done !== true)
                ) {
                    edgeData = containerStep.value;
                    targetData = edgeData.target;

                    if (targetData.key !== neighbor)
                        targetData = edgeData.source;

                    hasEdges = true;
                    shouldBreak = callback(
                        sourceData.key,
                        targetData.key,
                        sourceData.attributes,
                        targetData.attributes,
                        edgeData.key,
                        edgeData.attributes,
                        edgeData.undirected
                    );

                    if (breakable && shouldBreak) return edgeData;
                }
            }
        }

        if (disconnectedNodes && !hasEdges) {
            shouldBreak = callback(
                sourceData.key,
                null,
                sourceData.attributes,
                null,
                null,
                null,
                null
            );

            if (breakable && shouldBreak) return null;
        }
    }

    return;
}

// export function createAdjacencyIteratorSimple(graph) {
//   const iterator = graph._nodes.values();

//   const type = graph.type;

//   let state = 'outer',
//     sourceData,
//     neighbors,
//     adj,
//     offset;

//   return new Iterator(function next() {
//     let step;

//     if (state === 'outer') {
//       step = iterator.next();

//       if (step.done === true) return step;

//       sourceData = step.value;

//       state = 'directed';
//       return next();
//     }

//     if (state === 'directed') {
//       if (type === 'undirected') {
//         state = 'undirected';
//         return next();
//       }

//       adj = sourceData.out;
//       neighbors = Object.keys(sourceData.out);
//       offset = 0;
//       state = 'inner-directed';

//       return next();
//     }

//     if (state === 'undirected') {
//       if (type === 'directed') {
//         state = 'outer';
//         return next();
//       }

//       adj = sourceData.undirected;
//       neighbors = Object.keys(sourceData.undirected);
//       offset = 0;
//       state = 'inner-undirected';
//     }

//     // Inner
//     if (offset >= neighbors.length) {
//       if (state === 'inner-undirected') state = 'outer';
//       else state = 'undirected';

//       return next();
//     }

//     const neighbor = neighbors[offset++];
//     const edgeData = adj[neighbor];
//     let targetData = edgeData.target;

//     if (state === 'inner-undirected' && targetData.key === sourceData.key)
//       targetData = edgeData.source;

//     return {
//       done: false,
//       value: {
//         source: sourceData.key,
//         target: targetData.key,
//         sourceAttributes: sourceData.attributes,
//         targetAttributes: targetData.attributes,
//         edgeKey: edgeData.key,
//         edgeAttributes: edgeData.attributes,
//         undirected: edgeData.undirected
//       }
//     };
//   });
// }

// export function createAdjacencyIteratorMulti(graph) {
//   const iterator = graph._nodes.values();

//   const type = graph.type;

//   let state = 'outer',
//     sourceData,
//     neighbors,
//     container = null,
//     adj,
//     offset;

//   return new Iterator(function next() {
//     let step;

//     if (state === 'outer') {
//       step = iterator.next();

//       if (step.done === true) return step;

//       sourceData = step.value;

//       state = 'directed';
//       return next();
//     }

//     if (state === 'directed') {
//       if (type === 'undirected') {
//         state = 'undirected';
//         return next();
//       }

//       adj = sourceData.out;
//       neighbors = Object.keys(sourceData.out);
//       offset = 0;
//       state = 'inner-directed';

//       return next();
//     }

//     if (state === 'undirected') {
//       if (type === 'directed') {
//         state = 'outer';
//         return next();
//       }

//       adj = sourceData.undirected;
//       neighbors = Object.keys(sourceData.undirected);
//       offset = 0;
//       state = 'inner-undirected';
//     }

//     // Inner
//     if (!container && offset >= neighbors.length) {
//       if (state === 'inner-undirected') state = 'outer';
//       else state = 'undirected';

//       return next();
//     }

//     if (!container) {
//       const neighbor = neighbors[offset++];
//       container = adj[neighbor].values();
//       return next();
//     }

//     step = container.next();

//     if (step.done) {
//       container = null;
//       return next();
//     }

//     const edgeData = step.value;
//     let targetData = edgeData.target;

//     if (state === 'inner-undirected' && targetData.key === sourceData.key)
//       targetData = edgeData.source;

//     return {
//       done: false,
//       value: {
//         source: sourceData.key,
//         target: targetData.key,
//         sourceAttributes: sourceData.attributes,
//         targetAttributes: targetData.attributes,
//         edge: edgeData.key,
//         edgeAttributes: edgeData.attributes,
//         undirected: edgeData.undirected
//       }
//     };
//   });
// }

/**
 * Graphology Serialization Utilities
 * ===================================
 *
 * Collection of functions used to validate import-export formats & to ouput
 * them from internal graph data.
 *
 * Serialized Node:
 * {key, ?attributes}
 *
 * Serialized Edge:
 * {key?, source, target, attributes?, undirected?}
 *
 * Serialized Graph:
 * {nodes[], edges?[]}
 */

/**
 * Formats internal node data into a serialized node.
 *
 * @param  {any}    key  - The node's key.
 * @param  {object} data - Internal node's data.
 * @return {array}       - The serialized node.
 */
function serializeNode(key, data) {
    const serialized = { key };

    if (!isEmpty(data.attributes))
        serialized.attributes = assign({}, data.attributes);

    return serialized;
}

/**
 * Formats internal edge data into a serialized edge.
 *
 * @param  {any}    key  - The edge's key.
 * @param  {object} data - Internal edge's data.
 * @return {array}       - The serialized edge.
 */
function serializeEdge(key, data) {
    const serialized = {
        key,
        source: data.source.key,
        target: data.target.key,
    };

    if (!isEmpty(data.attributes))
        serialized.attributes = assign({}, data.attributes);

    if (data.undirected) serialized.undirected = true;

    return serialized;
}

/**
 * Checks whether the given value is a serialized node.
 *
 * @param  {mixed} value - Target value.
 * @return {string|null}
 */
function validateSerializedNode(value) {
    if (!isPlainObject(value)) return 'not-object';

    if (!('key' in value)) return 'no-key';

    if (
        'attributes' in value &&
        (!isPlainObject(value.attributes) || value.attributes === null)
    )
        return 'invalid-attributes';

    return null;
}

/**
 * Checks whether the given value is a serialized edge.
 *
 * @param  {mixed} value - Target value.
 * @return {string|null}
 */
function validateSerializedEdge(value) {
    if (!isPlainObject(value)) return 'not-object';

    if (!('source' in value)) return 'no-source';

    if (!('target' in value)) return 'no-target';

    if (
        'attributes' in value &&
        (!isPlainObject(value.attributes) || value.attributes === null)
    )
        return 'invalid-attributes';

    if ('undirected' in value && typeof value.undirected !== 'boolean')
        return 'invalid-undirected';

    return null;
}

/* eslint no-nested-ternary: 0 */

/**
 * Constants.
 */
const INSTANCE_ID = incrementalIdStartingFromRandomByte();

/**
 * Enums.
 */
const TYPES = new Set(['directed', 'undirected', 'mixed']);

const EMITTER_PROPS = new Set([
    'domain',
    '_events',
    '_eventsCount',
    '_maxListeners',
]);

const EDGE_ADD_METHODS = [
    {
        name: (verb) => `${verb}Edge`,
        generateKey: true,
    },
    {
        name: (verb) => `${verb}DirectedEdge`,
        generateKey: true,
        type: 'directed',
    },
    {
        name: (verb) => `${verb}UndirectedEdge`,
        generateKey: true,
        type: 'undirected',
    },
    {
        name: (verb) => `${verb}EdgeWithKey`,
    },
    {
        name: (verb) => `${verb}DirectedEdgeWithKey`,
        type: 'directed',
    },
    {
        name: (verb) => `${verb}UndirectedEdgeWithKey`,
        type: 'undirected',
    },
];

/**
 * Default options.
 */
const DEFAULTS = {
    allowSelfLoops: true,
    multi: false,
    type: 'mixed',
};

/**
 * Abstract functions used by the Graph class for various methods.
 */

/**
 * Internal method used to add a node to the given graph
 *
 * @param  {Graph}   graph           - Target graph.
 * @param  {any}     node            - The node's key.
 * @param  {object}  [attributes]    - Optional attributes.
 * @return {NodeData}                - Created node data.
 */
function addNode(graph, node, attributes) {
    if (attributes && !isPlainObject(attributes))
        throw new InvalidArgumentsGraphError(
            `Graph.addNode: invalid attributes. Expecting an object but got "${attributes}"`
        );

    // String coercion
    node = '' + node;
    attributes = attributes || {};

    if (graph._nodes.has(node))
        throw new UsageGraphError(
            `Graph.addNode: the "${node}" node already exist in the graph.`
        );

    const data = new graph.NodeDataClass(node, attributes);

    // Adding the node to internal register
    graph._nodes.set(node, data);

    // Emitting
    graph.emit('nodeAdded', {
        key: node,
        attributes,
    });

    return data;
}

/**
 * Same as the above but without sanity checks because we call this in contexts
 * where necessary checks were already done.
 */
function unsafeAddNode(graph, node, attributes) {
    const data = new graph.NodeDataClass(node, attributes);

    graph._nodes.set(node, data);

    graph.emit('nodeAdded', {
        key: node,
        attributes,
    });

    return data;
}

/**
 * Internal method used to add an arbitrary edge to the given graph.
 *
 * @param  {Graph}   graph           - Target graph.
 * @param  {string}  name            - Name of the child method for errors.
 * @param  {boolean} mustGenerateKey - Should the graph generate an id?
 * @param  {boolean} undirected      - Whether the edge is undirected.
 * @param  {any}     edge            - The edge's key.
 * @param  {any}     source          - The source node.
 * @param  {any}     target          - The target node.
 * @param  {object}  [attributes]    - Optional attributes.
 * @return {any}                     - The edge.
 *
 * @throws {Error} - Will throw if the graph is of the wrong type.
 * @throws {Error} - Will throw if the given attributes are not an object.
 * @throws {Error} - Will throw if source or target doesn't exist.
 * @throws {Error} - Will throw if the edge already exist.
 */
function addEdge(
    graph,
    name,
    mustGenerateKey,
    undirected,
    edge,
    source,
    target,
    attributes
) {
    // Checking validity of operation
    if (!undirected && graph.type === 'undirected')
        throw new UsageGraphError(
            `Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`
        );

    if (undirected && graph.type === 'directed')
        throw new UsageGraphError(
            `Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`
        );

    if (attributes && !isPlainObject(attributes))
        throw new InvalidArgumentsGraphError(
            `Graph.${name}: invalid attributes. Expecting an object but got "${attributes}"`
        );

    // Coercion of source & target:
    source = '' + source;
    target = '' + target;
    attributes = attributes || {};

    if (!graph.allowSelfLoops && source === target)
        throw new UsageGraphError(
            `Graph.${name}: source & target are the same ("${source}"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`
        );

    const sourceData = graph._nodes.get(source),
        targetData = graph._nodes.get(target);

    if (!sourceData)
        throw new NotFoundGraphError(
            `Graph.${name}: source node "${source}" not found.`
        );

    if (!targetData)
        throw new NotFoundGraphError(
            `Graph.${name}: target node "${target}" not found.`
        );

    // Must the graph generate an id for this edge?
    const eventData = {
        key: null,
        undirected,
        source,
        target,
        attributes,
    };

    if (mustGenerateKey) {
        // NOTE: in this case we can guarantee that the key does not already
        // exist and is already correctly casted as a string
        edge = graph._edgeKeyGenerator();
    } else {
        // Coercion of edge key
        edge = '' + edge;

        // Here, we have a key collision
        if (graph._edges.has(edge))
            throw new UsageGraphError(
                `Graph.${name}: the "${edge}" edge already exists in the graph.`
            );
    }

    // Here, we might have a source / target collision
    if (
        !graph.multi &&
        (undirected
            ? typeof sourceData.undirected[target] !== 'undefined'
            : typeof sourceData.out[target] !== 'undefined')
    ) {
        throw new UsageGraphError(
            `Graph.${name}: an edge linking "${source}" to "${target}" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`
        );
    }

    // Storing some data
    const edgeData = new EdgeData(
        undirected,
        edge,
        sourceData,
        targetData,
        attributes
    );

    // Adding the edge to the internal register
    graph._edges.set(edge, edgeData);

    // Incrementing node degree counters
    if (source === target) {
        if (undirected) {
            sourceData.undirectedSelfLoops++;
            graph._undirectedSelfLoopCount++;
        } else {
            sourceData.directedSelfLoops++;
            graph._directedSelfLoopCount++;
        }
    } else {
        if (undirected) {
            sourceData.undirectedDegree++;
            targetData.undirectedDegree++;
        } else {
            sourceData.outDegree++;
            targetData.inDegree++;
        }
    }

    // Updating relevant index
    updateStructureIndex(
        graph,
        undirected,
        edgeData,
        source,
        target,
        sourceData,
        targetData
    );

    if (undirected) graph._undirectedSize++;
    else graph._directedSize++;

    // Emitting
    eventData.key = edge;

    graph.emit('edgeAdded', eventData);

    return edge;
}

/**
 * Internal method used to add an arbitrary edge to the given graph.
 *
 * @param  {Graph}   graph           - Target graph.
 * @param  {string}  name            - Name of the child method for errors.
 * @param  {boolean} mustGenerateKey - Should the graph generate an id?
 * @param  {boolean} undirected      - Whether the edge is undirected.
 * @param  {any}     edge            - The edge's key.
 * @param  {any}     source          - The source node.
 * @param  {any}     target          - The target node.
 * @param  {object}  [attributes]    - Optional attributes.
 * @param  {boolean} [asUpdater]       - Are we updating or merging?
 * @return {any}                     - The edge.
 *
 * @throws {Error} - Will throw if the graph is of the wrong type.
 * @throws {Error} - Will throw if the given attributes are not an object.
 * @throws {Error} - Will throw if source or target doesn't exist.
 * @throws {Error} - Will throw if the edge already exist.
 */
function mergeEdge(
    graph,
    name,
    mustGenerateKey,
    undirected,
    edge,
    source,
    target,
    attributes,
    asUpdater
) {
    // Checking validity of operation
    if (!undirected && graph.type === 'undirected')
        throw new UsageGraphError(
            `Graph.${name}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`
        );

    if (undirected && graph.type === 'directed')
        throw new UsageGraphError(
            `Graph.${name}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`
        );

    if (attributes) {
        if (asUpdater) {
            if (typeof attributes !== 'function')
                throw new InvalidArgumentsGraphError(
                    `Graph.${name}: invalid updater function. Expecting a function but got "${attributes}"`
                );
        } else {
            if (!isPlainObject(attributes))
                throw new InvalidArgumentsGraphError(
                    `Graph.${name}: invalid attributes. Expecting an object but got "${attributes}"`
                );
        }
    }

    // Coercion of source & target:
    source = '' + source;
    target = '' + target;

    let updater;

    if (asUpdater) {
        updater = attributes;
        attributes = undefined;
    }

    if (!graph.allowSelfLoops && source === target)
        throw new UsageGraphError(
            `Graph.${name}: source & target are the same ("${source}"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`
        );

    let sourceData = graph._nodes.get(source);
    let targetData = graph._nodes.get(target);
    let edgeData;

    // Do we need to handle duplicate?
    let alreadyExistingEdgeData;

    if (!mustGenerateKey) {
        edgeData = graph._edges.get(edge);

        if (edgeData) {
            // Here, we need to ensure, if the user gave a key, that source & target
            // are consistent
            if (
                edgeData.source.key !== source ||
                edgeData.target.key !== target
            ) {
                // If source or target inconsistent
                if (
                    !undirected ||
                    edgeData.source.key !== target ||
                    edgeData.target.key !== source
                ) {
                    // If directed, or source/target aren't flipped
                    throw new UsageGraphError(
                        `Graph.${name}: inconsistency detected when attempting to merge the "${edge}" edge with "${source}" source & "${target}" target vs. ("${edgeData.source.key}", "${edgeData.target.key}").`
                    );
                }
            }

            alreadyExistingEdgeData = edgeData;
        }
    }

    // Here, we might have a source / target collision
    if (!alreadyExistingEdgeData && !graph.multi && sourceData) {
        alreadyExistingEdgeData = undirected
            ? sourceData.undirected[target]
            : sourceData.out[target];
    }

    // Handling duplicates
    if (alreadyExistingEdgeData) {
        const info = [alreadyExistingEdgeData.key, false, false, false];

        // We can skip the attribute merging part if the user did not provide them
        if (asUpdater ? !updater : !attributes) return info;

        // Updating the attributes
        if (asUpdater) {
            const oldAttributes = alreadyExistingEdgeData.attributes;
            alreadyExistingEdgeData.attributes = updater(oldAttributes);

            graph.emit('edgeAttributesUpdated', {
                type: 'replace',
                key: alreadyExistingEdgeData.key,
                attributes: alreadyExistingEdgeData.attributes,
            });
        }

        // Merging the attributes
        else {
            assign(alreadyExistingEdgeData.attributes, attributes);

            graph.emit('edgeAttributesUpdated', {
                type: 'merge',
                key: alreadyExistingEdgeData.key,
                attributes: alreadyExistingEdgeData.attributes,
                data: attributes,
            });
        }

        return info;
    }

    attributes = attributes || {};

    if (asUpdater && updater) attributes = updater(attributes);

    // Must the graph generate an id for this edge?
    const eventData = {
        key: null,
        undirected,
        source,
        target,
        attributes,
    };

    if (mustGenerateKey) {
        // NOTE: in this case we can guarantee that the key does not already
        // exist and is already correctly casted as a string
        edge = graph._edgeKeyGenerator();
    } else {
        // Coercion of edge key
        edge = '' + edge;

        // Here, we have a key collision
        if (graph._edges.has(edge))
            throw new UsageGraphError(
                `Graph.${name}: the "${edge}" edge already exists in the graph.`
            );
    }

    let sourceWasAdded = false;
    let targetWasAdded = false;

    if (!sourceData) {
        sourceData = unsafeAddNode(graph, source, {});
        sourceWasAdded = true;

        if (source === target) {
            targetData = sourceData;
            targetWasAdded = true;
        }
    }
    if (!targetData) {
        targetData = unsafeAddNode(graph, target, {});
        targetWasAdded = true;
    }

    // Storing some data
    edgeData = new EdgeData(
        undirected,
        edge,
        sourceData,
        targetData,
        attributes
    );

    // Adding the edge to the internal register
    graph._edges.set(edge, edgeData);

    // Incrementing node degree counters
    if (source === target) {
        if (undirected) {
            sourceData.undirectedSelfLoops++;
            graph._undirectedSelfLoopCount++;
        } else {
            sourceData.directedSelfLoops++;
            graph._directedSelfLoopCount++;
        }
    } else {
        if (undirected) {
            sourceData.undirectedDegree++;
            targetData.undirectedDegree++;
        } else {
            sourceData.outDegree++;
            targetData.inDegree++;
        }
    }

    // Updating relevant index
    updateStructureIndex(
        graph,
        undirected,
        edgeData,
        source,
        target,
        sourceData,
        targetData
    );

    if (undirected) graph._undirectedSize++;
    else graph._directedSize++;

    // Emitting
    eventData.key = edge;

    graph.emit('edgeAdded', eventData);

    return [edge, true, sourceWasAdded, targetWasAdded];
}

/**
 * Graph class
 *
 * @constructor
 * @param  {object}  [options] - Options:
 * @param  {boolean}   [allowSelfLoops] - Allow self loops?
 * @param  {string}    [type]           - Type of the graph.
 * @param  {boolean}   [map]            - Allow references as keys?
 * @param  {boolean}   [multi]          - Allow parallel edges?
 *
 * @throws {Error} - Will throw if the arguments are not valid.
 */
class Graph extends events.EventEmitter {
    constructor(options) {
        super();

        //-- Solving options
        options = assign({}, DEFAULTS, options);

        // Enforcing options validity
        if (typeof options.multi !== 'boolean')
            throw new InvalidArgumentsGraphError(
                `Graph.constructor: invalid 'multi' option. Expecting a boolean but got "${options.multi}".`
            );

        if (!TYPES.has(options.type))
            throw new InvalidArgumentsGraphError(
                `Graph.constructor: invalid 'type' option. Should be one of "mixed", "directed" or "undirected" but got "${options.type}".`
            );

        if (typeof options.allowSelfLoops !== 'boolean')
            throw new InvalidArgumentsGraphError(
                `Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got "${options.allowSelfLoops}".`
            );

        //-- Private properties

        // Utilities
        const NodeDataClass =
            options.type === 'mixed'
                ? MixedNodeData
                : options.type === 'directed'
                ? DirectedNodeData
                : UndirectedNodeData;

        privateProperty(this, 'NodeDataClass', NodeDataClass);

        // Internal edge key generator

        // NOTE: this internal generator produce keys that are strings
        // composed of a weird prefix, an incremental instance id starting from
        // a random byte and finally an internal instance incremental id.
        // All this to avoid intra-frame and cross-frame adversarial inputs
        // that can force a single #.addEdge call to degenerate into a O(n)
        // available key search loop.

        // It also ensures that automatically generated edge keys are unlikely
        // to produce collisions with arbitrary keys given by users.
        const instanceId = INSTANCE_ID();
        let edgeId = 0;

        const edgeKeyGenerator = () => {
            let availableEdgeKey;

            do {
                availableEdgeKey = 'geid_' + instanceId + '_' + edgeId++;
            } while (this._edges.has(availableEdgeKey));

            return availableEdgeKey;
        };

        // Indexes
        privateProperty(this, '_attributes', {});
        privateProperty(this, '_nodes', new Map());
        privateProperty(this, '_edges', new Map());
        privateProperty(this, '_directedSize', 0);
        privateProperty(this, '_undirectedSize', 0);
        privateProperty(this, '_directedSelfLoopCount', 0);
        privateProperty(this, '_undirectedSelfLoopCount', 0);
        privateProperty(this, '_edgeKeyGenerator', edgeKeyGenerator);

        // Options
        privateProperty(this, '_options', options);

        // Emitter properties
        EMITTER_PROPS.forEach((prop) =>
            privateProperty(this, prop, this[prop])
        );

        //-- Properties readers
        readOnlyProperty(this, 'order', () => this._nodes.size);
        readOnlyProperty(this, 'size', () => this._edges.size);
        readOnlyProperty(this, 'directedSize', () => this._directedSize);
        readOnlyProperty(this, 'undirectedSize', () => this._undirectedSize);
        readOnlyProperty(
            this,
            'selfLoopCount',
            () => this._directedSelfLoopCount + this._undirectedSelfLoopCount
        );
        readOnlyProperty(
            this,
            'directedSelfLoopCount',
            () => this._directedSelfLoopCount
        );
        readOnlyProperty(
            this,
            'undirectedSelfLoopCount',
            () => this._undirectedSelfLoopCount
        );
        readOnlyProperty(this, 'multi', this._options.multi);
        readOnlyProperty(this, 'type', this._options.type);
        readOnlyProperty(this, 'allowSelfLoops', this._options.allowSelfLoops);
        readOnlyProperty(this, 'implementation', () => 'graphology');
    }

    _resetInstanceCounters() {
        this._directedSize = 0;
        this._undirectedSize = 0;
        this._directedSelfLoopCount = 0;
        this._undirectedSelfLoopCount = 0;
    }

    /**---------------------------------------------------------------------------
     * Read
     **---------------------------------------------------------------------------
     */

    /**
     * Method returning whether the given node is found in the graph.
     *
     * @param  {any}     node - The node.
     * @return {boolean}
     */
    hasNode(node) {
        return this._nodes.has('' + node);
    }

    /**
     * Method returning whether the given directed edge is found in the graph.
     *
     * Arity 1:
     * @param  {any}     edge - The edge's key.
     *
     * Arity 2:
     * @param  {any}     source - The edge's source.
     * @param  {any}     target - The edge's target.
     *
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the arguments are invalid.
     */
    hasDirectedEdge(source, target) {
        // Early termination
        if (this.type === 'undirected') return false;

        if (arguments.length === 1) {
            const edge = '' + source;

            const edgeData = this._edges.get(edge);

            return !!edgeData && !edgeData.undirected;
        } else if (arguments.length === 2) {
            source = '' + source;
            target = '' + target;

            // If the node source or the target is not in the graph we break
            const nodeData = this._nodes.get(source);

            if (!nodeData) return false;

            // Is there a directed edge pointing toward target?
            const edges = nodeData.out[target];

            if (!edges) return false;

            return this.multi ? !!edges.size : true;
        }

        throw new InvalidArgumentsGraphError(
            `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`
        );
    }

    /**
     * Method returning whether the given undirected edge is found in the graph.
     *
     * Arity 1:
     * @param  {any}     edge - The edge's key.
     *
     * Arity 2:
     * @param  {any}     source - The edge's source.
     * @param  {any}     target - The edge's target.
     *
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the arguments are invalid.
     */
    hasUndirectedEdge(source, target) {
        // Early termination
        if (this.type === 'directed') return false;

        if (arguments.length === 1) {
            const edge = '' + source;

            const edgeData = this._edges.get(edge);

            return !!edgeData && edgeData.undirected;
        } else if (arguments.length === 2) {
            source = '' + source;
            target = '' + target;

            // If the node source or the target is not in the graph we break
            const nodeData = this._nodes.get(source);

            if (!nodeData) return false;

            // Is there a directed edge pointing toward target?
            const edges = nodeData.undirected[target];

            if (!edges) return false;

            return this.multi ? !!edges.size : true;
        }

        throw new InvalidArgumentsGraphError(
            `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`
        );
    }

    /**
     * Method returning whether the given edge is found in the graph.
     *
     * Arity 1:
     * @param  {any}     edge - The edge's key.
     *
     * Arity 2:
     * @param  {any}     source - The edge's source.
     * @param  {any}     target - The edge's target.
     *
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the arguments are invalid.
     */
    hasEdge(source, target) {
        if (arguments.length === 1) {
            const edge = '' + source;

            return this._edges.has(edge);
        } else if (arguments.length === 2) {
            source = '' + source;
            target = '' + target;

            // If the node source or the target is not in the graph we break
            const nodeData = this._nodes.get(source);

            if (!nodeData) return false;

            // Is there a directed edge pointing toward target?
            let edges =
                typeof nodeData.out !== 'undefined' && nodeData.out[target];

            if (!edges)
                edges =
                    typeof nodeData.undirected !== 'undefined' &&
                    nodeData.undirected[target];

            if (!edges) return false;

            return this.multi ? !!edges.size : true;
        }

        throw new InvalidArgumentsGraphError(
            `Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`
        );
    }

    /**
     * Method returning the edge matching source & target in a directed fashion.
     *
     * @param  {any} source - The edge's source.
     * @param  {any} target - The edge's target.
     *
     * @return {any|undefined}
     *
     * @throws {Error} - Will throw if the graph is multi.
     * @throws {Error} - Will throw if source or target doesn't exist.
     */
    directedEdge(source, target) {
        if (this.type === 'undirected') return;

        source = '' + source;
        target = '' + target;

        if (this.multi)
            throw new UsageGraphError(
                'Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.'
            );

        const sourceData = this._nodes.get(source);

        if (!sourceData)
            throw new NotFoundGraphError(
                `Graph.directedEdge: could not find the "${source}" source node in the graph.`
            );

        if (!this._nodes.has(target))
            throw new NotFoundGraphError(
                `Graph.directedEdge: could not find the "${target}" target node in the graph.`
            );

        const edgeData =
            (sourceData.out && sourceData.out[target]) || undefined;

        if (edgeData) return edgeData.key;
    }

    /**
     * Method returning the edge matching source & target in a undirected fashion.
     *
     * @param  {any} source - The edge's source.
     * @param  {any} target - The edge's target.
     *
     * @return {any|undefined}
     *
     * @throws {Error} - Will throw if the graph is multi.
     * @throws {Error} - Will throw if source or target doesn't exist.
     */
    undirectedEdge(source, target) {
        if (this.type === 'directed') return;

        source = '' + source;
        target = '' + target;

        if (this.multi)
            throw new UsageGraphError(
                'Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.'
            );

        const sourceData = this._nodes.get(source);

        if (!sourceData)
            throw new NotFoundGraphError(
                `Graph.undirectedEdge: could not find the "${source}" source node in the graph.`
            );

        if (!this._nodes.has(target))
            throw new NotFoundGraphError(
                `Graph.undirectedEdge: could not find the "${target}" target node in the graph.`
            );

        const edgeData =
            (sourceData.undirected && sourceData.undirected[target]) ||
            undefined;

        if (edgeData) return edgeData.key;
    }

    /**
     * Method returning the edge matching source & target in a mixed fashion.
     *
     * @param  {any} source - The edge's source.
     * @param  {any} target - The edge's target.
     *
     * @return {any|undefined}
     *
     * @throws {Error} - Will throw if the graph is multi.
     * @throws {Error} - Will throw if source or target doesn't exist.
     */
    edge(source, target) {
        if (this.multi)
            throw new UsageGraphError(
                'Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.'
            );

        source = '' + source;
        target = '' + target;

        const sourceData = this._nodes.get(source);

        if (!sourceData)
            throw new NotFoundGraphError(
                `Graph.edge: could not find the "${source}" source node in the graph.`
            );

        if (!this._nodes.has(target))
            throw new NotFoundGraphError(
                `Graph.edge: could not find the "${target}" target node in the graph.`
            );

        const edgeData =
            (sourceData.out && sourceData.out[target]) ||
            (sourceData.undirected && sourceData.undirected[target]) ||
            undefined;

        if (edgeData) return edgeData.key;
    }

    /**
     * Method returning whether two nodes are directed neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areDirectedNeighbors(node, neighbor) {
        node = '' + node;
        neighbor = '' + neighbor;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.areDirectedNeighbors: could not find the "${node}" node in the graph.`
            );

        if (this.type === 'undirected') return false;

        return neighbor in nodeData.in || neighbor in nodeData.out;
    }

    /**
     * Method returning whether two nodes are out neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areOutNeighbors(node, neighbor) {
        node = '' + node;
        neighbor = '' + neighbor;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.areOutNeighbors: could not find the "${node}" node in the graph.`
            );

        if (this.type === 'undirected') return false;

        return neighbor in nodeData.out;
    }

    /**
     * Method returning whether two nodes are in neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areInNeighbors(node, neighbor) {
        node = '' + node;
        neighbor = '' + neighbor;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.areInNeighbors: could not find the "${node}" node in the graph.`
            );

        if (this.type === 'undirected') return false;

        return neighbor in nodeData.in;
    }

    /**
     * Method returning whether two nodes are undirected neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areUndirectedNeighbors(node, neighbor) {
        node = '' + node;
        neighbor = '' + neighbor;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.areUndirectedNeighbors: could not find the "${node}" node in the graph.`
            );

        if (this.type === 'directed') return false;

        return neighbor in nodeData.undirected;
    }

    /**
     * Method returning whether two nodes are neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areNeighbors(node, neighbor) {
        node = '' + node;
        neighbor = '' + neighbor;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.areNeighbors: could not find the "${node}" node in the graph.`
            );

        if (this.type !== 'undirected') {
            if (neighbor in nodeData.in || neighbor in nodeData.out)
                return true;
        }

        if (this.type !== 'directed') {
            if (neighbor in nodeData.undirected) return true;
        }

        return false;
    }

    /**
     * Method returning whether two nodes are inbound neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areInboundNeighbors(node, neighbor) {
        node = '' + node;
        neighbor = '' + neighbor;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.areInboundNeighbors: could not find the "${node}" node in the graph.`
            );

        if (this.type !== 'undirected') {
            if (neighbor in nodeData.in) return true;
        }

        if (this.type !== 'directed') {
            if (neighbor in nodeData.undirected) return true;
        }

        return false;
    }

    /**
     * Method returning whether two nodes are outbound neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areOutboundNeighbors(node, neighbor) {
        node = '' + node;
        neighbor = '' + neighbor;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.areOutboundNeighbors: could not find the "${node}" node in the graph.`
            );

        if (this.type !== 'undirected') {
            if (neighbor in nodeData.out) return true;
        }

        if (this.type !== 'directed') {
            if (neighbor in nodeData.undirected) return true;
        }

        return false;
    }

    /**
     * Method returning the given node's in degree.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    inDegree(node) {
        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.inDegree: could not find the "${node}" node in the graph.`
            );

        if (this.type === 'undirected') return 0;

        return nodeData.inDegree + nodeData.directedSelfLoops;
    }

    /**
     * Method returning the given node's out degree.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    outDegree(node) {
        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.outDegree: could not find the "${node}" node in the graph.`
            );

        if (this.type === 'undirected') return 0;

        return nodeData.outDegree + nodeData.directedSelfLoops;
    }

    /**
     * Method returning the given node's directed degree.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    directedDegree(node) {
        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.directedDegree: could not find the "${node}" node in the graph.`
            );

        if (this.type === 'undirected') return 0;

        const loops = nodeData.directedSelfLoops;

        const inDegree = nodeData.inDegree + loops;
        const outDegree = nodeData.outDegree + loops;

        return inDegree + outDegree;
    }

    /**
     * Method returning the given node's undirected degree.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    undirectedDegree(node) {
        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.undirectedDegree: could not find the "${node}" node in the graph.`
            );

        if (this.type === 'directed') return 0;

        const loops = nodeData.undirectedSelfLoops;

        return nodeData.undirectedDegree + loops * 2;
    }

    /**
     * Method returning the given node's directed degree.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    degree(node) {
        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.degree: could not find the "${node}" node in the graph.`
            );

        let degree = 0;

        if (this.type !== 'directed') {
            degree +=
                nodeData.undirectedDegree + nodeData.undirectedSelfLoops * 2;
        }

        if (this.type !== 'undirected') {
            degree +=
                nodeData.inDegree +
                nodeData.outDegree +
                nodeData.directedSelfLoops * 2;
        }

        return degree;
    }

    /**
     * Method returning the given node's in degree without considering self loops.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    inDegreeWithoutSelfLoops(node) {
        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.inDegreeWithoutSelfLoops: could not find the "${node}" node in the graph.`
            );

        if (this.type === 'undirected') return 0;

        return nodeData.inDegree;
    }

    /**
     * Method returning the given node's out degree without considering self loops.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    outDegreeWithoutSelfLoops(node) {
        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.outDegreeWithoutSelfLoops: could not find the "${node}" node in the graph.`
            );

        if (this.type === 'undirected') return 0;

        return nodeData.outDegree;
    }

    /**
     * Method returning the given node's directed degree without considering self loops.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    directedDegreeWithoutSelfLoops(node) {
        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.directedDegreeWithoutSelfLoops: could not find the "${node}" node in the graph.`
            );

        if (this.type === 'undirected') return 0;

        return nodeData.inDegree + nodeData.outDegree;
    }

    /**
     * Method returning the given node's undirected degree without considering self loops.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    undirectedDegreeWithoutSelfLoops(node) {
        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.undirectedDegreeWithoutSelfLoops: could not find the "${node}" node in the graph.`
            );

        if (this.type === 'directed') return 0;

        return nodeData.undirectedDegree;
    }

    /**
     * Method returning the given node's directed degree without considering self loops.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    degreeWithoutSelfLoops(node) {
        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.degreeWithoutSelfLoops: could not find the "${node}" node in the graph.`
            );

        let degree = 0;

        if (this.type !== 'directed') {
            degree += nodeData.undirectedDegree;
        }

        if (this.type !== 'undirected') {
            degree += nodeData.inDegree + nodeData.outDegree;
        }

        return degree;
    }

    /**
     * Method returning the given edge's source.
     *
     * @param  {any} edge - The edge's key.
     * @return {any}      - The edge's source.
     *
     * @throws {Error} - Will throw if the edge isn't in the graph.
     */
    source(edge) {
        edge = '' + edge;

        const data = this._edges.get(edge);

        if (!data)
            throw new NotFoundGraphError(
                `Graph.source: could not find the "${edge}" edge in the graph.`
            );

        return data.source.key;
    }

    /**
     * Method returning the given edge's target.
     *
     * @param  {any} edge - The edge's key.
     * @return {any}      - The edge's target.
     *
     * @throws {Error} - Will throw if the edge isn't in the graph.
     */
    target(edge) {
        edge = '' + edge;

        const data = this._edges.get(edge);

        if (!data)
            throw new NotFoundGraphError(
                `Graph.target: could not find the "${edge}" edge in the graph.`
            );

        return data.target.key;
    }

    /**
     * Method returning the given edge's extremities.
     *
     * @param  {any}   edge - The edge's key.
     * @return {array}      - The edge's extremities.
     *
     * @throws {Error} - Will throw if the edge isn't in the graph.
     */
    extremities(edge) {
        edge = '' + edge;

        const edgeData = this._edges.get(edge);

        if (!edgeData)
            throw new NotFoundGraphError(
                `Graph.extremities: could not find the "${edge}" edge in the graph.`
            );

        return [edgeData.source.key, edgeData.target.key];
    }

    /**
     * Given a node & an edge, returns the other extremity of the edge.
     *
     * @param  {any}   node - The node's key.
     * @param  {any}   edge - The edge's key.
     * @return {any}        - The related node.
     *
     * @throws {Error} - Will throw if the edge isn't in the graph or if the
     *                   edge & node are not related.
     */
    opposite(node, edge) {
        node = '' + node;
        edge = '' + edge;

        const data = this._edges.get(edge);

        if (!data)
            throw new NotFoundGraphError(
                `Graph.opposite: could not find the "${edge}" edge in the graph.`
            );

        const source = data.source.key;
        const target = data.target.key;

        if (node === source) return target;
        if (node === target) return source;

        throw new NotFoundGraphError(
            `Graph.opposite: the "${node}" node is not attached to the "${edge}" edge (${source}, ${target}).`
        );
    }

    /**
     * Returns whether the given edge has the given node as extremity.
     *
     * @param  {any}     edge - The edge's key.
     * @param  {any}     node - The node's key.
     * @return {boolean}      - The related node.
     *
     * @throws {Error} - Will throw if either the node or the edge isn't in the graph.
     */
    hasExtremity(edge, node) {
        edge = '' + edge;
        node = '' + node;

        const data = this._edges.get(edge);

        if (!data)
            throw new NotFoundGraphError(
                `Graph.hasExtremity: could not find the "${edge}" edge in the graph.`
            );

        return data.source.key === node || data.target.key === node;
    }

    /**
     * Method returning whether the given edge is undirected.
     *
     * @param  {any}     edge - The edge's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the edge isn't in the graph.
     */
    isUndirected(edge) {
        edge = '' + edge;

        const data = this._edges.get(edge);

        if (!data)
            throw new NotFoundGraphError(
                `Graph.isUndirected: could not find the "${edge}" edge in the graph.`
            );

        return data.undirected;
    }

    /**
     * Method returning whether the given edge is directed.
     *
     * @param  {any}     edge - The edge's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the edge isn't in the graph.
     */
    isDirected(edge) {
        edge = '' + edge;

        const data = this._edges.get(edge);

        if (!data)
            throw new NotFoundGraphError(
                `Graph.isDirected: could not find the "${edge}" edge in the graph.`
            );

        return !data.undirected;
    }

    /**
     * Method returning whether the given edge is a self loop.
     *
     * @param  {any}     edge - The edge's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the edge isn't in the graph.
     */
    isSelfLoop(edge) {
        edge = '' + edge;

        const data = this._edges.get(edge);

        if (!data)
            throw new NotFoundGraphError(
                `Graph.isSelfLoop: could not find the "${edge}" edge in the graph.`
            );

        return data.source === data.target;
    }

    /**---------------------------------------------------------------------------
     * Mutation
     **---------------------------------------------------------------------------
     */

    /**
     * Method used to add a node to the graph.
     *
     * @param  {any}    node         - The node.
     * @param  {object} [attributes] - Optional attributes.
     * @return {any}                 - The node.
     *
     * @throws {Error} - Will throw if the given node already exist.
     * @throws {Error} - Will throw if the given attributes are not an object.
     */
    addNode(node, attributes) {
        const nodeData = addNode(this, node, attributes);

        return nodeData.key;
    }

    /**
     * Method used to merge a node into the graph.
     *
     * @param  {any}    node         - The node.
     * @param  {object} [attributes] - Optional attributes.
     * @return {any}                 - The node.
     */
    mergeNode(node, attributes) {
        if (attributes && !isPlainObject(attributes))
            throw new InvalidArgumentsGraphError(
                `Graph.mergeNode: invalid attributes. Expecting an object but got "${attributes}"`
            );

        // String coercion
        node = '' + node;
        attributes = attributes || {};

        // If the node already exists, we merge the attributes
        let data = this._nodes.get(node);

        if (data) {
            if (attributes) {
                assign(data.attributes, attributes);

                this.emit('nodeAttributesUpdated', {
                    type: 'merge',
                    key: node,
                    attributes: data.attributes,
                    data: attributes,
                });
            }
            return [node, false];
        }

        data = new this.NodeDataClass(node, attributes);

        // Adding the node to internal register
        this._nodes.set(node, data);

        // Emitting
        this.emit('nodeAdded', {
            key: node,
            attributes,
        });

        return [node, true];
    }

    /**
     * Method used to add a node if it does not exist in the graph or else to
     * update its attributes using a function.
     *
     * @param  {any}      node      - The node.
     * @param  {function} [updater] - Optional updater function.
     * @return {any}                - The node.
     */
    updateNode(node, updater) {
        if (updater && typeof updater !== 'function')
            throw new InvalidArgumentsGraphError(
                `Graph.updateNode: invalid updater function. Expecting a function but got "${updater}"`
            );

        // String coercion
        node = '' + node;

        // If the node already exists, we update the attributes
        let data = this._nodes.get(node);

        if (data) {
            if (updater) {
                const oldAttributes = data.attributes;
                data.attributes = updater(oldAttributes);

                this.emit('nodeAttributesUpdated', {
                    type: 'replace',
                    key: node,
                    attributes: data.attributes,
                });
            }
            return [node, false];
        }

        const attributes = updater ? updater({}) : {};

        data = new this.NodeDataClass(node, attributes);

        // Adding the node to internal register
        this._nodes.set(node, data);

        // Emitting
        this.emit('nodeAdded', {
            key: node,
            attributes,
        });

        return [node, true];
    }

    /**
     * Method used to drop a single node & all its attached edges from the graph.
     *
     * @param  {any}    node - The node.
     * @return {Graph}
     *
     * @throws {Error} - Will throw if the node doesn't exist.
     */
    dropNode(node) {
        node = '' + node;

        const nodeData = this._nodes.get(node);

        if (!nodeData)
            throw new NotFoundGraphError(
                `Graph.dropNode: could not find the "${node}" node in the graph.`
            );

        // Removing attached edges
        // TODO: we could do faster
        this.forEachEdge(node, (edge) => {
            this.dropEdge(edge);
        });

        // Dropping the node from the register
        this._nodes.delete(node);

        // Emitting
        this.emit('nodeDropped', {
            key: node,
            attributes: nodeData.attributes,
        });
    }

    /**
     * Method used to drop a single edge from the graph.
     *
     * Arity 1:
     * @param  {any}    edge - The edge.
     *
     * Arity 2:
     * @param  {any}    source - Source node.
     * @param  {any}    target - Target node.
     *
     * @return {Graph}
     *
     * @throws {Error} - Will throw if the edge doesn't exist.
     */
    dropEdge(edge) {
        let edgeData;

        if (arguments.length > 1) {
            const source = '' + arguments[0],
                target = '' + arguments[1];

            edgeData = getMatchingEdge(this, source, target, this.type);

            if (!edgeData)
                throw new NotFoundGraphError(
                    `Graph.dropEdge: could not find the "${source}" -> "${target}" edge in the graph.`
                );
        } else {
            edge = '' + edge;

            edgeData = this._edges.get(edge);

            if (!edgeData)
                throw new NotFoundGraphError(
                    `Graph.dropEdge: could not find the "${edge}" edge in the graph.`
                );
        }

        // Dropping the edge from the register
        this._edges.delete(edgeData.key);

        // Updating related degrees
        const { source: sourceData, target: targetData, attributes } = edgeData;

        const undirected = edgeData.undirected;

        if (sourceData === targetData) {
            if (undirected) {
                sourceData.undirectedSelfLoops--;
                this._undirectedSelfLoopCount--;
            } else {
                sourceData.directedSelfLoops--;
                this._directedSelfLoopCount--;
            }
        } else {
            if (undirected) {
                sourceData.undirectedDegree--;
                targetData.undirectedDegree--;
            } else {
                sourceData.outDegree--;
                targetData.inDegree--;
            }
        }

        // Clearing index
        clearEdgeFromStructureIndex(this, undirected, edgeData);

        if (undirected) this._undirectedSize--;
        else this._directedSize--;

        // Emitting
        this.emit('edgeDropped', {
            key: edge,
            attributes,
            source: sourceData.key,
            target: targetData.key,
            undirected,
        });

        return this;
    }

    /**
     * Method used to remove every edge & every node from the graph.
     *
     * @return {Graph}
     */
    clear() {
        // Clearing edges
        this._edges.clear();

        // Clearing nodes
        this._nodes.clear();

        // Reset counters
        this._resetInstanceCounters();

        // Emitting
        this.emit('cleared');
    }

    /**
     * Method used to remove every edge from the graph.
     *
     * @return {Graph}
     */
    clearEdges() {
        clearStructureIndex(this);

        // Clearing edges
        this._edges.clear();

        // Reset counters
        this._resetInstanceCounters();

        // Emitting
        this.emit('edgesCleared');
    }

    /**---------------------------------------------------------------------------
     * Attributes-related methods
     **---------------------------------------------------------------------------
     */

    /**
     * Method returning the desired graph's attribute.
     *
     * @param  {string} name - Name of the attribute.
     * @return {any}
     */
    getAttribute(name) {
        return this._attributes[name];
    }

    /**
     * Method returning the graph's attributes.
     *
     * @return {object}
     */
    getAttributes() {
        return this._attributes;
    }

    /**
     * Method returning whether the graph has the desired attribute.
     *
     * @param  {string}  name - Name of the attribute.
     * @return {boolean}
     */
    hasAttribute(name) {
        return this._attributes.hasOwnProperty(name);
    }

    /**
     * Method setting a value for the desired graph's attribute.
     *
     * @param  {string}  name  - Name of the attribute.
     * @param  {any}     value - Value for the attribute.
     * @return {Graph}
     */
    setAttribute(name, value) {
        this._attributes[name] = value;

        // Emitting
        this.emit('attributesUpdated', {
            type: 'set',
            attributes: this._attributes,
            name,
        });

        return this;
    }

    /**
     * Method using a function to update the desired graph's attribute's value.
     *
     * @param  {string}   name    - Name of the attribute.
     * @param  {function} updater - Function use to update the attribute's value.
     * @return {Graph}
     */
    updateAttribute(name, updater) {
        if (typeof updater !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.updateAttribute: updater should be a function.'
            );

        const value = this._attributes[name];

        this._attributes[name] = updater(value);

        // Emitting
        this.emit('attributesUpdated', {
            type: 'set',
            attributes: this._attributes,
            name,
        });

        return this;
    }

    /**
     * Method removing the desired graph's attribute.
     *
     * @param  {string} name  - Name of the attribute.
     * @return {Graph}
     */
    removeAttribute(name) {
        delete this._attributes[name];

        // Emitting
        this.emit('attributesUpdated', {
            type: 'remove',
            attributes: this._attributes,
            name,
        });

        return this;
    }

    /**
     * Method replacing the graph's attributes.
     *
     * @param  {object} attributes - New attributes.
     * @return {Graph}
     *
     * @throws {Error} - Will throw if given attributes are not a plain object.
     */
    replaceAttributes(attributes) {
        if (!isPlainObject(attributes))
            throw new InvalidArgumentsGraphError(
                'Graph.replaceAttributes: provided attributes are not a plain object.'
            );

        this._attributes = attributes;

        // Emitting
        this.emit('attributesUpdated', {
            type: 'replace',
            attributes: this._attributes,
        });

        return this;
    }

    /**
     * Method merging the graph's attributes.
     *
     * @param  {object} attributes - Attributes to merge.
     * @return {Graph}
     *
     * @throws {Error} - Will throw if given attributes are not a plain object.
     */
    mergeAttributes(attributes) {
        if (!isPlainObject(attributes))
            throw new InvalidArgumentsGraphError(
                'Graph.mergeAttributes: provided attributes are not a plain object.'
            );

        assign(this._attributes, attributes);

        // Emitting
        this.emit('attributesUpdated', {
            type: 'merge',
            attributes: this._attributes,
            data: attributes,
        });

        return this;
    }

    /**
     * Method updating the graph's attributes.
     *
     * @param  {function} updater - Function used to update the attributes.
     * @return {Graph}
     *
     * @throws {Error} - Will throw if given updater is not a function.
     */
    updateAttributes(updater) {
        if (typeof updater !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.updateAttributes: provided updater is not a function.'
            );

        this._attributes = updater(this._attributes);

        // Emitting
        this.emit('attributesUpdated', {
            type: 'update',
            attributes: this._attributes,
        });

        return this;
    }

    /**
     * Method used to update each node's attributes using the given function.
     *
     * @param {function}  updater - Updater function to use.
     * @param {object}    [hints] - Optional hints.
     */
    updateEachNodeAttributes(updater, hints) {
        if (typeof updater !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.updateEachNodeAttributes: expecting an updater function.'
            );

        if (hints && !validateHints(hints))
            throw new InvalidArgumentsGraphError(
                'Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'
            );

        const iterator = this._nodes.values();

        let step, nodeData;

        while (((step = iterator.next()), step.done !== true)) {
            nodeData = step.value;
            nodeData.attributes = updater(nodeData.key, nodeData.attributes);
        }

        this.emit('eachNodeAttributesUpdated', {
            hints: hints ? hints : null,
        });
    }

    /**
     * Method used to update each edge's attributes using the given function.
     *
     * @param {function}  updater - Updater function to use.
     * @param {object}    [hints] - Optional hints.
     */
    updateEachEdgeAttributes(updater, hints) {
        if (typeof updater !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.updateEachEdgeAttributes: expecting an updater function.'
            );

        if (hints && !validateHints(hints))
            throw new InvalidArgumentsGraphError(
                'Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'
            );

        const iterator = this._edges.values();

        let step, edgeData, sourceData, targetData;

        while (((step = iterator.next()), step.done !== true)) {
            edgeData = step.value;
            sourceData = edgeData.source;
            targetData = edgeData.target;

            edgeData.attributes = updater(
                edgeData.key,
                edgeData.attributes,
                sourceData.key,
                targetData.key,
                sourceData.attributes,
                targetData.attributes,
                edgeData.undirected
            );
        }

        this.emit('eachEdgeAttributesUpdated', {
            hints: hints ? hints : null,
        });
    }

    /**---------------------------------------------------------------------------
     * Iteration-related methods
     **---------------------------------------------------------------------------
     */

    /**
     * Method iterating over the graph's adjacency using the given callback.
     *
     * @param  {function}  callback - Callback to use.
     */
    forEachAdjacencyEntry(callback) {
        if (typeof callback !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.forEachAdjacencyEntry: expecting a callback.'
            );

        if (this.multi)
            forEachAdjacencyMulti(false, false, false, this, callback);
        else forEachAdjacencySimple(false, false, false, this, callback);
    }
    forEachAdjacencyEntryWithOrphans(callback) {
        if (typeof callback !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.'
            );

        if (this.multi)
            forEachAdjacencyMulti(false, false, true, this, callback);
        else forEachAdjacencySimple(false, false, true, this, callback);
    }

    /**
     * Method iterating over the graph's assymetric adjacency using the given callback.
     *
     * @param  {function}  callback - Callback to use.
     */
    forEachAssymetricAdjacencyEntry(callback) {
        if (typeof callback !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.forEachAssymetricAdjacencyEntry: expecting a callback.'
            );

        if (this.multi)
            forEachAdjacencyMulti(false, true, false, this, callback);
        else forEachAdjacencySimple(false, true, false, this, callback);
    }
    forEachAssymetricAdjacencyEntryWithOrphans(callback) {
        if (typeof callback !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.'
            );

        if (this.multi)
            forEachAdjacencyMulti(false, true, true, this, callback);
        else forEachAdjacencySimple(false, true, true, this, callback);
    }

    /**
     * Method returning the list of the graph's nodes.
     *
     * @return {array} - The nodes.
     */
    nodes() {
        if (typeof Array.from === 'function')
            return Array.from(this._nodes.keys());

        return take(this._nodes.keys(), this._nodes.size);
    }

    /**
     * Method iterating over the graph's nodes using the given callback.
     *
     * @param  {function}  callback - Callback (key, attributes, index).
     */
    forEachNode(callback) {
        if (typeof callback !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.forEachNode: expecting a callback.'
            );

        const iterator = this._nodes.values();

        let step, nodeData;

        while (((step = iterator.next()), step.done !== true)) {
            nodeData = step.value;
            callback(nodeData.key, nodeData.attributes);
        }
    }

    /**
     * Method iterating attempting to find a node matching the given predicate
     * function.
     *
     * @param  {function}  callback - Callback (key, attributes).
     */
    findNode(callback) {
        if (typeof callback !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.findNode: expecting a callback.'
            );

        const iterator = this._nodes.values();

        let step, nodeData;

        while (((step = iterator.next()), step.done !== true)) {
            nodeData = step.value;

            if (callback(nodeData.key, nodeData.attributes))
                return nodeData.key;
        }

        return;
    }

    /**
     * Method mapping nodes.
     *
     * @param  {function}  callback - Callback (key, attributes).
     */
    mapNodes(callback) {
        if (typeof callback !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.mapNode: expecting a callback.'
            );

        const iterator = this._nodes.values();

        let step, nodeData;

        const result = new Array(this.order);
        let i = 0;

        while (((step = iterator.next()), step.done !== true)) {
            nodeData = step.value;
            result[i++] = callback(nodeData.key, nodeData.attributes);
        }

        return result;
    }

    /**
     * Method returning whether some node verify the given predicate.
     *
     * @param  {function}  callback - Callback (key, attributes).
     */
    someNode(callback) {
        if (typeof callback !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.someNode: expecting a callback.'
            );

        const iterator = this._nodes.values();

        let step, nodeData;

        while (((step = iterator.next()), step.done !== true)) {
            nodeData = step.value;

            if (callback(nodeData.key, nodeData.attributes)) return true;
        }

        return false;
    }

    /**
     * Method returning whether all node verify the given predicate.
     *
     * @param  {function}  callback - Callback (key, attributes).
     */
    everyNode(callback) {
        if (typeof callback !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.everyNode: expecting a callback.'
            );

        const iterator = this._nodes.values();

        let step, nodeData;

        while (((step = iterator.next()), step.done !== true)) {
            nodeData = step.value;

            if (!callback(nodeData.key, nodeData.attributes)) return false;
        }

        return true;
    }

    /**
     * Method filtering nodes.
     *
     * @param  {function}  callback - Callback (key, attributes).
     */
    filterNodes(callback) {
        if (typeof callback !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.filterNodes: expecting a callback.'
            );

        const iterator = this._nodes.values();

        let step, nodeData;

        const result = [];

        while (((step = iterator.next()), step.done !== true)) {
            nodeData = step.value;

            if (callback(nodeData.key, nodeData.attributes))
                result.push(nodeData.key);
        }

        return result;
    }

    /**
     * Method reducing nodes.
     *
     * @param  {function}  callback - Callback (accumulator, key, attributes).
     */
    reduceNodes(callback, initialValue) {
        if (typeof callback !== 'function')
            throw new InvalidArgumentsGraphError(
                'Graph.reduceNodes: expecting a callback.'
            );

        if (arguments.length < 2)
            throw new InvalidArgumentsGraphError(
                'Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.'
            );

        let accumulator = initialValue;

        const iterator = this._nodes.values();

        let step, nodeData;

        while (((step = iterator.next()), step.done !== true)) {
            nodeData = step.value;
            accumulator = callback(
                accumulator,
                nodeData.key,
                nodeData.attributes
            );
        }

        return accumulator;
    }

    /**
     * Method returning an iterator over the graph's node entries.
     *
     * @return {Iterator}
     */
    nodeEntries() {
        const iterator$1 = this._nodes.values();

        return new iterator(() => {
            const step = iterator$1.next();

            if (step.done) return step;

            const data = step.value;

            return {
                value: { node: data.key, attributes: data.attributes },
                done: false,
            };
        });
    }

    /**---------------------------------------------------------------------------
     * Serialization
     **---------------------------------------------------------------------------
     */

    /**
     * Method exporting the target node.
     *
     * @param  {any}   node - Target node.
     * @return {array}      - The serialized node.
     *
     * @throws {Error} - Will throw if the node is not found.
     */
    exportNode(node) {
        node = '' + node;

        const data = this._nodes.get(node);

        if (!data)
            throw new NotFoundGraphError(
                `Graph.exportNode: could not find the "${node}" node in the graph.`
            );

        return serializeNode(node, data);
    }

    /**
     * Method exporting the target edge.
     *
     * @param  {any}   edge - Target edge.
     * @return {array}      - The serialized edge.
     *
     * @throws {Error} - Will throw if the edge is not found.
     */
    exportEdge(edge) {
        edge = '' + edge;

        const data = this._edges.get(edge);

        if (!data)
            throw new NotFoundGraphError(
                `Graph.exportEdge: could not find the "${edge}" edge in the graph.`
            );

        return serializeEdge(edge, data);
    }

    /**
     * Method used to export the whole graph.
     *
     * @return {object} - The serialized graph.
     */
    export() {
        const nodes = new Array(this._nodes.size);

        let i = 0;

        this._nodes.forEach((data, key) => {
            nodes[i++] = serializeNode(key, data);
        });

        const edges = new Array(this._edges.size);

        i = 0;

        this._edges.forEach((data, key) => {
            edges[i++] = serializeEdge(key, data);
        });

        return {
            attributes: this.getAttributes(),
            nodes,
            edges,
            options: {
                type: this.type,
                multi: this.multi,
                allowSelfLoops: this.allowSelfLoops,
            },
        };
    }

    /**
     * Method used to import a serialized node.
     *
     * @param  {object} data   - The serialized node.
     * @param  {boolean} merge - Whether to merge the given node.
     * @return {Graph}         - Returns itself for chaining.
     */
    importNode(data, merge = false) {
        // Validating
        const error = validateSerializedNode(data);

        if (error) {
            if (error === 'not-object')
                throw new InvalidArgumentsGraphError(
                    'Graph.importNode: invalid serialized node. A serialized node should be a plain object with at least a "key" property.'
                );
            if (error === 'no-key')
                throw new InvalidArgumentsGraphError(
                    'Graph.importNode: no key provided.'
                );
            if (error === 'invalid-attributes')
                throw new InvalidArgumentsGraphError(
                    'Graph.importNode: invalid attributes. Attributes should be a plain object, null or omitted.'
                );
        }

        // Adding the node
        const { key, attributes = {} } = data;

        if (merge) this.mergeNode(key, attributes);
        else this.addNode(key, attributes);

        return this;
    }

    /**
     * Method used to import a serialized edge.
     *
     * @param  {object}  data  - The serialized edge.
     * @param  {boolean} merge - Whether to merge the given edge.
     * @return {Graph}         - Returns itself for chaining.
     */
    importEdge(data, merge = false) {
        // Validating
        const error = validateSerializedEdge(data);

        if (error) {
            if (error === 'not-object')
                throw new InvalidArgumentsGraphError(
                    'Graph.importEdge: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.'
                );
            if (error === 'no-source')
                throw new InvalidArgumentsGraphError(
                    'Graph.importEdge: missing souce.'
                );
            if (error === 'no-target')
                throw new InvalidArgumentsGraphError(
                    'Graph.importEdge: missing target.'
                );
            if (error === 'invalid-attributes')
                throw new InvalidArgumentsGraphError(
                    'Graph.importEdge: invalid attributes. Attributes should be a plain object, null or omitted.'
                );
            if (error === 'invalid-undirected')
                throw new InvalidArgumentsGraphError(
                    'Graph.importEdge: invalid undirected. Undirected should be boolean or omitted.'
                );
        }

        // Adding the edge
        const { source, target, attributes = {}, undirected = false } = data;

        let method;

        if ('key' in data) {
            method = merge
                ? undirected
                    ? this.mergeUndirectedEdgeWithKey
                    : this.mergeDirectedEdgeWithKey
                : undirected
                ? this.addUndirectedEdgeWithKey
                : this.addDirectedEdgeWithKey;

            method.call(this, data.key, source, target, attributes);
        } else {
            method = merge
                ? undirected
                    ? this.mergeUndirectedEdge
                    : this.mergeDirectedEdge
                : undirected
                ? this.addUndirectedEdge
                : this.addDirectedEdge;

            method.call(this, source, target, attributes);
        }

        return this;
    }

    /**
     * Method used to import a serialized graph.
     *
     * @param  {object|Graph} data  - The serialized graph.
     * @param  {boolean}      merge - Whether to merge data.
     * @return {Graph}              - Returns itself for chaining.
     */
    import(data, merge = false) {
        // Importing a Graph instance
        if (isGraph(data)) {
            this.import(data.export(), merge);
            return this;
        }

        // Importing a serialized graph
        if (!isPlainObject(data))
            throw new InvalidArgumentsGraphError(
                'Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.'
            );

        if (data.attributes) {
            if (!isPlainObject(data.attributes))
                throw new InvalidArgumentsGraphError(
                    'Graph.import: invalid attributes. Expecting a plain object.'
                );

            if (merge) this.mergeAttributes(data.attributes);
            else this.replaceAttributes(data.attributes);
        }

        let i, l, list;

        if (data.nodes) {
            list = data.nodes;

            if (!Array.isArray(list))
                throw new InvalidArgumentsGraphError(
                    'Graph.import: invalid nodes. Expecting an array.'
                );

            for (i = 0, l = list.length; i < l; i++)
                this.importNode(list[i], merge);
        }

        if (data.edges) {
            list = data.edges;

            if (!Array.isArray(list))
                throw new InvalidArgumentsGraphError(
                    'Graph.import: invalid edges. Expecting an array.'
                );

            for (i = 0, l = list.length; i < l; i++)
                this.importEdge(list[i], merge);
        }

        return this;
    }

    /**---------------------------------------------------------------------------
     * Utils
     **---------------------------------------------------------------------------
     */

    /**
     * Method returning a null copy of the graph, i.e. a graph without nodes
     * & edges but with the exact same options.
     *
     * @param  {object} options - Options to merge with the current ones.
     * @return {Graph}          - The null copy.
     */
    nullCopy(options) {
        const graph = new Graph(assign({}, this._options, options));
        graph.replaceAttributes(assign({}, this.getAttributes()));
        return graph;
    }

    /**
     * Method returning an empty copy of the graph, i.e. a graph without edges but
     * with the exact same options.
     *
     * @param  {object} options - Options to merge with the current ones.
     * @return {Graph}          - The empty copy.
     */
    emptyCopy(options) {
        const graph = this.nullCopy(options);

        this._nodes.forEach((nodeData, key) => {
            const attributes = assign({}, nodeData.attributes);

            // NOTE: no need to emit events since user cannot access the instance yet
            nodeData = new graph.NodeDataClass(key, attributes);
            graph._nodes.set(key, nodeData);
        });

        return graph;
    }

    /**
     * Method returning an exact copy of the graph.
     *
     * @return {Graph} - The copy.
     */
    copy() {
        const graph = this.emptyCopy();

        const iterator = this._edges.values();

        let step, edgeData;

        while (((step = iterator.next()), step.done !== true)) {
            edgeData = step.value;

            // NOTE: no need to emit events since user cannot access the instance yet
            addEdge(
                graph,
                'copy',
                false,
                edgeData.undirected,
                edgeData.key,
                edgeData.source.key,
                edgeData.target.key,
                assign({}, edgeData.attributes)
            );
        }

        return graph;
    }

    /**
     * Method upgrading the graph to a mixed one.
     *
     * @return {Graph} - The copy.
     */
    upgradeToMixed() {
        if (this.type === 'mixed') return this;

        // Upgrading node data:
        // NOTE: maybe this could lead to some de-optimization by usual
        // JavaScript engines but I cannot be sure of it. Another solution
        // would be to reinstantiate the classes but this surely has a performance
        // and memory impact.
        this._nodes.forEach((data) => data.upgradeToMixed());

        // Mutating the options & the instance
        this._options.type = 'mixed';
        readOnlyProperty(this, 'type', this._options.type);
        privateProperty(this, 'NodeDataClass', MixedNodeData);

        return this;
    }

    /**
     * Method upgrading the graph to a multi one.
     *
     * @return {Graph} - The copy.
     */
    upgradeToMulti() {
        if (this.multi) return this;

        // Mutating the options & the instance
        this._options.multi = true;
        readOnlyProperty(this, 'multi', true);

        // Upgrading indices
        upgradeStructureIndexToMulti(this);

        return this;
    }

    /**---------------------------------------------------------------------------
     * Known methods
     **---------------------------------------------------------------------------
     */

    /**
     * Method used by JavaScript to perform JSON serialization.
     *
     * @return {object} - The serialized graph.
     */
    toJSON() {
        return this.export();
    }

    /**
     * Method returning [object Graph].
     */
    toString() {
        return '[object Graph]';
    }

    /**
     * Method used internally by node's console to display a custom object.
     *
     * @return {object} - Formatted object representation of the graph.
     */
    inspect() {
        const nodes = {};
        this._nodes.forEach((data, key) => {
            nodes[key] = data.attributes;
        });

        const edges = {},
            multiIndex = {};

        this._edges.forEach((data, key) => {
            const direction = data.undirected ? '--' : '->';

            let label = '';

            let source = data.source.key;
            let target = data.target.key;
            let tmp;

            if (data.undirected && source > target) {
                tmp = source;
                source = target;
                target = tmp;
            }

            const desc = `(${source})${direction}(${target})`;

            if (!key.startsWith('geid_')) {
                label += `[${key}]: `;
            } else if (this.multi) {
                if (typeof multiIndex[desc] === 'undefined') {
                    multiIndex[desc] = 0;
                } else {
                    multiIndex[desc]++;
                }

                label += `${multiIndex[desc]}. `;
            }

            label += desc;

            edges[label] = data.attributes;
        });

        const dummy = {};

        for (const k in this) {
            if (
                this.hasOwnProperty(k) &&
                !EMITTER_PROPS.has(k) &&
                typeof this[k] !== 'function' &&
                typeof k !== 'symbol'
            )
                dummy[k] = this[k];
        }

        dummy.attributes = this._attributes;
        dummy.nodes = nodes;
        dummy.edges = edges;

        privateProperty(dummy, 'constructor', this.constructor);

        return dummy;
    }
}

/**
 * Attaching methods to the prototype.
 *
 * Here, we are attaching a wide variety of methods to the Graph class'
 * prototype when those are very numerous and when their creation is
 * abstracted.
 */

/**
 * Attaching custom inspect method for node >= 10.
 */
if (typeof Symbol !== 'undefined')
    Graph.prototype[Symbol.for('nodejs.util.inspect.custom')] =
        Graph.prototype.inspect;

/**
 * Related to edge addition.
 */
EDGE_ADD_METHODS.forEach((method) => {
    ['add', 'merge', 'update'].forEach((verb) => {
        const name = method.name(verb);
        const fn = verb === 'add' ? addEdge : mergeEdge;

        if (method.generateKey) {
            Graph.prototype[name] = function (source, target, attributes) {
                return fn(
                    this,
                    name,
                    true,
                    (method.type || this.type) === 'undirected',
                    null,
                    source,
                    target,
                    attributes,
                    verb === 'update'
                );
            };
        } else {
            Graph.prototype[name] = function (
                edge,
                source,
                target,
                attributes
            ) {
                return fn(
                    this,
                    name,
                    false,
                    (method.type || this.type) === 'undirected',
                    edge,
                    source,
                    target,
                    attributes,
                    verb === 'update'
                );
            };
        }
    });
});

/**
 * Attributes-related.
 */
attachNodeAttributesMethods(Graph);
attachEdgeAttributesMethods(Graph);

/**
 * Edge iteration-related.
 */
attachEdgeIterationMethods(Graph);

/**
 * Neighbor iteration-related.
 */
attachNeighborIterationMethods(Graph);

/**
 * Graphology Helper Classes
 * ==========================
 *
 * Building some higher-order classes instantiating the graph with
 * predefinite options.
 */

/**
 * Alternative constructors.
 */
class DirectedGraph extends Graph {
    constructor(options) {
        const finalOptions = assign({ type: 'directed' }, options);

        if ('multi' in finalOptions && finalOptions.multi !== false)
            throw new InvalidArgumentsGraphError(
                'DirectedGraph.from: inconsistent indication that the graph should be multi in given options!'
            );

        if (finalOptions.type !== 'directed')
            throw new InvalidArgumentsGraphError(
                'DirectedGraph.from: inconsistent "' +
                    finalOptions.type +
                    '" type in given options!'
            );

        super(finalOptions);
    }
}
class UndirectedGraph extends Graph {
    constructor(options) {
        const finalOptions = assign({ type: 'undirected' }, options);

        if ('multi' in finalOptions && finalOptions.multi !== false)
            throw new InvalidArgumentsGraphError(
                'UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!'
            );

        if (finalOptions.type !== 'undirected')
            throw new InvalidArgumentsGraphError(
                'UndirectedGraph.from: inconsistent "' +
                    finalOptions.type +
                    '" type in given options!'
            );

        super(finalOptions);
    }
}
class MultiGraph extends Graph {
    constructor(options) {
        const finalOptions = assign({ multi: true }, options);

        if ('multi' in finalOptions && finalOptions.multi !== true)
            throw new InvalidArgumentsGraphError(
                'MultiGraph.from: inconsistent indication that the graph should be simple in given options!'
            );

        super(finalOptions);
    }
}
class MultiDirectedGraph extends Graph {
    constructor(options) {
        const finalOptions = assign({ type: 'directed', multi: true }, options);

        if ('multi' in finalOptions && finalOptions.multi !== true)
            throw new InvalidArgumentsGraphError(
                'MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!'
            );

        if (finalOptions.type !== 'directed')
            throw new InvalidArgumentsGraphError(
                'MultiDirectedGraph.from: inconsistent "' +
                    finalOptions.type +
                    '" type in given options!'
            );

        super(finalOptions);
    }
}
class MultiUndirectedGraph extends Graph {
    constructor(options) {
        const finalOptions = assign(
            { type: 'undirected', multi: true },
            options
        );

        if ('multi' in finalOptions && finalOptions.multi !== true)
            throw new InvalidArgumentsGraphError(
                'MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!'
            );

        if (finalOptions.type !== 'undirected')
            throw new InvalidArgumentsGraphError(
                'MultiUndirectedGraph.from: inconsistent "' +
                    finalOptions.type +
                    '" type in given options!'
            );

        super(finalOptions);
    }
}

/**
 * Attaching static #.from method to each of the constructors.
 */
function attachStaticFromMethod(Class) {
    /**
     * Builds a graph from serialized data or another graph's data.
     *
     * @param  {Graph|SerializedGraph} data      - Hydratation data.
     * @param  {object}                [options] - Options.
     * @return {Class}
     */
    Class.from = function (data, options) {
        // Merging given options with serialized ones
        const finalOptions = assign({}, data.options, options);

        const instance = new Class(finalOptions);
        instance.import(data);

        return instance;
    };
}

attachStaticFromMethod(Graph);
attachStaticFromMethod(DirectedGraph);
attachStaticFromMethod(UndirectedGraph);
attachStaticFromMethod(MultiGraph);
attachStaticFromMethod(MultiDirectedGraph);
attachStaticFromMethod(MultiUndirectedGraph);

Graph.Graph = Graph;
Graph.DirectedGraph = DirectedGraph;
Graph.UndirectedGraph = UndirectedGraph;
Graph.MultiGraph = MultiGraph;
Graph.MultiDirectedGraph = MultiDirectedGraph;
Graph.MultiUndirectedGraph = MultiUndirectedGraph;

Graph.InvalidArgumentsGraphError = InvalidArgumentsGraphError;
Graph.NotFoundGraphError = NotFoundGraphError;
Graph.UsageGraphError = UsageGraphError;

function createGraph(poolsMap) {
    const pools = Object.values(poolsMap);
    const graph = new MultiUndirectedGraph();
    const tokens = _.uniqBy(
        _.flatten(pools.map((pool) => pool.tokensList)),
        (token) => token
    );
    for (const token of tokens) {
        graph.addNode(token);
    }
    for (const pool of pools) {
        const map = getMainTokenToPoolTokenMap(pool, poolsMap);
        //we sort the main tokens to ensure that the order is always the same across all pools
        //this is specifically important for instances where linear pool bpts are being mapped down
        const mainTokens = Object.keys(map).sort();
        for (let i = 0; i < mainTokens.length - 1; i++) {
            for (let j = i + 1; j < mainTokens.length; j++) {
                //don't include linear pools in the path
                if (pool.poolType === exports.PoolTypes.Linear) {
                    continue;
                }
                const poolPair = pool.parsePoolPairData(
                    map[mainTokens[i]],
                    map[mainTokens[j]]
                );
                const reversePoolPair = pool.parsePoolPairData(
                    map[mainTokens[j]],
                    map[mainTokens[i]]
                );
                graph.addUndirectedEdgeWithKey(
                    `${pool.id}-${mainTokens[i]}-${mainTokens[j]}`,
                    mainTokens[i],
                    mainTokens[j],
                    {
                        poolId: pool.id,
                        poolAddress: pool.address,
                        poolPair,
                        normalizedLiquidity:
                            pool.getNormalizedLiquidity(poolPair),
                        reversePoolPair,
                        reverseNormalizedLiquidity:
                            pool.getNormalizedLiquidity(reversePoolPair),
                        pool,
                    }
                );
            }
        }
        const isPhantomStable =
            pool.poolType === exports.PoolTypes.MetaStable &&
            pool.tokensList.includes(pool.address);
        //we need to create the edges between the phantom BPTs to support the relayer routes
        if (pool.poolType === exports.PoolTypes.Linear || isPhantomStable) {
            const tokens = pool.tokensList;
            for (let i = 0; i < tokens.length; i++) {
                if (tokens[i] === pool.address) {
                    continue;
                }
                const poolPair = pool.parsePoolPairData(
                    pool.address,
                    tokens[i]
                );
                const reversePoolPair = pool.parsePoolPairData(
                    tokens[i],
                    pool.address
                );
                graph.addUndirectedEdgeWithKey(
                    `${pool.id}-${pool.address}-${tokens[i]}}`,
                    pool.address,
                    tokens[i],
                    {
                        poolId: pool.id,
                        poolAddress: pool.address,
                        poolPair,
                        normalizedLiquidity:
                            pool.getNormalizedLiquidity(poolPair),
                        reversePoolPair,
                        reverseNormalizedLiquidity:
                            pool.getNormalizedLiquidity(reversePoolPair),
                        pool,
                    }
                );
            }
        }
    }
    return graph;
}
function findPaths(
    graph,
    allPools,
    token,
    tokenOut,
    path,
    depth,
    maxDepth,
    isRelayerRoute,
    callback
) {
    //either the token in or token out are not in the graph
    if (!graph.hasNode(token) || !graph.hasNode(tokenOut)) {
        return;
    }
    const neighbors = graph.neighbors(token);
    for (const neighbor of neighbors) {
        if (neighbor === tokenOut) {
            const expanded = expandPath(graph, allPools, isRelayerRoute, [
                ...path,
                tokenOut,
            ]);
            if (expanded.length > 0) {
                callback(expanded);
            }
        }
        if (depth < maxDepth && !path.includes(neighbor)) {
            findPaths(
                graph,
                allPools,
                neighbor,
                tokenOut,
                [...path, neighbor],
                depth + 1,
                maxDepth,
                isRelayerRoute,
                callback
            );
        }
    }
}
function expandPath(graph, allPools, isRelayerRoute, path) {
    const parts = [];
    for (let i = 0; i < path.length - 1; i++) {
        parts[i] = [];
        const edgeEntries = graph.edgeEntries(path[i], path[i + 1]);
        for (const edge of edgeEntries) {
            parts[i].push(
                Object.assign(
                    { tokenIn: path[i], tokenOut: path[i + 1] },
                    edge.attributes
                )
            );
        }
    }
    const merged = cartesian(parts);
    return merged.filter((path) => {
        //does not hop through the same pool multiple times
        const uniqueSegments = _.uniqBy(path, (segment) => segment.poolId);
        if (path.length !== uniqueSegments.length) {
            return false;
        }
        //does not use the same tokenIn twice
        const uniqueTokensIn = _.uniqBy(path, (segment) => segment.tokenIn);
        if (path.length !== uniqueTokensIn.length) {
            return false;
        }
        //does not use the same tokenOut twice
        const uniqueTokensOut = _.uniqBy(path, (segment) => segment.tokenOut);
        if (path.length !== uniqueTokensOut.length) {
            return false;
        }
        //if the poolPair tokenIn === tokenOut, it means the segment is irrelavent, its hopping through the same nested pool twice
        if (
            path.filter(
                (segment) =>
                    segment.poolPair.tokenIn === segment.poolPair.tokenOut
            ).length > 0
        ) {
            return false;
        }
        if (isRelayerRoute) {
            //for relayer routes, we're only concerned with paths that go exclusively through phantom pools
            return (
                path.filter((segment) => {
                    const pool = allPools[segment.poolAddress];
                    return (
                        pool.poolType === exports.PoolTypes.Linear ||
                        (pool.poolType === exports.PoolTypes.MetaStable &&
                            pool.tokensList.includes(segment.poolAddress))
                    );
                }).length === path.length
            );
        } else {
            //if a pool in the path contains the bpt of another pool, the same pool appears twice in the path
            for (let i = 0; i < path.length - 1; i++) {
                const pool = allPools[path[i].poolAddress];
                for (let j = i + 1; j < path.length; j++) {
                    const otherPool = allPools[path[j].poolAddress];
                    if (pool.tokensList.includes(otherPool.address)) {
                        return false;
                    } else if (otherPool.tokensList.includes(pool.address)) {
                        return false;
                    }
                }
            }
        }
        return true;
    });
}
function sortAndFilterPaths(paths, poolsMap, options) {
    const directPaths = paths.filter((path) => path.length === 1);
    const hopPaths = paths.filter((path) => path.length > 1);
    if (options.maxPools === 1) {
        return directPaths;
    }
    //group by the hopToken-poolId of the last hop
    const grouped = _.groupBy(hopPaths, (path) => {
        const lastSegment = path[path.length - 1];
        return `${lastSegment.tokenIn}-${lastSegment.poolId}`;
    });
    //select the path with the most liquid first hop from each group
    const filtered = _.map(grouped, (paths) => {
        return _.orderBy(
            paths,
            (path) => {
                const map = getMainTokenToPoolTokenMap(path[0].pool, poolsMap);
                //getNormalizedLiquidity is calculated in tokenOut, so for consistency
                //we pass the tokenIn as the tokenOut since path[0].tokenIn will always be the same
                return map[path[0].tokenIn] === path[0].poolPair.tokenOut
                    ? path[0].normalizedLiquidity.toNumber()
                    : path[0].reverseNormalizedLiquidity.toNumber();
            },
            ['desc']
        )[0];
    });
    let seenPools = [];
    const orderedPaths = _.orderBy(
        [...directPaths, ...filtered],
        [
            (path) => {
                const lastSegment = path[path.length - 1];
                const pathPoolIds = path.map((segment) => segment.poolId);
                const map = getMainTokenToPoolTokenMap(
                    lastSegment.pool,
                    poolsMap
                );
                const normalizedLiquidity =
                    map[lastSegment.tokenIn] === lastSegment.poolPair.tokenIn
                        ? lastSegment.normalizedLiquidity.toNumber()
                        : lastSegment.reverseNormalizedLiquidity.toNumber();
                //TODO: this needs to be monitored, make sure it doesn't create bad paths
                //give the boosted pools a bit of a push up so they get a better chance to be considered
                if (
                    _.intersection(options.boostedPools || [], pathPoolIds)
                        .length > 0
                ) {
                    return normalizedLiquidity * 5;
                }
                //apply at 25% penalty if one of the pools has already been seen
                if (_.intersection(seenPools, pathPoolIds).length > 0) {
                    return normalizedLiquidity * 0.75;
                }
                seenPools = [...seenPools, ...pathPoolIds];
                return normalizedLiquidity;
            },
        ],
        ['desc']
    );
    const uniquePaths = _.uniqBy(orderedPaths, (path) =>
        path
            .map(
                (segment) =>
                    `${segment.poolId}-${segment.tokenIn}-${segment.tokenOut}`
            )
            .join()
    );
    return uniquePaths.slice(0, 50);
}
function getPoolPairDataCacheKey(poolPairData, swapType) {
    return `${poolPairData.tokenIn}-${poolPairData.tokenOut}-${swapType}`;
}
function getMainTokenToPoolTokenMap(pool, poolsMap) {
    let map = {};
    for (const token of pool.tokensList) {
        //skip the phantom bpt
        if (token === pool.address) {
            continue;
        }
        const tokenPool = poolsMap[token];
        if (
            tokenPool &&
            tokenPool.poolType === exports.PoolTypes.Linear &&
            typeof tokenPool.mainIndex === 'number'
        ) {
            //nested linear pool
            map[tokenPool.tokensList[tokenPool.mainIndex]] = token;
        } else if (
            tokenPool &&
            tokenPool.poolType === exports.PoolTypes.MetaStable
        ) {
            //nested phantom stable
            map = Object.assign(
                Object.assign({}, map),
                lodash.exports.mapValues(
                    getMainTokenToPoolTokenMap(tokenPool, poolsMap),
                    () => tokenPool.address
                )
            );
        } else {
            map[token] = token;
        }
    }
    return map;
}
function getNestedLinearPoolsMap(pool, poolsMap) {
    const nested = [];
    for (const token of pool.tokensList) {
        if (
            poolsMap[token] &&
            poolsMap[token].poolType === exports.PoolTypes.Linear
        ) {
            const linearPool = poolsMap[token];
            nested.push({ pool: linearPool, parentPoolAddress: pool.address });
        } else if (
            poolsMap[token] &&
            poolsMap[token].poolType === exports.PoolTypes.MetaStable
        ) {
            //only support one level deep
            for (const nestedToken of poolsMap[token].tokensList) {
                if (
                    poolsMap[nestedToken] &&
                    poolsMap[nestedToken].poolType === exports.PoolTypes.Linear
                ) {
                    nested.push({
                        pool: poolsMap[nestedToken],
                        parentPoolAddress: poolsMap[token].address,
                    });
                }
            }
        }
    }
    if (nested.length === 0) {
        return {};
    }
    return lodash.exports.keyBy(
        nested,
        (item) => item.pool.tokensList[item.pool.mainIndex]
    );
}
function createNestedSwapPath(
    tokenIn,
    tokenOut,
    pool,
    linearPoolsMap,
    allPoolsMap
) {
    if (
        pool.tokensList.includes(tokenIn) &&
        pool.tokensList.includes(tokenOut)
    ) {
        return [getSwapAndPoolPair(pool, tokenIn, tokenOut)];
    }
    const path = [];
    let poolTokenIn = tokenIn;
    if (linearPoolsMap[tokenIn]) {
        const linearPool = linearPoolsMap[tokenIn];
        //swap token in for linear BPT (ie: USDC -> bb-a-USDC)
        path.push(
            getSwapAndPoolPair(
                linearPool.pool,
                tokenIn,
                linearPool.pool.address
            )
        );
        if (linearPool.parentPoolAddress !== pool.address) {
            //the linear pool is nested in a sub-phantom pool (ie:  bb-a-USD in bb-a-USD / bb-a-TUSD)
            const parentPool = allPoolsMap[linearPool.parentPoolAddress];
            //swap linear BPT for the sub-phantom BPT (ie: bb-a-USDC -> bb-a-USD)
            path.push(
                getSwapAndPoolPair(
                    parentPool,
                    linearPool.pool.address,
                    parentPool.address
                )
            );
            //the tokenIn for the top level pool is the sub-phantom BPT (bb-a-USD)
            poolTokenIn = parentPool.address;
        } else {
            //the tokenIn for the top level pool is the linear pool (ie: bb-a-USDC in bb-a-USD)
            poolTokenIn = linearPool.pool.address;
        }
    }
    let poolTokenOut = tokenOut;
    if (linearPoolsMap[tokenOut]) {
        const linearPool = linearPoolsMap[tokenOut];
        if (linearPool.parentPoolAddress === pool.address) {
            //the linear bpt is nested in the top level pool (ie: bb-a-USDT in bb-a-USD)
            poolTokenOut = linearPool.pool.address;
        } else {
            //the poolTokenOut is a sub-phantom BPT (ie: bb-a-USD in bb-a-USD / bb-a-TUSD)
            poolTokenOut = linearPool.parentPoolAddress;
        }
    }
    //top level token swap (ie: bb-a-USD -> bb-a-TUSD)
    path.push(getSwapAndPoolPair(pool, poolTokenIn, poolTokenOut));
    if (linearPoolsMap[tokenOut]) {
        const linearPool = linearPoolsMap[tokenOut];
        if (linearPool.parentPoolAddress !== pool.address) {
            //the linear pool is nested in a sub-phantom pool (ie:  bb-a-USD in bb-a-USD / bb-a-TUSD)
            const parentPool = allPoolsMap[linearPool.parentPoolAddress];
            //swap sub-phantom BPT for the linear BPT  (ie: bb-a-USD -> bb-a-USDC)
            path.push(
                getSwapAndPoolPair(
                    parentPool,
                    parentPool.address,
                    linearPool.pool.address
                )
            );
        }
        //swap linear BPT for the main token out  (ie: bb-a-USDC -> USDC)
        path.push(
            getSwapAndPoolPair(
                linearPool.pool,
                linearPool.pool.address,
                tokenOut
            )
        );
    }
    return path;
}
function getSwapAndPoolPair(pool, tokenIn, tokenOut) {
    const poolPair = pool.parsePoolPairData(tokenIn, tokenOut);
    return {
        poolPair,
        swap: {
            pool: pool.id,
            tokenIn: poolPair.tokenIn,
            tokenOut: poolPair.tokenOut,
            tokenInDecimals: poolPair.decimalsIn,
            tokenOutDecimals: poolPair.decimalsOut,
        },
    };
}
function cartesian(args) {
    const r = [],
        max = args.length - 1;
    function helper(arr, i) {
        for (let j = 0, l = args[i].length; j < l; j++) {
            const a = arr.slice(0); // clone arr
            a.push(args[i][j]);
            if (i == max) r.push(a);
            else helper(a, i + 1);
        }
    }
    helper([], 0);
    return r;
}

class WeightedPool {
    constructor(
        id,
        address,
        swapFee,
        totalWeight,
        totalShares,
        tokens,
        tokensList
    ) {
        this.poolType = exports.PoolTypes.Weighted;
        this.MAX_IN_RATIO = bignumber.parseFixed('0.3', 18);
        this.MAX_OUT_RATIO = bignumber.parseFixed('0.3', 18);
        this.limitAmountCache = new Map();
        this.id = id;
        this.address = address;
        this.swapFee = bignumber.parseFixed(swapFee, 18);
        this.totalShares = bignumber.parseFixed(totalShares, 18);
        this.tokens = tokens;
        this.tokensList = tokensList;
        this.totalWeight = bignumber.parseFixed(totalWeight, 18);
    }
    static fromPool(pool) {
        if (!pool.totalWeight)
            throw new Error('WeightedPool missing totalWeight');
        return new WeightedPool(
            pool.id,
            pool.address,
            pool.swapFee,
            pool.totalWeight,
            pool.totalShares,
            pool.tokens,
            pool.tokensList
        );
    }
    setTypeForSwap(type) {
        this.swapPairType = type;
    }
    parsePoolPairData(tokenIn, tokenOut) {
        const tokenIndexIn = this.tokens.findIndex(
            (t) => address.getAddress(t.address) === address.getAddress(tokenIn)
        );
        if (tokenIndexIn < 0) throw 'Pool does not contain tokenIn';
        const tI = this.tokens[tokenIndexIn];
        const balanceIn = tI.balance;
        const decimalsIn = tI.decimals;
        const weightIn = bignumber
            .parseFixed(tI.weight, 18)
            .mul(constants.WeiPerEther)
            .div(this.totalWeight);
        const tokenIndexOut = this.tokens.findIndex(
            (t) =>
                address.getAddress(t.address) === address.getAddress(tokenOut)
        );
        if (tokenIndexOut < 0) throw 'Pool does not contain tokenOut';
        const tO = this.tokens[tokenIndexOut];
        const balanceOut = tO.balance;
        const decimalsOut = tO.decimals;
        const weightOut = bignumber
            .parseFixed(tO.weight, 18)
            .mul(constants.WeiPerEther)
            .div(this.totalWeight);
        const poolPairData = {
            id: this.id,
            address: this.address,
            poolType: this.poolType,
            tokenIn: tokenIn,
            tokenOut: tokenOut,
            decimalsIn: Number(decimalsIn),
            decimalsOut: Number(decimalsOut),
            balanceIn: bignumber.parseFixed(balanceIn, decimalsIn),
            balanceOut: bignumber.parseFixed(balanceOut, decimalsOut),
            weightIn: weightIn,
            weightOut: weightOut,
            swapFee: this.swapFee,
        };
        return poolPairData;
    }
    // Normalized liquidity is an abstract term that can be thought of the
    // inverse of the slippage. It is proportional to the token balances in the
    // pool but also depends on the shape of the invariant curve.
    // As a standard, we define normalized liquidity in tokenOut
    getNormalizedLiquidity(poolPairData) {
        return bnum(
            bignumber.formatFixed(
                poolPairData.balanceOut
                    .mul(poolPairData.weightIn)
                    .div(poolPairData.weightIn.add(poolPairData.weightOut)),
                poolPairData.decimalsOut
            )
        );
    }
    getLimitAmountSwap(poolPairData, swapType) {
        const cacheKey = getPoolPairDataCacheKey(poolPairData, swapType);
        const cached = this.limitAmountCache.get(cacheKey);
        if (cached) {
            return cached;
        }
        let value;
        if (swapType === exports.SwapTypes.SwapExactIn) {
            value = bnum(
                bignumber.formatFixed(
                    poolPairData.balanceIn
                        .mul(this.MAX_IN_RATIO)
                        .div(constants.WeiPerEther),
                    poolPairData.decimalsIn
                )
            );
        } else {
            value = bnum(
                bignumber.formatFixed(
                    poolPairData.balanceOut
                        .mul(this.MAX_OUT_RATIO)
                        .div(constants.WeiPerEther),
                    poolPairData.decimalsOut
                )
            );
        }
        this.limitAmountCache.set(cacheKey, value);
        return value;
    }
    // Updates the balance of a given token for the pool
    updateTokenBalanceForPool(token, newBalance) {
        // token is BPT
        if (this.address == token) {
            this.totalShares = newBalance;
        } else {
            // token is underlying in the pool
            const T = this.tokens.find((t) => isSameAddress(t.address, token));
            if (!T) throw Error('Pool does not contain this token');
            T.balance = bignumber.formatFixed(newBalance, T.decimals);
        }
    }
    // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
    // i.e. when using token with 2decimals 0.002 should be returned as 0
    // Uses ROUND_DOWN mode (1)
    // calcOutGivenIn
    _exactTokenInForTokenOut(poolPairData, amount) {
        if (amount.isNaN()) return amount;
        try {
            const amt = _calcOutGivenIn$1(
                poolPairData.balanceIn.toBigInt(),
                poolPairData.weightIn.toBigInt(),
                poolPairData.balanceOut.toBigInt(),
                poolPairData.weightOut.toBigInt(),
                bignumber
                    .parseFixed(
                        amount.dp(poolPairData.decimalsIn, 1).toString(),
                        poolPairData.decimalsIn
                    )
                    .toBigInt(),
                poolPairData.swapFee.toBigInt()
            );
            // return human scaled
            const amtOldBn = bnum(amt.toString());
            return scale(amtOldBn, -poolPairData.decimalsOut);
        } catch (err) {
            return ZERO;
        }
    }
    // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
    // i.e. when using token with 2decimals 0.002 should be returned as 0
    // Uses ROUND_UP mode (0)
    // calcInGivenOut
    _tokenInForExactTokenOut(poolPairData, amount) {
        if (amount.isNaN()) return amount;
        try {
            const amt = _calcInGivenOut$1(
                poolPairData.balanceIn.toBigInt(),
                poolPairData.weightIn.toBigInt(),
                poolPairData.balanceOut.toBigInt(),
                poolPairData.weightOut.toBigInt(),
                bignumber
                    .parseFixed(
                        amount.dp(poolPairData.decimalsOut, 1).toString(),
                        poolPairData.decimalsOut
                    )
                    .toBigInt(),
                poolPairData.swapFee.toBigInt()
            );
            // return human scaled
            const amtOldBn = bnum(amt.toString());
            return scale(amtOldBn, -poolPairData.decimalsIn);
        } catch (err) {
            return ZERO;
        }
    }
    _spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, amount) {
        return _spotPriceAfterSwapExactTokenInForTokenOut$4(
            amount,
            poolPairData
        );
    }
    _spotPriceAfterSwapTokenInForExactTokenOut(poolPairData, amount) {
        return _spotPriceAfterSwapTokenInForExactTokenOut$4(
            amount,
            poolPairData
        );
    }
    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(poolPairData, amount) {
        return _derivativeSpotPriceAfterSwapExactTokenInForTokenOut$4(
            amount,
            poolPairData
        );
    }
    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(poolPairData, amount) {
        return _derivativeSpotPriceAfterSwapTokenInForExactTokenOut$4(
            amount,
            poolPairData
        );
    }
}

// All functions are adapted from the solidity ones to be found on:
// https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/pools/stable/StableMath.sol
// TODO: implement all up and down rounding variations
/**********************************************************************************************
    // invariant                                                                                 //
    // D = invariant to compute                                                                  //
    // A = amplifier                n * D^2 + A * n^n * S * (n^n * P / D^(n−1))                  //
    // S = sum of balances         ____________________________________________                  //
    // P = product of balances    (n+1) * D + ( A * n^n − 1)* (n^n * P / D^(n−1))                //
    // n = number of tokens                                                                      //
    **********************************************************************************************/
function _invariant$1(
    amp, // amp
    balances // balances
) {
    let sum = ZERO;
    const totalCoins = balances.length;
    for (let i = 0; i < totalCoins; i++) {
        sum = sum.plus(balances[i]);
    }
    if (sum.isZero()) {
        return ZERO;
    }
    let prevInv = ZERO;
    let inv = sum;
    // amp is passed as an ethers bignumber while maths uses bignumber.js
    const ampAdjusted = bnum(bignumber.formatFixed(amp, 3));
    const ampTimesNpowN = ampAdjusted.times(totalCoins ** totalCoins); // A*n^n
    for (let i = 0; i < 255; i++) {
        let P_D = bnum(totalCoins).times(balances[0]);
        for (let j = 1; j < totalCoins; j++) {
            //P_D is rounded up
            P_D = P_D.times(balances[j]).times(totalCoins).div(inv);
        }
        prevInv = inv;
        //inv is rounded up
        inv = bnum(totalCoins)
            .times(inv)
            .times(inv)
            .plus(ampTimesNpowN.times(sum).times(P_D))
            .div(
                bnum(totalCoins + 1)
                    .times(inv)
                    .plus(ampTimesNpowN.minus(1).times(P_D))
            );
        // Equality with the precision of 1
        if (inv.gt(prevInv)) {
            if (inv.minus(prevInv).lt(bnum(10 ** -18))) {
                break;
            }
        } else if (prevInv.minus(inv).lt(bnum(10 ** -18))) {
            break;
        }
    }
    //Result is rounded up
    return inv;
}
// Adapted from StableMath.sol, _outGivenIn()
// * Added swap fee at very first line
/**********************************************************************************************
    // outGivenIn token x for y - polynomial equation to solve                                   //
    // ay = amount out to calculate                                                              //
    // by = balance token out                                                                    //
    // y = by - ay                                                                               //
    // D = invariant                               D                     D^(n+1)                 //
    // A = amplifier               y^2 + ( S - ----------  - 1) * y -  ------------- = 0         //
    // n = number of tokens                    (A * n^n)               A * n^2n * P              //
    // S = sum of final balances but y                                                           //
    // P = product of final balances but y                                                       //
    **********************************************************************************************/
function _exactTokenInForTokenOut$2(amount, poolPairData) {
    // The formula below returns some dust (due to rounding errors) but when
    // we input zero the output should be zero
    if (amount.isZero()) return amount;
    const { amp, allBalances, tokenIndexIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    let tokenAmountIn = amount;
    tokenAmountIn = tokenAmountIn
        .times(constants.WeiPerEther.sub(swapFee).toString())
        .div(constants.WeiPerEther.toString());
    //Invariant is rounded up
    const inv = _invariant$1(amp, balances);
    let p = inv;
    let sum = ZERO;
    const totalCoins = bnum(balances.length);
    let n_pow_n = ONE;
    let x = ZERO;
    for (let i = 0; i < balances.length; i++) {
        n_pow_n = n_pow_n.times(totalCoins);
        if (i == tokenIndexIn) {
            x = balances[i].plus(tokenAmountIn);
        } else if (i != tokenIndexOut) {
            x = balances[i];
        } else {
            continue;
        }
        sum = sum.plus(x);
        //Round up p
        p = p.times(inv).div(x);
    }
    //Calculate out balance
    const y = _solveAnalyticalBalance$1(sum, inv, amp, n_pow_n, p);
    //Result is rounded down
    // return balances[tokenIndexOut] > y ? balances[tokenIndexOut].minus(y) : 0;
    return balances[tokenIndexOut].minus(y);
}
// Adapted from StableMath.sol, _inGivenOut()
// * Added swap fee at very last line
/**********************************************************************************************
    // inGivenOut token x for y - polynomial equation to solve                                   //
    // ax = amount in to calculate                                                               //
    // bx = balance token in                                                                     //
    // x = bx + ax                                                                               //
    // D = invariant                               D                     D^(n+1)                 //
    // A = amplifier               x^2 + ( S - ----------  - 1) * x -  ------------- = 0         //
    // n = number of tokens                    (A * n^n)               A * n^2n * P              //
    // S = sum of final balances but x                                                           //
    // P = product of final balances but x                                                       //
    **********************************************************************************************/
function _tokenInForExactTokenOut$2(amount, poolPairData) {
    // The formula below returns some dust (due to rounding errors) but when
    // we input zero the output should be zero
    if (amount.isZero()) return amount;
    const { amp, allBalances, tokenIndexIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    const tokenAmountOut = amount;
    //Invariant is rounded up
    const inv = _invariant$1(amp, balances);
    let p = inv;
    let sum = ZERO;
    const totalCoins = bnum(balances.length);
    let n_pow_n = ONE;
    let x = ZERO;
    for (let i = 0; i < balances.length; i++) {
        n_pow_n = n_pow_n.times(totalCoins);
        if (i == tokenIndexOut) {
            x = balances[i].minus(tokenAmountOut);
        } else if (i != tokenIndexIn) {
            x = balances[i];
        } else {
            continue;
        }
        sum = sum.plus(x);
        //Round up p
        p = p.times(inv).div(x);
    }
    //Calculate in balance
    const y = _solveAnalyticalBalance$1(sum, inv, amp, n_pow_n, p);
    //Result is rounded up
    return y
        .minus(balances[tokenIndexIn])
        .multipliedBy(constants.WeiPerEther.toString())
        .div(constants.WeiPerEther.sub(swapFee).toString());
}
//This function calcuates the analytical solution to find the balance required
function _solveAnalyticalBalance$1(sum, inv, amp, n_pow_n, p) {
    // amp is passed as an ethers bignumber while maths uses bignumber.js
    const oldBN_amp = bnum(bignumber.formatFixed(amp, 3));
    //Round up p
    p = p.times(inv).div(oldBN_amp.times(n_pow_n).times(n_pow_n));
    //Round down b
    const b = sum.plus(inv.div(oldBN_amp.times(n_pow_n)));
    //Round up c
    // let c = inv >= b
    //     ? inv.minus(b).plus(Math.sqrtUp(inv.minus(b).times(inv.minus(b)).plus(p.times(4))))
    //     : Math.sqrtUp(b.minus(inv).times(b.minus(inv)).plus(p.times(4))).minus(b.minus(inv));
    let c;
    if (inv.gte(b)) {
        c = inv
            .minus(b)
            .plus(inv.minus(b).times(inv.minus(b)).plus(p.times(4)).sqrt());
    } else {
        c = b
            .minus(inv)
            .times(b.minus(inv))
            .plus(p.times(4))
            .sqrt()
            .minus(b.minus(inv));
    }
    //Round up y
    return c.div(2);
}
//////////////////////
////  These functions have been added exclusively for the SORv2
//////////////////////
function _poolDerivatives$1(
    amp,
    balances,
    tokenIndexIn,
    tokenIndexOut,
    is_first_derivative,
    wrt_out
) {
    const totalCoins = balances.length;
    const D = _invariant$1(amp, balances);
    let S = ZERO;
    for (let i = 0; i < totalCoins; i++) {
        if (i != tokenIndexIn && i != tokenIndexOut) {
            S = S.plus(balances[i]);
        }
    }
    const x = balances[tokenIndexIn];
    const y = balances[tokenIndexOut];
    // amp is passed as an ethers bignumber while maths uses bignumber.js
    const ampAdjusted = bnum(bignumber.formatFixed(amp, 3));
    const a = ampAdjusted.times(totalCoins ** totalCoins); // = ampTimesNpowN
    const b = S.minus(D).times(a).plus(D);
    const twoaxy = bnum(2).times(a).times(x).times(y);
    const partial_x = twoaxy.plus(a.times(y).times(y)).plus(b.times(y));
    const partial_y = twoaxy.plus(a.times(x).times(x)).plus(b.times(x));
    let ans;
    if (is_first_derivative) {
        ans = partial_x.div(partial_y);
    } else {
        const partial_xx = bnum(2).times(a).times(y);
        const partial_yy = bnum(2).times(a).times(x);
        const partial_xy = partial_xx.plus(partial_yy).plus(b);
        const numerator = bnum(2)
            .times(partial_x)
            .times(partial_y)
            .times(partial_xy)
            .minus(partial_xx.times(partial_y.pow(2)))
            .minus(partial_yy.times(partial_x.pow(2)));
        const denominator = partial_x.pow(2).times(partial_y);
        ans = numerator.div(denominator);
        if (wrt_out) {
            ans = ans.times(partial_y).div(partial_x);
        }
    }
    return ans;
}
/////////
/// SpotPriceAfterSwap
/////////
// PairType = 'token->token'
// SwapType = 'swapExactIn'
function _spotPriceAfterSwapExactTokenInForTokenOut$3(amount, poolPairData) {
    const { amp, allBalances, tokenIndexIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(
        amount
            .times(constants.WeiPerEther.sub(swapFee).toString())
            .div(constants.WeiPerEther.toString())
    );
    balances[tokenIndexOut] = balances[tokenIndexOut].minus(
        _exactTokenInForTokenOut$2(amount, poolPairData)
    );
    let ans = _poolDerivatives$1(
        amp,
        balances,
        tokenIndexIn,
        tokenIndexOut,
        true,
        false
    );
    ans = ONE.div(
        ans
            .times(constants.WeiPerEther.sub(swapFee).toString())
            .div(constants.WeiPerEther.toString())
    );
    return ans;
}
// PairType = 'token->token'
// SwapType = 'swapExactOut'
function _spotPriceAfterSwapTokenInForExactTokenOut$3(amount, poolPairData) {
    const { amp, allBalances, tokenIndexIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    const _in = _tokenInForExactTokenOut$2(amount, poolPairData)
        .times(constants.WeiPerEther.sub(swapFee).toString())
        .div(constants.WeiPerEther.toString());
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(_in);
    balances[tokenIndexOut] = balances[tokenIndexOut].minus(amount);
    let ans = _poolDerivatives$1(
        amp,
        balances,
        tokenIndexIn,
        tokenIndexOut,
        true,
        true
    );
    ans = ONE.div(
        ans
            .times(constants.WeiPerEther.sub(swapFee).toString())
            .div(constants.WeiPerEther.toString())
    );
    return ans;
}
/////////
///  Derivatives of spotPriceAfterSwap
/////////
// PairType = 'token->token'
// SwapType = 'swapExactIn'
function _derivativeSpotPriceAfterSwapExactTokenInForTokenOut$3(
    amount,
    poolPairData
) {
    const { amp, allBalances, tokenIndexIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(
        amount
            .times(constants.WeiPerEther.sub(swapFee).toString())
            .div(constants.WeiPerEther.toString())
    );
    balances[tokenIndexOut] = balances[tokenIndexOut].minus(
        _exactTokenInForTokenOut$2(amount, poolPairData)
    );
    return _poolDerivatives$1(
        amp,
        balances,
        tokenIndexIn,
        tokenIndexOut,
        false,
        false
    );
}
// PairType = 'token->token'
// SwapType = 'swapExactOut'
function _derivativeSpotPriceAfterSwapTokenInForExactTokenOut$3(
    amount,
    poolPairData
) {
    const { amp, allBalances, tokenIndexIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    const _in = _tokenInForExactTokenOut$2(amount, poolPairData)
        .times(constants.WeiPerEther.sub(swapFee).toString())
        .div(constants.WeiPerEther.toString());
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(_in);
    balances[tokenIndexOut] = balances[tokenIndexOut].minus(amount);
    const feeFactor = constants.WeiPerEther.div(swapFee).toString();
    return _poolDerivatives$1(
        amp,
        balances,
        tokenIndexIn,
        tokenIndexOut,
        false,
        true
    ).div(feeFactor);
}
// The following are used in front-end helper functions
function _feeFactor$1(balances, tokenIndex, swapFee) {
    let sumBalances = ZERO;
    for (let i = 0; i < balances.length; i++) {
        sumBalances = sumBalances.plus(balances[i]);
    }
    const currentWeight = balances[tokenIndex].div(sumBalances);
    const tokenBalancePercentageExcess = ONE.minus(currentWeight);
    return ONE.minus(
        tokenBalancePercentageExcess
            .times(swapFee.toString())
            .div(constants.WeiPerEther.toString())
    );
}
// PairType = 'token->BPT'
// SwapType = 'swapExactOut'
function _spotPriceAfterSwapTokenInForExactBPTOut$2(amount, poolPairData) {
    const { amp, allBalances, balanceOut, tokenIndexIn, decimalsOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    const _in = _tokenInForExactBPTOut$1(amount, poolPairData);
    const feeFactor = _feeFactor$1(balances, tokenIndexIn, swapFee);
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(_in.times(feeFactor));
    let ans = _poolDerivativesBPT$1(
        amp,
        balances,
        bnum(bignumber.formatFixed(balanceOut, decimalsOut)).plus(amount),
        tokenIndexIn,
        true,
        true,
        true
    );
    ans = ONE.div(ans.times(feeFactor));
    return ans;
}
/*
Flow of calculations:
amountBPTOut -> newInvariant -> (amountInProportional, amountInAfterFee) ->
amountInPercentageExcess -> amountIn
*/
function _tokenInForExactBPTOut$1(amount, poolPairData) {
    // The formula below returns some dust (due to rounding errors) but when
    // we input zero the output should be zero
    if (amount.isZero()) return amount;
    const { amp, allBalances, tokenIndexIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    const bptAmountOut = amount;
    /**********************************************************************************************
    // TODO description                            //
    **********************************************************************************************/
    // Get current invariant
    const currentInvariant = _invariant$1(amp, balances);
    // Calculate new invariant
    const newInvariant = allBalances[tokenIndexOut]
        .plus(bptAmountOut)
        .div(allBalances[tokenIndexOut])
        .times(currentInvariant);
    // First calculate the sum of all token balances which will be used to calculate
    // the current weight of token
    let sumBalances = ZERO;
    for (let i = 0; i < balances.length; i++) {
        sumBalances = sumBalances.plus(balances[i]);
    }
    // get amountInAfterFee
    const newBalanceTokenIndex =
        _getTokenBalanceGivenInvariantAndAllOtherBalances$2(
            amp,
            balances,
            newInvariant,
            tokenIndexIn
        );
    const amountInAfterFee = newBalanceTokenIndex.minus(balances[tokenIndexIn]);
    // Get tokenBalancePercentageExcess
    const currentWeight = balances[tokenIndexIn].div(sumBalances);
    const tokenBalancePercentageExcess = ONE.minus(currentWeight);
    // return amountIn
    return amountInAfterFee.div(
        ONE.minus(
            tokenBalancePercentageExcess
                .times(swapFee.toString())
                .div(constants.WeiPerEther.toString())
        )
    );
}
//This function calculates the balance of a given token (tokenIndex)
// given all the other balances and the invariant
function _getTokenBalanceGivenInvariantAndAllOtherBalances$2(
    amp,
    balances,
    inv,
    tokenIndex
) {
    let p = inv;
    let sum = ZERO;
    const totalCoins = balances.length;
    let nPowN = ONE;
    let x = ZERO;
    for (let i = 0; i < totalCoins; i++) {
        nPowN = nPowN.times(totalCoins);
        if (i != tokenIndex) {
            x = balances[i];
        } else {
            continue;
        }
        sum = sum.plus(x);
        //Round up p
        p = p.times(inv).div(x);
    }
    // Calculate token balance
    return _solveAnalyticalBalance$1(sum, inv, amp, nPowN, p);
}
function _poolDerivativesBPT$1(
    amp,
    balances,
    bptSupply,
    tokenIndexIn,
    is_first_derivative,
    is_BPT_out,
    wrt_out
) {
    const totalCoins = balances.length;
    const D = _invariant$1(amp, balances);
    let S = ZERO;
    let D_P = D.div(totalCoins);
    for (let i = 0; i < totalCoins; i++) {
        if (i != tokenIndexIn) {
            S = S.plus(balances[i]);
            D_P = D_P.times(D).div(balances[i].times(totalCoins));
        }
    }
    const x = balances[tokenIndexIn];
    // amp is passed as an ethers bignumber while maths uses bignumber.js
    const ampAdjusted = bnum(bignumber.formatFixed(amp, 3));
    const alpha = ampAdjusted.times(totalCoins ** totalCoins); // = ampTimesNpowN
    const beta = alpha.times(S);
    const gamma = ONE.minus(alpha);
    const partial_x = bnum(2)
        .times(alpha)
        .times(x)
        .plus(beta)
        .plus(gamma.times(D));
    const minus_partial_D = D_P.times(totalCoins + 1).minus(gamma.times(x));
    const partial_D = ZERO.minus(minus_partial_D);
    let ans;
    if (is_first_derivative) {
        ans = partial_x.div(minus_partial_D).times(bptSupply).div(D);
    } else {
        const partial_xx = bnum(2).times(alpha);
        const partial_xD = gamma;
        const n_times_nplusone = totalCoins * (totalCoins + 1);
        const partial_DD = ZERO.minus(D_P.times(n_times_nplusone).div(D));
        if (is_BPT_out) {
            const term1 = partial_xx.times(partial_D).div(partial_x.pow(2));
            const term2 = bnum(2).times(partial_xD).div(partial_x);
            const term3 = partial_DD.div(partial_D);
            ans = term1.minus(term2).plus(term3).times(D).div(bptSupply);
            if (wrt_out) {
                const D_prime = ZERO.minus(partial_x.div(partial_D));
                ans = ans.div(D_prime).times(D).div(bptSupply);
            }
        } else {
            ans = bnum(2)
                .times(partial_xD)
                .div(partial_D)
                .minus(partial_DD.times(partial_x).div(partial_D.pow(2)))
                .minus(partial_xx.div(partial_x));
            if (wrt_out) {
                ans = ans
                    .times(partial_x)
                    .div(minus_partial_D)
                    .times(bptSupply)
                    .div(D);
            }
        }
    }
    return ans;
}

/*
Swap outcome and "spot price after swap" formulas for weighted, stable and linear pools.
Amounts are represented using bigint type. Swap outcomes formulas should
match exactly those from smart contracts.

Test cases are found in poolsMathWeighted.spec.ts, poolsMathStable.spec.ts poolsMathLinear.spec.ts.

It is necessary to review whether to use MathSol operations or native +,-,\*,/ case by case. MathSol operations are able to reproduce overflows while native operations produce a much more readable code. For instance, for "spot price after swap" native operations
are preferred since in this case there are not smart contract analogs, amount limits are assumed to have been checked elsewhere, and some formulas get complicated, specially for stable pools.
*/
const AMP_PRECISION = BigInt(1e3);
function _calculateInvariant(amp, balances, roundUp) {
    /**********************************************************************************************
      // invariant                                                                                 //
      // D = invariant                                                  D^(n+1)                    //
      // A = amplification coefficient      A  n^n S + D = A D n^n + -----------                   //
      // S = sum of balances                                             n^n P                     //
      // P = product of balances                                                                   //
      // n = number of tokens                                                                      //
      *********x************************************************************************************/
    // We support rounding up or down.
    let sum = BZERO;
    const numTokens = balances.length;
    for (let i = 0; i < numTokens; i++) {
        sum = sum + balances[i];
    }
    if (sum == BZERO) {
        return BZERO;
    }
    let prevInvariant = BZERO;
    let invariant = sum;
    const ampTimesTotal = amp * BigInt(numTokens);
    for (let i = 0; i < 255; i++) {
        let P_D = balances[0] * BigInt(numTokens);
        for (let j = 1; j < numTokens; j++) {
            P_D = MathSol.div(
                MathSol.mul(MathSol.mul(P_D, balances[j]), BigInt(numTokens)),
                invariant,
                roundUp
            );
        }
        prevInvariant = invariant;
        invariant = MathSol.div(
            MathSol.mul(MathSol.mul(BigInt(numTokens), invariant), invariant) +
                MathSol.div(
                    MathSol.mul(MathSol.mul(ampTimesTotal, sum), P_D),
                    AMP_PRECISION,
                    roundUp
                ),
            MathSol.mul(BigInt(numTokens + 1), invariant) +
                // No need to use checked arithmetic for the amp precision, the amp is guaranteed to be at least 1
                MathSol.div(
                    MathSol.mul(ampTimesTotal - AMP_PRECISION, P_D),
                    AMP_PRECISION,
                    !roundUp
                ),
            roundUp
        );
        if (invariant > prevInvariant) {
            if (invariant - prevInvariant <= 1) {
                return invariant;
            }
        } else if (prevInvariant - invariant <= 1) {
            return invariant;
        }
    }
    throw new Error('Errors.STABLE_INVARIANT_DIDNT_CONVERGE');
}
// PairType = 'token->token'
// SwapType = 'swapExactIn'
function _calcOutGivenIn(
    amp,
    balances,
    tokenIndexIn,
    tokenIndexOut,
    amountIn,
    fee,
    invariant
) {
    balances = [...balances];
    amountIn = subtractFee(amountIn, fee);
    // Given that we need to have a greater final balance out, the invariant needs to be rounded up
    if (!invariant) invariant = _calculateInvariant(amp, balances, true);
    const initBalance = balances[tokenIndexIn];
    balances[tokenIndexIn] = initBalance + amountIn;
    const finalBalanceOut = _getTokenBalanceGivenInvariantAndAllOtherBalances$1(
        amp,
        balances,
        invariant,
        tokenIndexOut
    );
    return balances[tokenIndexOut] - finalBalanceOut - BigInt(1);
}
function _calcInGivenOut(
    amp,
    balances,
    tokenIndexIn,
    tokenIndexOut,
    amountOut,
    fee,
    invariant
) {
    balances = [...balances];
    if (!invariant) invariant = _calculateInvariant(amp, balances, true);
    balances[tokenIndexOut] = MathSol.sub(balances[tokenIndexOut], amountOut);
    const finalBalanceIn = _getTokenBalanceGivenInvariantAndAllOtherBalances$1(
        amp,
        balances,
        invariant,
        tokenIndexIn
    );
    let amountIn = MathSol.add(
        MathSol.sub(finalBalanceIn, balances[tokenIndexIn]),
        BigInt(1)
    );
    amountIn = addFee(amountIn, fee);
    return amountIn;
}
function _calcBptOutGivenExactTokensIn(
    amp,
    balances,
    amountsIn,
    bptTotalSupply,
    swapFeePercentage,
    invariant
) {
    if (!invariant) invariant = _calculateInvariant(amp, balances, true);
    // BPT out, so we round down overall.
    // First loop calculates the sum of all token balances, which will be used to calculate
    // the current weights of each token, relative to this sum
    let sumBalances = BigInt(0);
    for (let i = 0; i < balances.length; i++) {
        sumBalances = sumBalances + balances[i];
    }
    // Calculate the weighted balance ratio without considering fees
    const balanceRatiosWithFee = new Array(amountsIn.length);
    // The weighted sum of token balance ratios with fee
    let invariantRatioWithFees = BigInt(0);
    for (let i = 0; i < balances.length; i++) {
        const currentWeight = MathSol.divDownFixed(balances[i], sumBalances);
        balanceRatiosWithFee[i] = MathSol.divDownFixed(
            balances[i] + amountsIn[i],
            balances[i]
        );
        invariantRatioWithFees =
            invariantRatioWithFees +
            MathSol.mulDownFixed(balanceRatiosWithFee[i], currentWeight);
    }
    // Second loop calculates new amounts in, taking into account the fee on the percentage excess
    const newBalances = new Array(balances.length);
    for (let i = 0; i < balances.length; i++) {
        let amountInWithoutFee;
        // Check if the balance ratio is greater than the ideal ratio to charge fees or not
        if (balanceRatiosWithFee[i] > invariantRatioWithFees) {
            const nonTaxableAmount = MathSol.mulDownFixed(
                balances[i],
                invariantRatioWithFees - MathSol.ONE
            );
            const taxableAmount = amountsIn[i] - nonTaxableAmount;
            // No need to use checked arithmetic for the swap fee, it is guaranteed to be lower than 50%
            amountInWithoutFee =
                nonTaxableAmount +
                MathSol.mulDownFixed(
                    taxableAmount,
                    MathSol.ONE - swapFeePercentage
                );
        } else {
            amountInWithoutFee = amountsIn[i];
        }
        newBalances[i] = balances[i] + amountInWithoutFee;
    }
    // Get current and new invariants, taking swap fees into account
    const currentInvariant = _calculateInvariant(amp, balances, true);
    const newInvariant = _calculateInvariant(amp, newBalances, false);
    const invariantRatio = MathSol.divDownFixed(newInvariant, currentInvariant);
    // If the invariant didn't increase for any reason, we simply don't mint BPT
    if (invariantRatio > MathSol.ONE) {
        return MathSol.mulDownFixed(
            bptTotalSupply,
            invariantRatio - MathSol.ONE
        );
    } else {
        return BigInt(0);
    }
}
function _calcTokenInGivenExactBptOut(
    amp,
    balances,
    tokenIndexIn,
    bptAmountOut,
    bptTotalSupply,
    fee,
    invariant
) {
    if (!invariant) invariant = _calculateInvariant(amp, balances, true);
    // Token in, so we round up overall.
    const currentInvariant = _calculateInvariant(amp, balances, true);
    const newInvariant = MathSol.mulUpFixed(
        MathSol.divUpFixed(
            MathSol.add(bptTotalSupply, bptAmountOut),
            bptTotalSupply
        ),
        currentInvariant
    );
    // Calculate amount in without fee.
    const newBalanceTokenIndex =
        _getTokenBalanceGivenInvariantAndAllOtherBalances$1(
            amp,
            balances,
            newInvariant,
            tokenIndexIn
        );
    const amountInWithoutFee = MathSol.sub(
        newBalanceTokenIndex,
        balances[tokenIndexIn]
    );
    // First calculate the sum of all token balances, which will be used to calculate
    // the current weight of each token
    let sumBalances = BigInt(0);
    for (let i = 0; i < balances.length; i++) {
        sumBalances = MathSol.add(sumBalances, balances[i]);
    }
    // We can now compute how much extra balance is being deposited
    // and used in virtual swaps, and charge swap fees accordingly.
    const currentWeight = MathSol.divDownFixed(
        balances[tokenIndexIn],
        sumBalances
    );
    const taxablePercentage = MathSol.complementFixed(currentWeight);
    const taxableAmount = MathSol.mulUpFixed(
        amountInWithoutFee,
        taxablePercentage
    );
    const nonTaxableAmount = MathSol.sub(amountInWithoutFee, taxableAmount);
    return MathSol.add(
        nonTaxableAmount,
        MathSol.divUpFixed(taxableAmount, MathSol.sub(MathSol.ONE, fee))
    );
}
/*
Flow of calculations:
amountsTokenOut -> amountsOutProportional ->
amountOutPercentageExcess -> amountOutBeforeFee -> newInvariant -> amountBPTIn
*/
function _calcBptInGivenExactTokensOut(
    amp,
    balances,
    amountsOut,
    bptTotalSupply,
    swapFeePercentage,
    invariant
) {
    if (!invariant) invariant = _calculateInvariant(amp, balances, true);
    // BPT in, so we round up overall.
    // First loop calculates the sum of all token balances, which will be used to calculate
    // the current weights of each token relative to this sum
    let sumBalances = BigInt(0);
    for (let i = 0; i < balances.length; i++) {
        sumBalances = sumBalances + balances[i];
    }
    // Calculate the weighted balance ratio without considering fees
    const balanceRatiosWithoutFee = new Array(amountsOut.length);
    let invariantRatioWithoutFees = BigInt(0);
    for (let i = 0; i < balances.length; i++) {
        const currentWeight = MathSol.divUpFixed(balances[i], sumBalances);
        balanceRatiosWithoutFee[i] = MathSol.divUpFixed(
            balances[i] - amountsOut[i],
            balances[i]
        );
        invariantRatioWithoutFees =
            invariantRatioWithoutFees +
            MathSol.mulUpFixed(balanceRatiosWithoutFee[i], currentWeight);
    }
    // Second loop calculates new amounts in, taking into account the fee on the percentage excess
    const newBalances = new Array(balances.length);
    for (let i = 0; i < balances.length; i++) {
        // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it to
        // 'token out'. This results in slightly larger price impact.
        let amountOutWithFee;
        if (invariantRatioWithoutFees > balanceRatiosWithoutFee[i]) {
            const nonTaxableAmount = MathSol.mulDownFixed(
                balances[i],
                MathSol.complementFixed(invariantRatioWithoutFees)
            );
            const taxableAmount = amountsOut[i] - nonTaxableAmount;
            // No need to use checked arithmetic for the swap fee, it is guaranteed to be lower than 50%
            amountOutWithFee =
                nonTaxableAmount +
                MathSol.divUpFixed(
                    taxableAmount,
                    MathSol.ONE - swapFeePercentage
                );
        } else {
            amountOutWithFee = amountsOut[i];
        }
        newBalances[i] = balances[i] - amountOutWithFee;
    }
    // Get current and new invariants, taking into account swap fees
    const currentInvariant = _calculateInvariant(amp, balances, true);
    const newInvariant = _calculateInvariant(amp, newBalances, false);
    const invariantRatio = MathSol.divDownFixed(newInvariant, currentInvariant);
    // return amountBPTIn
    return MathSol.mulUpFixed(
        bptTotalSupply,
        MathSol.complementFixed(invariantRatio)
    );
}
function _calcTokenOutGivenExactBptIn(
    amp,
    balances,
    tokenIndex,
    bptAmountIn,
    bptTotalSupply,
    swapFeePercentage,
    invariant
) {
    if (!invariant) invariant = _calculateInvariant(amp, balances, true);
    // Token out, so we round down overall.
    // Get the current and new invariants. Since we need a bigger new invariant, we round the current one up.
    const currentInvariant = _calculateInvariant(amp, balances, true);
    const newInvariant = MathSol.mulUpFixed(
        MathSol.divUpFixed(bptTotalSupply - bptAmountIn, bptTotalSupply),
        currentInvariant
    );
    // Calculate amount out without fee
    const newBalanceTokenIndex =
        _getTokenBalanceGivenInvariantAndAllOtherBalances$1(
            amp,
            balances,
            newInvariant,
            tokenIndex
        );
    const amountOutWithoutFee = balances[tokenIndex] - newBalanceTokenIndex;
    // First calculate the sum of all token balances, which will be used to calculate
    // the current weight of each token
    let sumBalances = BigInt(0);
    for (let i = 0; i < balances.length; i++) {
        sumBalances = sumBalances + balances[i];
    }
    // We can now compute how much excess balance is being withdrawn as a result of the virtual swaps, which result
    // in swap fees.
    const currentWeight = MathSol.divDownFixed(
        balances[tokenIndex],
        sumBalances
    );
    const taxablePercentage = MathSol.complementFixed(currentWeight);
    // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it
    // to 'token out'. This results in slightly larger price impact. Fees are rounded up.
    const taxableAmount = MathSol.mulUpFixed(
        amountOutWithoutFee,
        taxablePercentage
    );
    const nonTaxableAmount = amountOutWithoutFee - taxableAmount;
    // No need to use checked arithmetic for the swap fee, it is guaranteed to be lower than 50%
    return (
        nonTaxableAmount +
        MathSol.mulDownFixed(taxableAmount, MathSol.ONE - swapFeePercentage)
    );
}
function _getTokenBalanceGivenInvariantAndAllOtherBalances$1(
    amp,
    balances,
    invariant,
    tokenIndex
) {
    // Rounds result up overall
    const ampTimesTotal = amp * BigInt(balances.length);
    let sum = balances[0];
    let P_D = balances[0] * BigInt(balances.length);
    for (let j = 1; j < balances.length; j++) {
        P_D = MathSol.divDown(
            MathSol.mul(MathSol.mul(P_D, balances[j]), BigInt(balances.length)),
            invariant
        );
        sum = sum + balances[j];
    }
    // No need to use safe math, based on the loop above `sum` is greater than or equal to `balances[tokenIndex]`
    sum = sum - balances[tokenIndex];
    const inv2 = MathSol.mul(invariant, invariant);
    // We remove the balance fromm c by multiplying it
    const c = MathSol.mul(
        MathSol.mul(
            MathSol.divUp(inv2, MathSol.mul(ampTimesTotal, P_D)),
            AMP_PRECISION
        ),
        balances[tokenIndex]
    );
    const b =
        sum +
        MathSol.mul(MathSol.divDown(invariant, ampTimesTotal), AMP_PRECISION);
    // We iterate to find the balance
    let prevTokenBalance = BZERO;
    // We multiply the first iteration outside the loop with the invariant to set the value of the
    // initial approximation.
    let tokenBalance = MathSol.divUp(inv2 + c, invariant + b);
    for (let i = 0; i < 255; i++) {
        prevTokenBalance = tokenBalance;
        tokenBalance = MathSol.divUp(
            MathSol.mul(tokenBalance, tokenBalance) + c,
            MathSol.mul(tokenBalance, BigInt(2)) + b - invariant
        );
        if (tokenBalance > prevTokenBalance) {
            if (tokenBalance - prevTokenBalance <= 1) {
                return tokenBalance;
            }
        } else if (prevTokenBalance - tokenBalance <= 1) {
            return tokenBalance;
        }
    }
    throw new Error('Errors.STABLE_GET_BALANCE_DIDNT_CONVERGE');
}
function subtractFee(amount, fee) {
    const feeAmount = MathSol.mulUpFixed(amount, fee);
    return amount - feeAmount;
}
function addFee(amount, fee) {
    return MathSol.divUpFixed(amount, MathSol.complementFixed(fee));
}

class StablePool {
    constructor(id, address, amp, swapFee, totalShares, tokens, tokensList) {
        this.poolType = exports.PoolTypes.Stable;
        this.limitAmountCache = new Map();
        this.MAX_IN_RATIO = bignumber.parseFixed('0.3', 18);
        this.MAX_OUT_RATIO = bignumber.parseFixed('0.3', 18);
        this.id = id;
        this.address = address;
        this.amp = bignumber.parseFixed(amp, StablePool.AMP_DECIMALS);
        this.swapFee = bignumber.parseFixed(swapFee, 18);
        this.totalShares = bignumber.parseFixed(totalShares, 18);
        this.tokens = tokens;
        this.tokensList = tokensList;
    }
    static fromPool(pool) {
        if (!pool.amp) throw new Error('StablePool missing amp factor');
        return new StablePool(
            pool.id,
            pool.address,
            pool.amp,
            pool.swapFee,
            pool.totalShares,
            pool.tokens,
            pool.tokensList
        );
    }
    setTypeForSwap(type) {
        this.swapPairType = type;
    }
    parsePoolPairData(tokenIn, tokenOut) {
        const tokenIndexIn = this.tokens.findIndex(
            (t) => address.getAddress(t.address) === address.getAddress(tokenIn)
        );
        if (tokenIndexIn < 0) throw 'Pool does not contain tokenIn';
        const tI = this.tokens[tokenIndexIn];
        const balanceIn = tI.balance;
        const decimalsIn = tI.decimals;
        const tokenIndexOut = this.tokens.findIndex(
            (t) =>
                address.getAddress(t.address) === address.getAddress(tokenOut)
        );
        if (tokenIndexOut < 0) throw 'Pool does not contain tokenOut';
        const tO = this.tokens[tokenIndexOut];
        const balanceOut = tO.balance;
        const decimalsOut = tO.decimals;
        // Get all token balances
        const allBalances = this.tokens.map(({ balance }) => bnum(balance));
        const allBalancesScaled = this.tokens.map(({ balance }) =>
            bignumber.parseFixed(balance, 18)
        );
        const poolPairData = {
            id: this.id,
            address: this.address,
            poolType: this.poolType,
            tokenIn: tokenIn,
            tokenOut: tokenOut,
            balanceIn: bignumber.parseFixed(balanceIn, decimalsIn),
            balanceOut: bignumber.parseFixed(balanceOut, decimalsOut),
            swapFee: this.swapFee,
            allBalances,
            allBalancesScaled,
            amp: this.amp,
            tokenIndexIn: tokenIndexIn,
            tokenIndexOut: tokenIndexOut,
            decimalsIn: Number(decimalsIn),
            decimalsOut: Number(decimalsOut),
        };
        return poolPairData;
    }
    getNormalizedLiquidity(poolPairData) {
        // This is an approximation as the actual normalized liquidity is a lot more complicated to calculate
        return bnum(
            bignumber.formatFixed(
                poolPairData.balanceOut.mul(poolPairData.amp),
                poolPairData.decimalsOut + StablePool.AMP_DECIMALS
            )
        );
    }
    getLimitAmountSwap(poolPairData, swapType) {
        const cacheKey = getPoolPairDataCacheKey(poolPairData, swapType);
        const cached = this.limitAmountCache.get(cacheKey);
        if (cached) {
            return cached;
        }
        let value;
        // We multiply ratios by 10**-18 because we are in normalized space
        // so 0.5 should be 0.5 and not 500000000000000000
        // TODO: update bmath to use everything normalized
        if (swapType === exports.SwapTypes.SwapExactIn) {
            value = bnum(
                bignumber.formatFixed(
                    poolPairData.balanceIn
                        .mul(this.MAX_IN_RATIO)
                        .div(constants.WeiPerEther),
                    poolPairData.decimalsIn
                )
            );
        } else {
            value = bnum(
                bignumber.formatFixed(
                    poolPairData.balanceOut
                        .mul(this.MAX_OUT_RATIO)
                        .div(constants.WeiPerEther),
                    poolPairData.decimalsOut
                )
            );
        }
        this.limitAmountCache.set(cacheKey, value);
        return value;
    }
    // Updates the balance of a given token for the pool
    updateTokenBalanceForPool(token, newBalance) {
        // token is BPT
        if (this.address == token) {
            this.totalShares = newBalance;
        } else {
            // token is underlying in the pool
            const T = this.tokens.find((t) => isSameAddress(t.address, token));
            if (!T) throw Error('Pool does not contain this token');
            T.balance = bignumber.formatFixed(newBalance, T.decimals);
        }
    }
    _exactTokenInForTokenOut(poolPairData, amount) {
        try {
            if (amount.isZero()) return ZERO;
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtScaled = bignumber.parseFixed(
                amount.dp(18).toString(),
                18
            );
            const amt = _calcOutGivenIn(
                this.amp.toBigInt(),
                poolPairData.allBalancesScaled.map((balance) =>
                    balance.toBigInt()
                ),
                poolPairData.tokenIndexIn,
                poolPairData.tokenIndexOut,
                amtScaled.toBigInt(),
                poolPairData.swapFee.toBigInt()
            );
            // return normalised amount
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_DOWN mode (1)
            return scale(bnum(amt.toString()), -18).dp(
                poolPairData.decimalsOut,
                1
            );
        } catch (err) {
            console.error(`_evmoutGivenIn: ${err.message}`);
            return ZERO;
        }
    }
    _tokenInForExactTokenOut(poolPairData, amount) {
        try {
            if (amount.isZero()) return ZERO;
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtScaled = bignumber.parseFixed(
                amount.dp(18).toString(),
                18
            );
            const amt = _calcInGivenOut(
                this.amp.toBigInt(),
                poolPairData.allBalancesScaled.map((balance) =>
                    balance.toBigInt()
                ),
                poolPairData.tokenIndexIn,
                poolPairData.tokenIndexOut,
                amtScaled.toBigInt(),
                poolPairData.swapFee.toBigInt()
            );
            // return normalised amount
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_UP mode (0)
            return scale(bnum(amt.toString()), -18).dp(
                poolPairData.decimalsIn,
                0
            );
        } catch (err) {
            console.error(`_evminGivenOut: ${err.message}`);
            return ZERO;
        }
    }
    _spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, amount) {
        return _spotPriceAfterSwapExactTokenInForTokenOut$3(
            amount,
            poolPairData
        );
    }
    _spotPriceAfterSwapTokenInForExactTokenOut(poolPairData, amount) {
        return _spotPriceAfterSwapTokenInForExactTokenOut$3(
            amount,
            poolPairData
        );
    }
    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(poolPairData, amount) {
        return _derivativeSpotPriceAfterSwapExactTokenInForTokenOut$3(
            amount,
            poolPairData
        );
    }
    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(poolPairData, amount) {
        return _derivativeSpotPriceAfterSwapTokenInForExactTokenOut$3(
            amount,
            poolPairData
        );
    }
}
StablePool.AMP_DECIMALS = 3;

class MetaStablePool {
    constructor(id, address, amp, swapFee, totalShares, tokens, tokensList) {
        this.poolType = exports.PoolTypes.MetaStable;
        this.MAX_IN_RATIO = bignumber.parseFixed('0.3', 18);
        this.MAX_OUT_RATIO = bignumber.parseFixed('0.3', 18);
        this.id = id;
        this.address = address;
        this.amp = bignumber.parseFixed(amp, MetaStablePool.AMP_DECIMALS);
        this.swapFee = bignumber.parseFixed(swapFee, 18);
        this.totalShares = bignumber.parseFixed(totalShares, 18);
        this.tokens = tokens;
        this.tokensList = tokensList;
    }
    static fromPool(pool) {
        if (!pool.amp) throw new Error('MetaStablePool missing amp factor');
        return new MetaStablePool(
            pool.id,
            pool.address,
            pool.amp,
            pool.swapFee,
            pool.totalShares,
            pool.tokens,
            pool.tokensList
        );
    }
    setTypeForSwap(type) {
        this.swapPairType = type;
    }
    parsePoolPairData(tokenIn, tokenOut) {
        const tokenIndexIn = this.tokens.findIndex(
            (t) => address.getAddress(t.address) === address.getAddress(tokenIn)
        );
        if (tokenIndexIn < 0) throw 'Pool does not contain tokenIn';
        const tI = this.tokens[tokenIndexIn];
        const decimalsIn = tI.decimals;
        const tokenInPriceRate = bignumber.parseFixed(tI.priceRate, 18);
        const balanceIn = bignumber.formatFixed(
            bignumber
                .parseFixed(tI.balance, decimalsIn)
                .mul(tokenInPriceRate)
                .div(constants.WeiPerEther),
            decimalsIn
        );
        const tokenIndexOut = this.tokens.findIndex(
            (t) =>
                address.getAddress(t.address) === address.getAddress(tokenOut)
        );
        if (tokenIndexOut < 0) throw 'Pool does not contain tokenOut';
        const tO = this.tokens[tokenIndexOut];
        const decimalsOut = tO.decimals;
        const tokenOutPriceRate = bignumber.parseFixed(tO.priceRate, 18);
        const balanceOut = bignumber.formatFixed(
            bignumber
                .parseFixed(tO.balance, decimalsOut)
                .mul(tokenOutPriceRate)
                .div(constants.WeiPerEther),
            decimalsOut
        );
        // Get all token balances
        const allBalances = this.tokens.map(({ balance, priceRate }) =>
            bnum(balance).times(priceRate)
        );
        const allBalancesScaled = this.tokens.map(({ balance, priceRate }) =>
            bignumber
                .parseFixed(balance, 18)
                .mul(bignumber.parseFixed(priceRate, 18))
                .div(constants.WeiPerEther)
        );
        const poolPairData = {
            id: this.id,
            address: this.address,
            poolType: this.poolType,
            tokenIn: tokenIn,
            tokenOut: tokenOut,
            balanceIn: bignumber.parseFixed(balanceIn, decimalsIn),
            balanceOut: bignumber.parseFixed(balanceOut, decimalsOut),
            swapFee: this.swapFee,
            allBalances,
            allBalancesScaled,
            amp: this.amp,
            tokenIndexIn: tokenIndexIn,
            tokenIndexOut: tokenIndexOut,
            decimalsIn: Number(decimalsIn),
            decimalsOut: Number(decimalsOut),
            tokenInPriceRate,
            tokenOutPriceRate,
        };
        return poolPairData;
    }
    getNormalizedLiquidity(poolPairData) {
        // This is an approximation as the actual normalized liquidity is a lot more complicated to calculate
        return bnum(
            bignumber.formatFixed(
                poolPairData.balanceOut.mul(poolPairData.amp),
                poolPairData.decimalsOut + MetaStablePool.AMP_DECIMALS
            )
        );
    }
    getLimitAmountSwap(poolPairData, swapType) {
        // We multiply ratios by 10**-18 because we are in normalized space
        // so 0.5 should be 0.5 and not 500000000000000000
        // TODO: update bmath to use everything normalized
        // PoolPairData is using balances that have already been exchanged so need to convert back
        if (swapType === exports.SwapTypes.SwapExactIn) {
            return bnum(
                bignumber.formatFixed(
                    poolPairData.balanceIn
                        .mul(this.MAX_IN_RATIO)
                        .div(poolPairData.tokenInPriceRate),
                    poolPairData.decimalsIn
                )
            );
        } else {
            return bnum(
                bignumber.formatFixed(
                    poolPairData.balanceOut
                        .mul(this.MAX_OUT_RATIO)
                        .div(poolPairData.tokenOutPriceRate),
                    poolPairData.decimalsOut
                )
            );
        }
    }
    // Updates the balance of a given token for the pool
    updateTokenBalanceForPool(token, newBalance) {
        // token is BPT
        if (this.address == token) {
            this.totalShares = newBalance;
        } else {
            // token is underlying in the pool
            const T = this.tokens.find((t) => isSameAddress(t.address, token));
            if (!T) throw Error('Pool does not contain this token');
            T.balance = bignumber.formatFixed(newBalance, T.decimals);
        }
    }
    _exactTokenInForTokenOut(poolPairData, amount) {
        try {
            if (amount.isZero()) return ZERO;
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amountConvertedEvm = bignumber
                .parseFixed(amount.dp(18).toString(), 18)
                .mul(poolPairData.tokenInPriceRate)
                .div(constants.WeiPerEther);
            const returnEvm = _calcOutGivenIn(
                this.amp.toBigInt(),
                poolPairData.allBalancesScaled.map((balance) =>
                    balance.toBigInt()
                ),
                poolPairData.tokenIndexIn,
                poolPairData.tokenIndexOut,
                amountConvertedEvm.toBigInt(),
                poolPairData.swapFee.toBigInt()
            );
            const returnEvmWithRate = bignumber.BigNumber.from(returnEvm)
                .mul(constants.WeiPerEther)
                .div(poolPairData.tokenOutPriceRate);
            return bnum(bignumber.formatFixed(returnEvmWithRate, 18));
        } catch (err) {
            console.error(`_evmoutGivenIn: ${err.message}`);
            return ZERO;
        }
    }
    _tokenInForExactTokenOut(poolPairData, amount) {
        try {
            if (amount.isZero()) return ZERO;
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amountConvertedEvm = bignumber
                .parseFixed(amount.dp(18).toString(), 18)
                .mul(poolPairData.tokenOutPriceRate)
                .div(constants.WeiPerEther);
            const returnEvm = _calcInGivenOut(
                this.amp.toBigInt(),
                poolPairData.allBalancesScaled.map((balance) =>
                    balance.toBigInt()
                ),
                poolPairData.tokenIndexIn,
                poolPairData.tokenIndexOut,
                amountConvertedEvm.toBigInt(),
                poolPairData.swapFee.toBigInt()
            );
            const returnEvmWithRate = bignumber.BigNumber.from(returnEvm)
                .mul(constants.WeiPerEther)
                .div(poolPairData.tokenInPriceRate);
            return bnum(bignumber.formatFixed(returnEvmWithRate, 18));
        } catch (err) {
            console.error(`_evminGivenOut: ${err.message}`);
            return ZERO;
        }
    }
    _spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, amount) {
        const priceRateIn = bignumber.formatFixed(
            poolPairData.tokenInPriceRate,
            18
        );
        const priceRateOut = bignumber.formatFixed(
            poolPairData.tokenOutPriceRate,
            18
        );
        const amountConverted = amount.times(
            bignumber.formatFixed(poolPairData.tokenInPriceRate, 18)
        );
        const result = _spotPriceAfterSwapExactTokenInForTokenOut$3(
            amountConverted,
            poolPairData
        );
        return result.div(priceRateIn).times(priceRateOut);
    }
    _spotPriceAfterSwapTokenInForExactTokenOut(poolPairData, amount) {
        const priceRateIn = bignumber.formatFixed(
            poolPairData.tokenInPriceRate,
            18
        );
        const priceRateOut = bignumber.formatFixed(
            poolPairData.tokenOutPriceRate,
            18
        );
        const amountConverted = amount.times(
            bignumber.formatFixed(poolPairData.tokenOutPriceRate, 18)
        );
        const result = _spotPriceAfterSwapTokenInForExactTokenOut$3(
            amountConverted,
            poolPairData
        );
        return result.div(priceRateIn).times(priceRateOut);
    }
    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(poolPairData, amount) {
        const priceRateOut = bignumber.formatFixed(
            poolPairData.tokenOutPriceRate,
            18
        );
        return _derivativeSpotPriceAfterSwapExactTokenInForTokenOut$3(
            amount,
            poolPairData
        ).times(priceRateOut);
    }
    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(poolPairData, amount) {
        const priceRateIn = bignumber.formatFixed(
            poolPairData.tokenInPriceRate,
            18
        );
        const priceRateOut = bignumber.formatFixed(
            poolPairData.tokenOutPriceRate,
            18
        );
        return _derivativeSpotPriceAfterSwapTokenInForExactTokenOut$3(
            amount,
            poolPairData
        )
            .div(priceRateIn)
            .times(priceRateOut)
            .times(priceRateOut);
    }
}
MetaStablePool.AMP_DECIMALS = 3;

function _calcBptOutPerMainIn(
    mainIn,
    mainBalance,
    wrappedBalance,
    bptSupply,
    params
) {
    // Amount out, so we round down overall.
    if (bptSupply == BigInt(0)) {
        return _toNominal(mainIn, params);
    }
    const previousNominalMain = _toNominal(mainBalance, params);
    const afterNominalMain = _toNominal(mainBalance + mainIn, params);
    const deltaNominalMain = afterNominalMain - previousNominalMain;
    const invariant = _calcInvariantUp(
        previousNominalMain,
        wrappedBalance,
        params
    );
    return MathSol.divDownFixed(
        MathSol.mulDownFixed(bptSupply, deltaNominalMain),
        invariant
    );
}
function _calcBptInPerMainOut(
    mainOut,
    mainBalance,
    wrappedBalance,
    bptSupply,
    params
) {
    // Amount in, so we round up overall.
    const previousNominalMain = _toNominal(mainBalance, params);
    const afterNominalMain = _toNominal(mainBalance - mainOut, params);
    const deltaNominalMain = previousNominalMain - afterNominalMain;
    const invariant = _calcInvariantDown(
        previousNominalMain,
        wrappedBalance,
        params
    );
    return MathSol.divUpFixed(
        MathSol.mulUpFixed(bptSupply, deltaNominalMain),
        invariant
    );
}
function _calcBptInPerWrappedOut(
    wrappedOut,
    mainBalance,
    wrappedBalance,
    bptSupply,
    params
) {
    // Amount in, so we round up overall.
    const nominalMain = _toNominal(mainBalance, params);
    const previousInvariant = _calcInvariantUp(
        nominalMain,
        wrappedBalance,
        params
    );
    const newWrappedBalance = wrappedBalance - wrappedOut;
    const newInvariant = _calcInvariantDown(
        nominalMain,
        newWrappedBalance,
        params
    );
    const newBptBalance = MathSol.divDownFixed(
        MathSol.mulDownFixed(bptSupply, newInvariant),
        previousInvariant
    );
    return bptSupply - newBptBalance;
}
function _calcWrappedOutPerMainIn(mainIn, mainBalance, params) {
    // Amount out, so we round down overall.
    const previousNominalMain = _toNominal(mainBalance, params);
    const afterNominalMain = _toNominal(mainBalance + mainIn, params);
    const deltaNominalMain = afterNominalMain - previousNominalMain;
    return MathSol.divDownFixed(deltaNominalMain, params.rate);
}
function _calcWrappedInPerMainOut(mainOut, mainBalance, params) {
    // Amount in, so we round up overall.
    const previousNominalMain = _toNominal(mainBalance, params);
    const afterNominalMain = _toNominal(mainBalance - mainOut, params);
    const deltaNominalMain = previousNominalMain - afterNominalMain;
    return MathSol.divUpFixed(deltaNominalMain, params.rate);
}
function _calcMainInPerBptOut(
    bptOut,
    mainBalance,
    wrappedBalance,
    bptSupply,
    params
) {
    // Amount in, so we round up overall.
    if (bptSupply == BigInt(0)) {
        return _fromNominal(bptOut, params);
    }
    const previousNominalMain = _toNominal(mainBalance, params);
    const invariant = _calcInvariantUp(
        previousNominalMain,
        wrappedBalance,
        params
    );
    const deltaNominalMain = MathSol.divUpFixed(
        MathSol.mulUpFixed(invariant, bptOut),
        bptSupply
    );
    const afterNominalMain = previousNominalMain + deltaNominalMain;
    const newMainBalance = _fromNominal(afterNominalMain, params);
    return newMainBalance - mainBalance;
}
function _calcMainOutPerBptIn(
    bptIn,
    mainBalance,
    wrappedBalance,
    bptSupply,
    params
) {
    // Amount out, so we round down overall.
    const previousNominalMain = _toNominal(mainBalance, params);
    const invariant = _calcInvariantDown(
        previousNominalMain,
        wrappedBalance,
        params
    );
    const deltaNominalMain = MathSol.divDownFixed(
        MathSol.mulDownFixed(invariant, bptIn),
        bptSupply
    );
    const afterNominalMain = previousNominalMain - deltaNominalMain;
    const newMainBalance = _fromNominal(afterNominalMain, params);
    return mainBalance - newMainBalance;
}
function _calcMainOutPerWrappedIn(wrappedIn, mainBalance, params) {
    // Amount out, so we round down overall.
    const previousNominalMain = _toNominal(mainBalance, params);
    const deltaNominalMain = MathSol.mulDownFixed(wrappedIn, params.rate);
    const afterNominalMain = previousNominalMain - deltaNominalMain;
    const newMainBalance = _fromNominal(afterNominalMain, params);
    return mainBalance - newMainBalance;
}
function _calcMainInPerWrappedOut(wrappedOut, mainBalance, params) {
    // Amount in, so we round up overall.
    const previousNominalMain = _toNominal(mainBalance, params);
    const deltaNominalMain = MathSol.mulUpFixed(wrappedOut, params.rate);
    const afterNominalMain = previousNominalMain + deltaNominalMain;
    const newMainBalance = _fromNominal(afterNominalMain, params);
    return newMainBalance - mainBalance;
}
function _calcBptOutPerWrappedIn(
    wrappedIn,
    mainBalance,
    wrappedBalance,
    bptSupply,
    params
) {
    // Amount out, so we round down overall.
    if (bptSupply == BigInt(0)) {
        // Return nominal DAI
        return MathSol.mulDownFixed(wrappedIn, params.rate);
    }
    const nominalMain = _toNominal(mainBalance, params);
    const previousInvariant = _calcInvariantUp(
        nominalMain,
        wrappedBalance,
        params
    );
    const newWrappedBalance = wrappedBalance + wrappedIn;
    const newInvariant = _calcInvariantDown(
        nominalMain,
        newWrappedBalance,
        params
    );
    const newBptBalance = MathSol.divDownFixed(
        MathSol.mulDownFixed(bptSupply, newInvariant),
        previousInvariant
    );
    return newBptBalance - bptSupply;
}
function _calcWrappedInPerBptOut(
    bptOut,
    mainBalance,
    wrappedBalance,
    bptSupply,
    params
) {
    // Amount in, so we round up overall.
    if (bptSupply == BigInt(0)) {
        // Return nominal DAI
        return MathSol.divUpFixed(bptOut, params.rate);
    }
    const nominalMain = _toNominal(mainBalance, params);
    const previousInvariant = _calcInvariantUp(
        nominalMain,
        wrappedBalance,
        params
    );
    const newBptBalance = bptSupply + bptOut;
    const newWrappedBalance = MathSol.divUpFixed(
        MathSol.mulUpFixed(
            MathSol.divUpFixed(newBptBalance, bptSupply),
            previousInvariant
        ) - nominalMain,
        params.rate
    );
    return newWrappedBalance - wrappedBalance;
}
function _calcWrappedOutPerBptIn(
    bptIn,
    mainBalance,
    wrappedBalance,
    bptSupply,
    params
) {
    // Amount out, so we round down overall.
    const nominalMain = _toNominal(mainBalance, params);
    const previousInvariant = _calcInvariantUp(
        nominalMain,
        wrappedBalance,
        params
    );
    const newBptBalance = bptSupply - bptIn;
    const newWrappedBalance = MathSol.divUpFixed(
        MathSol.mulUpFixed(
            MathSol.divUpFixed(newBptBalance, bptSupply),
            previousInvariant
        ) - nominalMain,
        params.rate
    );
    return wrappedBalance - newWrappedBalance;
}
function _calcInvariantUp(nominalMainBalance, wrappedBalance, params) {
    return nominalMainBalance + MathSol.mulUpFixed(wrappedBalance, params.rate);
}
function _calcInvariantDown(nominalMainBalance, wrappedBalance, params) {
    return (
        nominalMainBalance + MathSol.mulDownFixed(wrappedBalance, params.rate)
    );
}
function _toNominal(real, params) {
    // Fees are always rounded down: either direction would work but we need to be consistent, and rounding down
    // uses less gas.
    if (real < params.lowerTarget) {
        const fees = MathSol.mulDownFixed(
            params.lowerTarget - real,
            params.fee
        );
        return MathSol.sub(real, fees);
    } else if (real <= params.upperTarget) {
        return real;
    } else {
        const fees = MathSol.mulDownFixed(
            real - params.upperTarget,
            params.fee
        );
        return MathSol.sub(real, fees);
    }
}
function _fromNominal(nominal, params) {
    // Since real = nominal + fees, rounding down fees is equivalent to rounding down real.
    if (nominal < params.lowerTarget) {
        return MathSol.divDownFixed(
            nominal + MathSol.mulDownFixed(params.fee, params.lowerTarget),
            MathSol.ONE + params.fee
        );
    } else if (nominal <= params.upperTarget) {
        return nominal;
    } else {
        return MathSol.divDownFixed(
            nominal - MathSol.mulDownFixed(params.fee, params.upperTarget),
            MathSol.ONE - params.fee
        );
    }
}
//////////////////
/////////
/// SpotPriceAfterSwap
/////////
// PairType = 'token->token'
// SwapType = 'swapExactIn'
function _spotPriceAfterSwapExactTokenInForTokenOut$2(amount, poolPairData) {
    // This is not expected to be used by SOR
    // but could still be implemented
    throw new Error('Function not implemented.');
}
// PairType = 'token->token'
// SwapType = 'swapExactOut'
function _spotPriceAfterSwapTokenInForExactTokenOut$2(amount, poolPairData) {
    // This is not expected to be used by SOR
    // but could still be implemented
    throw new Error('Function not implemented.');
}
// PairType = 'token->BPT'
// SwapType = 'swapExactIn'
function _spotPriceAfterSwapExactTokenInForBPTOut$1(amount, poolPairData) {
    const mainIn = bnum(amount.toString());
    const mainBalance = bnum(
        bignumber.formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)
    );
    const finalMainBalance = mainIn.plus(mainBalance);
    const wrappedBalance = bnum(
        bignumber.formatFixed(
            poolPairData.wrappedBalance.toString(),
            poolPairData.wrappedDecimals
        )
    );
    const virtualBptSupply = bnum(
        bignumber.formatFixed(poolPairData.virtualBptSupply, 18)
    );
    const params = [
        bnum(bignumber.formatFixed(poolPairData.swapFee, 18)),
        bnum(bignumber.formatFixed(poolPairData.rate.toString(), 18)),
        bnum(bignumber.formatFixed(poolPairData.lowerTarget.toString(), 18)),
        bnum(bignumber.formatFixed(poolPairData.upperTarget.toString(), 18)),
    ];
    const previousNominalMain = toNominal(mainBalance, params);
    const invariant = calcInvariant(
        previousNominalMain,
        wrappedBalance,
        params
    );
    let poolFactor = bnum(1);
    if (!virtualBptSupply.eq(0)) {
        poolFactor = invariant.div(virtualBptSupply);
    }
    return poolFactor.div(rightDerivativeToNominal(finalMainBalance, params));
}
// PairType = 'token->BPT'
// SwapType = 'swapExactOut'
function _spotPriceAfterSwapTokenInForExactBPTOut$1(amount, poolPairData) {
    const bptOut = bnum(amount.toString());
    const virtualBptSupply = bnum(
        bignumber.formatFixed(poolPairData.virtualBptSupply, 18)
    );
    const mainBalance = bnum(
        bignumber.formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)
    );
    const wrappedBalance = bnum(
        bignumber.formatFixed(
            poolPairData.wrappedBalance.toString(),
            poolPairData.wrappedDecimals
        )
    );
    const params = [
        bnum(bignumber.formatFixed(poolPairData.swapFee, 18)),
        bnum(bignumber.formatFixed(poolPairData.rate.toString(), 18)),
        bnum(bignumber.formatFixed(poolPairData.lowerTarget.toString(), 18)),
        bnum(bignumber.formatFixed(poolPairData.upperTarget.toString(), 18)),
    ];
    const previousNominalMain = toNominal(mainBalance, params);
    const invariant = calcInvariant(
        previousNominalMain,
        wrappedBalance,
        params
    );
    let poolFactor = bnum(1);
    if (!virtualBptSupply.eq(0)) {
        poolFactor = invariant.div(virtualBptSupply);
    }
    const deltaNominalMain = bptOut.times(poolFactor);
    const afterNominalMain = previousNominalMain.plus(deltaNominalMain);
    return poolFactor.times(
        rightDerivativeFromNominal(afterNominalMain, params)
    );
}
// PairType = 'BPT->token'
// SwapType = 'swapExactIn'
function _spotPriceAfterSwapExactBPTInForTokenOut$1(amount, poolPairData) {
    const bptIn = bnum(amount.toString());
    const mainBalance = bnum(
        bignumber.formatFixed(poolPairData.balanceOut, poolPairData.decimalsOut)
    );
    const wrappedBalance = bnum(
        bignumber.formatFixed(
            poolPairData.wrappedBalance.toString(),
            poolPairData.wrappedDecimals
        )
    );
    const virtualBptSupply = bnum(
        bignumber.formatFixed(poolPairData.virtualBptSupply, 18)
    );
    const params = [
        bnum(bignumber.formatFixed(poolPairData.swapFee, 18)),
        bnum(bignumber.formatFixed(poolPairData.rate.toString(), 18)),
        bnum(bignumber.formatFixed(poolPairData.lowerTarget.toString(), 18)),
        bnum(bignumber.formatFixed(poolPairData.upperTarget.toString(), 18)),
    ];
    const previousNominalMain = toNominal(mainBalance, params);
    const invariant = calcInvariant(
        previousNominalMain,
        wrappedBalance,
        params
    );
    const poolFactor = invariant.div(virtualBptSupply);
    const deltaNominalMain = bptIn.times(poolFactor);
    const afterNominalMain = previousNominalMain.minus(deltaNominalMain);
    return bnum(1).div(
        poolFactor.times(leftDerivativeFromNominal(afterNominalMain, params))
    );
}
// PairType = 'BPT->token'
// SwapType = 'swapExactOut'
function _spotPriceAfterSwapBPTInForExactTokenOut$1(amount, poolPairData) {
    const mainOut = bnum(amount.toString());
    const mainBalance = bnum(
        bignumber.formatFixed(poolPairData.balanceOut, poolPairData.decimalsOut)
    );
    const wrappedBalance = bnum(
        bignumber.formatFixed(
            poolPairData.wrappedBalance.toString(),
            poolPairData.wrappedDecimals
        )
    );
    const virtualBptSupply = bnum(
        bignumber.formatFixed(poolPairData.virtualBptSupply, 18)
    );
    const finalMainBalance = mainBalance.minus(mainOut);
    const params = [
        bnum(bignumber.formatFixed(poolPairData.swapFee, 18)),
        bnum(bignumber.formatFixed(poolPairData.rate.toString(), 18)),
        bnum(bignumber.formatFixed(poolPairData.lowerTarget.toString(), 18)),
        bnum(bignumber.formatFixed(poolPairData.upperTarget.toString(), 18)),
    ];
    const previousNominalMain = toNominal(mainBalance, params);
    const invariant = calcInvariant(
        previousNominalMain,
        wrappedBalance,
        params
    );
    const poolFactor = invariant.div(virtualBptSupply);
    return leftDerivativeToNominal(finalMainBalance, params).div(poolFactor);
}
/////////
///  Derivatives of spotPriceAfterSwap
/////////
// Derivative of spot price is always zero, except at the target break points,
// where it is infinity in some sense. But we ignore this pathology, return zero
// and expect good behaviour at the optimization of amounts algorithm.
// PairType = 'token->token'
// SwapType = 'swapExactIn'
function _derivativeSpotPriceAfterSwapExactTokenInForTokenOut$2(
    amount,
    poolPairData
) {
    // This is not expected to be used by SOR
    // but could still be implemented
    throw new Error('Function not implemented.');
}
// PairType = 'token->token'
// SwapType = 'swapExactOut'
function _derivativeSpotPriceAfterSwapTokenInForExactTokenOut$2(
    amount,
    poolPairData
) {
    // This is not expected to be used by SOR
    // but could still be implemented
    throw new Error('Function not implemented.');
}
// PairType = 'token->BPT'
// SwapType = 'swapExactIn'
function _derivativeSpotPriceAfterSwapExactTokenInForBPTOut$1(
    amount,
    poolPairData
) {
    return bnum(0);
}
// PairType = 'token->BPT'
// SwapType = 'swapExactOut'
function _derivativeSpotPriceAfterSwapTokenInForExactBPTOut$1(
    amount,
    poolPairData
) {
    return bnum(0);
}
// PairType = 'BPT->token'
// SwapType = 'swapExactIn'
function _derivativeSpotPriceAfterSwapExactBPTInForTokenOut$1(
    amount,
    poolPairData
) {
    return bnum(0);
}
// PairType = 'BPT->token'
// SwapType = 'swapExactOut'
function _derivativeSpotPriceAfterSwapBPTInForExactTokenOut$1(
    amount,
    poolPairData
) {
    return bnum(0);
}
function calcInvariant(nominalMainBalance, wrappedBalance, params) {
    const rate = params[1];
    return nominalMainBalance.plus(wrappedBalance.times(rate));
}
function toNominal(amount, params) {
    const fee = params[0];
    const lowerTarget = params[2];
    const upperTarget = params[3];
    if (amount.lt(lowerTarget)) {
        const fees = lowerTarget.minus(amount).times(fee);
        const result = amount.minus(fees);
        if (result.lt(0)) {
            console.log('negative nominal balance');
            return bnum(0).minus(result);
        }
        return result;
    } else if (amount.lt(upperTarget)) {
        return amount;
    } else {
        const fees = amount.minus(upperTarget).times(fee);
        return amount.minus(fees);
    }
}
function leftDerivativeToNominal(amount, params) {
    const fee = params[0];
    const lowerTarget = params[2];
    const upperTarget = params[3];
    const oneMinusFee = bnum(1).minus(fee);
    const onePlusFee = bnum(1).plus(fee);
    if (amount.lte(lowerTarget)) {
        return onePlusFee;
    } else if (amount.lte(upperTarget)) {
        return bnum(1);
    } else {
        return oneMinusFee;
    }
}
function rightDerivativeToNominal(amount, params) {
    const fee = params[0];
    const lowerTarget = params[2];
    const upperTarget = params[3];
    const oneMinusFee = bnum(1).minus(fee);
    const onePlusFee = bnum(1).plus(fee);
    if (amount.lt(lowerTarget)) {
        return onePlusFee;
    } else if (amount.lt(upperTarget)) {
        return bnum(1);
    } else {
        return oneMinusFee;
    }
}
function leftDerivativeFromNominal(amount, params) {
    const fee = params[0];
    const lowerTarget = params[2];
    const upperTarget = params[3];
    const oneMinusFee = bnum(1).minus(fee);
    const onePlusFee = bnum(1).plus(fee);
    if (amount.lte(lowerTarget)) {
        return bnum(1).div(onePlusFee);
    } else if (amount.lte(upperTarget)) {
        return bnum(1);
    } else {
        return bnum(1).div(oneMinusFee);
    }
}
function rightDerivativeFromNominal(amount, params) {
    const fee = params[0];
    const lowerTarget = params[2];
    const upperTarget = params[3];
    const oneMinusFee = bnum(1).minus(fee);
    const onePlusFee = bnum(1).plus(fee);
    if (amount.lt(lowerTarget)) {
        return bnum(1).div(onePlusFee);
    } else if (amount.lt(upperTarget)) {
        return bnum(1);
    } else {
        return bnum(1).div(oneMinusFee);
    }
}

var PairTypes$1;
(function (PairTypes) {
    PairTypes[(PairTypes['BptToMainToken'] = 0)] = 'BptToMainToken';
    PairTypes[(PairTypes['MainTokenToBpt'] = 1)] = 'MainTokenToBpt';
    PairTypes[(PairTypes['MainTokenToWrappedToken'] = 2)] =
        'MainTokenToWrappedToken';
    PairTypes[(PairTypes['WrappedTokenToMainToken'] = 3)] =
        'WrappedTokenToMainToken';
    PairTypes[(PairTypes['BptToWrappedToken'] = 4)] = 'BptToWrappedToken';
    PairTypes[(PairTypes['WrappedTokenToBpt'] = 5)] = 'WrappedTokenToBpt';
})(PairTypes$1 || (PairTypes$1 = {}));
class LinearPool {
    constructor(
        id,
        address,
        swapFee,
        totalShares,
        tokens,
        tokensList,
        mainIndex,
        wrappedIndex,
        lowerTarget,
        upperTarget
    ) {
        this.poolType = exports.PoolTypes.Linear;
        this.limitAmountCache = new Map();
        this.MAX_RATIO = bignumber.parseFixed('10', 18); // Specific for Linear pool types
        this.ALMOST_ONE = bignumber.parseFixed('0.99', 18);
        // Used for VirutalBpt and can be removed if SG is updated with VirtualBpt value
        this.MAX_TOKEN_BALANCE = bignumber.BigNumber.from('2')
            .pow('112')
            .sub('1');
        this.id = id;
        this.address = address;
        this.swapFee = bignumber.parseFixed(swapFee, 18);
        this.totalShares = bignumber.parseFixed(totalShares, 18);
        this.tokens = tokens;
        this.tokensList = tokensList;
        this.mainIndex = mainIndex;
        this.bptIndex = this.tokensList.indexOf(this.address);
        this.wrappedIndex = wrappedIndex;
        this.wrappedDecimals = this.tokens[this.wrappedIndex].decimals;
        this.lowerTarget = bignumber.parseFixed(lowerTarget, 18); // Wrapped token will have same decimals as underlying
        this.upperTarget = bignumber.parseFixed(upperTarget, 18);
    }
    static fromPool(pool) {
        if (pool.mainIndex === undefined)
            throw new Error('LinearPool missing mainIndex');
        if (pool.wrappedIndex === undefined)
            throw new Error('LinearPool missing wrappedIndex');
        if (!pool.lowerTarget)
            throw new Error('LinearPool missing lowerTarget');
        if (!pool.upperTarget)
            throw new Error('LinearPool missing upperTarget');
        return new LinearPool(
            pool.id,
            pool.address,
            pool.swapFee,
            pool.totalShares,
            pool.tokens,
            pool.tokensList,
            pool.mainIndex,
            pool.wrappedIndex,
            pool.lowerTarget,
            pool.upperTarget
        );
    }
    setTypeForSwap(type) {
        this.swapPairType = type;
    }
    parsePoolPairData(tokenIn, tokenOut) {
        let pairType;
        const tI = this.tokens.find((t) => isSameAddress(t.address, tokenIn));
        if (!tI) throw Error(`Pool does not contain token in ${tokenIn}`);
        const decimalsIn = tI.decimals;
        const balanceIn = bignumber.parseFixed(tI.balance, decimalsIn);
        const tO = this.tokens.find((t) => isSameAddress(t.address, tokenOut));
        if (!tO) throw Error(`Pool does not contain token out ${tokenOut}`);
        const decimalsOut = tO.decimals;
        const balanceOut = bignumber.parseFixed(tO.balance, decimalsOut);
        // Linear pools allow trading between token and pool BPT (phantom BPT)
        if (isSameAddress(tokenIn, this.address)) {
            if (isSameAddress(tokenOut, this.tokens[this.wrappedIndex].address))
                pairType = PairTypes$1.BptToWrappedToken;
            else pairType = PairTypes$1.BptToMainToken;
        } else if (isSameAddress(tokenOut, this.address)) {
            if (isSameAddress(tokenIn, this.tokens[this.wrappedIndex].address))
                pairType = PairTypes$1.WrappedTokenToBpt;
            else pairType = PairTypes$1.MainTokenToBpt;
        } else {
            if (isSameAddress(tokenIn, this.tokens[this.wrappedIndex].address))
                pairType = PairTypes$1.WrappedTokenToMainToken;
            else pairType = PairTypes$1.MainTokenToWrappedToken;
        }
        // Get all token balances scaled to 18
        const allBalancesScaled = this.tokens.map(({ balance }) =>
            bignumber.parseFixed(balance, 18)
        );
        // https://github.com/balancer-labs/balancer-v2-monorepo/blob/88a14eb623f6a22ef3f1afc5a8c49ebfa7eeceed/pkg/pool-linear/contracts/LinearPool.sol#L247
        // VirtualBPTSupply must be used for the maths
        // TO DO - SG should be updated to so that totalShares should return VirtualSupply
        const bptBalanceScaled = allBalancesScaled[this.bptIndex];
        const virtualBptSupply = this.MAX_TOKEN_BALANCE.sub(bptBalanceScaled);
        const poolPairData = {
            id: this.id,
            address: this.address,
            poolType: this.poolType,
            pairType: pairType,
            tokenIn: tokenIn,
            tokenOut: tokenOut,
            decimalsIn: Number(decimalsIn),
            decimalsOut: Number(decimalsOut),
            balanceIn: balanceIn,
            balanceOut: balanceOut,
            swapFee: this.swapFee,
            wrappedBalance: scale(
                bnum(this.tokens[this.wrappedIndex].balance),
                this.wrappedDecimals
            ),
            wrappedBalanceScaled: allBalancesScaled[this.wrappedIndex],
            wrappedDecimals: this.wrappedDecimals,
            rate: bignumber.parseFixed(
                this.tokens[this.wrappedIndex].priceRate,
                18
            ),
            lowerTarget: this.lowerTarget,
            upperTarget: this.upperTarget,
            mainBalanceScaled: allBalancesScaled[this.mainIndex],
            bptBalanceScaled,
            virtualBptSupply,
        };
        return poolPairData;
    }
    getNormalizedLiquidity(poolPairData) {
        return bnum(0);
    }
    getLimitAmountSwap(poolPairData, swapType) {
        const cacheKey = getPoolPairDataCacheKey(poolPairData, swapType);
        const cached = this.limitAmountCache.get(cacheKey);
        if (cached) {
            return cached;
        }
        let value;
        // Needs to return human scaled numbers
        const linearPoolPairData = poolPairData;
        const balanceOutHuman = scale(
            bnum(poolPairData.balanceOut.toString()),
            -poolPairData.decimalsOut
        );
        if (swapType === exports.SwapTypes.SwapExactIn) {
            if (linearPoolPairData.pairType === PairTypes$1.MainTokenToBpt) {
                value = this._mainTokenInForExactBPTOut(
                    poolPairData,
                    balanceOutHuman
                        .times(this.ALMOST_ONE.toString())
                        .div(constants.WeiPerEther.toString())
                );
            } else if (
                linearPoolPairData.pairType === PairTypes$1.WrappedTokenToBpt
            ) {
                // Swapping to BPT allows for a very large amount so using pre-minted amount as estimation
                value = scale(bnum(this.MAX_TOKEN_BALANCE.toString()), -18);
            } else if (
                linearPoolPairData.pairType === PairTypes$1.BptToMainToken
            ) {
                // Limit is amount of BPT in for pool balance of tokenOut
                // Amount must be in human scale
                value = this._BPTInForExactMainTokenOut(
                    linearPoolPairData,
                    balanceOutHuman
                        .times(this.ALMOST_ONE.toString())
                        .div(constants.WeiPerEther.toString())
                );
            } else if (
                linearPoolPairData.pairType === PairTypes$1.BptToWrappedToken
            ) {
                const limit = this._BPTInForExactWrappedTokenOut(
                    poolPairData,
                    balanceOutHuman
                        .times(this.ALMOST_ONE.toString())
                        .div(constants.WeiPerEther.toString())
                );
                // Returning Human scale
                value = limit;
            } else if (
                linearPoolPairData.pairType ===
                    PairTypes$1.MainTokenToWrappedToken ||
                linearPoolPairData.pairType ===
                    PairTypes$1.WrappedTokenToMainToken
            ) {
                const limit = bnum(
                    poolPairData.balanceOut
                        .mul(this.ALMOST_ONE)
                        .div(constants.WeiPerEther)
                        .toString()
                );
                value = scale(limit, -poolPairData.decimalsOut);
            } else {
                value = bnum(0);
            }
        } else {
            if (
                linearPoolPairData.pairType === PairTypes$1.MainTokenToBpt ||
                linearPoolPairData.pairType === PairTypes$1.WrappedTokenToBpt
            ) {
                const limit = bnum(
                    poolPairData.balanceOut
                        .mul(this.MAX_RATIO)
                        .div(constants.WeiPerEther)
                        .toString()
                );
                value = scale(limit, -poolPairData.decimalsOut);
            } else if (
                linearPoolPairData.pairType === PairTypes$1.BptToMainToken ||
                linearPoolPairData.pairType === PairTypes$1.BptToWrappedToken ||
                linearPoolPairData.pairType ===
                    PairTypes$1.MainTokenToWrappedToken ||
                linearPoolPairData.pairType ===
                    PairTypes$1.WrappedTokenToMainToken
            ) {
                const limit = bnum(
                    poolPairData.balanceOut
                        .mul(this.ALMOST_ONE)
                        .div(constants.WeiPerEther)
                        .toString()
                );
                value = scale(limit, -poolPairData.decimalsOut);
            } else {
                value = bnum(0);
            }
        }
        this.limitAmountCache.set(cacheKey, value);
        return value;
    }
    // Updates the balance of a given token for the pool
    updateTokenBalanceForPool(token, newBalanceScaled) {
        const T = this.tokens.find((t) => isSameAddress(t.address, token));
        if (!T) throw Error('Pool does not contain this token');
        T.balance = bignumber
            .formatFixed(newBalanceScaled, T.decimals)
            .toString();
    }
    _exactTokenInForTokenOut(poolPairData, amount) {
        if (poolPairData.pairType === PairTypes$1.MainTokenToBpt) {
            return this._exactMainTokenInForBPTOut(poolPairData, amount);
        } else if (poolPairData.pairType === PairTypes$1.BptToMainToken) {
            return this._exactBPTInForMainTokenOut(poolPairData, amount);
        } else if (poolPairData.pairType === PairTypes$1.WrappedTokenToBpt) {
            return this._exactWrappedTokenInForBPTOut(poolPairData, amount);
        } else if (poolPairData.pairType === PairTypes$1.BptToWrappedToken) {
            return this._exactBPTInForWrappedTokenOut(poolPairData, amount);
        } else if (
            poolPairData.pairType === PairTypes$1.MainTokenToWrappedToken
        ) {
            return this._exactMainTokenInForWrappedOut(poolPairData, amount);
        } else if (
            poolPairData.pairType === PairTypes$1.WrappedTokenToMainToken
        ) {
            return this._exactWrappedTokenInForMainOut(poolPairData, amount);
        } else return bnum(0);
    }
    _exactWrappedTokenInForMainOut(poolPairData, amount) {
        try {
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtScaled = this._scaleAmountTo18(amount);
            const amt = _calcMainOutPerWrappedIn(
                amtScaled.toBigInt(),
                poolPairData.mainBalanceScaled.toBigInt(),
                {
                    fee: poolPairData.swapFee.toBigInt(),
                    lowerTarget: poolPairData.lowerTarget.toBigInt(),
                    upperTarget: poolPairData.upperTarget.toBigInt(),
                    rate: poolPairData.rate.toBigInt(),
                }
            );
            // return human readable number
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_DOWN mode (1)
            return scale(bnum(amt.toString()), -18).dp(
                poolPairData.decimalsOut,
                1
            );
        } catch (err) {
            return ZERO;
        }
    }
    _exactMainTokenInForWrappedOut(poolPairData, amount) {
        try {
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtScaled = this._scaleAmountTo18(amount);
            const amt = _calcWrappedOutPerMainIn(
                amtScaled.toBigInt(),
                poolPairData.mainBalanceScaled.toBigInt(),
                {
                    fee: poolPairData.swapFee.toBigInt(),
                    lowerTarget: poolPairData.lowerTarget.toBigInt(),
                    upperTarget: poolPairData.upperTarget.toBigInt(),
                    rate: poolPairData.rate.toBigInt(),
                }
            );
            // return human readable number
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_DOWN mode (1)
            return scale(bnum(amt.toString()), -18).dp(
                poolPairData.decimalsOut,
                1
            );
        } catch (err) {
            return ZERO;
        }
    }
    _exactMainTokenInForBPTOut(poolPairData, amount) {
        try {
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtScaled = this._scaleAmountTo18(amount);
            const amt = _calcBptOutPerMainIn(
                amtScaled.toBigInt(),
                poolPairData.mainBalanceScaled.toBigInt(),
                poolPairData.wrappedBalanceScaled.toBigInt(),
                poolPairData.virtualBptSupply.toBigInt(),
                {
                    fee: poolPairData.swapFee.toBigInt(),
                    lowerTarget: poolPairData.lowerTarget.toBigInt(),
                    upperTarget: poolPairData.upperTarget.toBigInt(),
                    rate: poolPairData.rate.toBigInt(),
                }
            );
            // return human readable number
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_DOWN mode (1)
            return scale(bnum(amt.toString()), -18).dp(
                poolPairData.decimalsOut,
                1
            );
        } catch (err) {
            return ZERO;
        }
    }
    _exactBPTInForMainTokenOut(poolPairData, amount) {
        try {
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtScaled = this._scaleAmountTo18(amount);
            const amt = _calcMainOutPerBptIn(
                amtScaled.toBigInt(),
                poolPairData.mainBalanceScaled.toBigInt(),
                poolPairData.wrappedBalanceScaled.toBigInt(),
                poolPairData.virtualBptSupply.toBigInt(),
                {
                    fee: poolPairData.swapFee.toBigInt(),
                    lowerTarget: poolPairData.lowerTarget.toBigInt(),
                    upperTarget: poolPairData.upperTarget.toBigInt(),
                    rate: poolPairData.rate.toBigInt(),
                }
            );
            // return human readable number
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_DOWN mode (1)
            return scale(bnum(amt.toString()), -18).dp(
                poolPairData.decimalsOut,
                1
            );
        } catch (err) {
            return ZERO;
        }
    }
    _exactWrappedTokenInForBPTOut(poolPairData, amount) {
        try {
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtNoRate = this._scaleAmountTo18(amount)
                .mul(constants.WeiPerEther)
                .div(poolPairData.rate);
            const amt = _calcBptOutPerWrappedIn(
                amtNoRate.toBigInt(),
                poolPairData.mainBalanceScaled.toBigInt(),
                poolPairData.wrappedBalanceScaled.toBigInt(),
                poolPairData.virtualBptSupply.toBigInt(),
                {
                    fee: poolPairData.swapFee.toBigInt(),
                    lowerTarget: poolPairData.lowerTarget.toBigInt(),
                    upperTarget: poolPairData.upperTarget.toBigInt(),
                    rate: poolPairData.rate.toBigInt(),
                }
            );
            // return human readable number
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_DOWN mode (1)
            return scale(bnum(amt.toString()), -18).dp(
                poolPairData.decimalsOut,
                1
            );
        } catch (err) {
            return ZERO;
        }
    }
    _exactBPTInForWrappedTokenOut(poolPairData, amount) {
        try {
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtScaled = this._scaleAmountTo18(amount);
            const amt = _calcWrappedOutPerBptIn(
                amtScaled.toBigInt(),
                poolPairData.mainBalanceScaled.toBigInt(),
                poolPairData.wrappedBalanceScaled.toBigInt(),
                poolPairData.virtualBptSupply.toBigInt(),
                {
                    fee: poolPairData.swapFee.toBigInt(),
                    lowerTarget: poolPairData.lowerTarget.toBigInt(),
                    upperTarget: poolPairData.upperTarget.toBigInt(),
                    rate: poolPairData.rate.toBigInt(),
                }
            );
            const amtWithRate = bignumber.BigNumber.from(amt)
                .mul(poolPairData.rate)
                .div(constants.WeiPerEther);
            // return human readable number
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_DOWN mode (1)
            return scale(bnum(amtWithRate.toString()), -18).dp(
                poolPairData.decimalsOut,
                1
            );
        } catch (err) {
            return ZERO;
        }
    }
    _tokenInForExactTokenOut(poolPairData, amount) {
        if (poolPairData.pairType === PairTypes$1.MainTokenToBpt) {
            return this._mainTokenInForExactBPTOut(poolPairData, amount);
        } else if (poolPairData.pairType === PairTypes$1.BptToMainToken) {
            return this._BPTInForExactMainTokenOut(poolPairData, amount);
        } else if (poolPairData.pairType === PairTypes$1.WrappedTokenToBpt) {
            return this._wrappedTokenInForExactBPTOut(poolPairData, amount);
        } else if (poolPairData.pairType === PairTypes$1.BptToWrappedToken) {
            return this._BPTInForExactWrappedTokenOut(poolPairData, amount);
        } else if (
            poolPairData.pairType === PairTypes$1.MainTokenToWrappedToken
        ) {
            return this._mainTokenInForExactWrappedOut(poolPairData, amount);
        } else if (
            poolPairData.pairType === PairTypes$1.WrappedTokenToMainToken
        ) {
            return this._wrappedTokenInForExactMainOut(poolPairData, amount);
        } else return bnum(0); // LinearPool does not support TokenToToken
    }
    _wrappedTokenInForExactMainOut(poolPairData, amount) {
        try {
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtScaled = this._scaleAmountTo18(amount);
            const amt = _calcWrappedInPerMainOut(
                amtScaled.toBigInt(),
                poolPairData.mainBalanceScaled.toBigInt(),
                {
                    fee: poolPairData.swapFee.toBigInt(),
                    lowerTarget: poolPairData.lowerTarget.toBigInt(),
                    upperTarget: poolPairData.upperTarget.toBigInt(),
                    rate: poolPairData.rate.toBigInt(),
                }
            );
            // return human readable number
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_DOWN mode (1)
            return scale(bnum(amt.toString()), -18).dp(
                poolPairData.decimalsOut,
                1
            );
        } catch (err) {
            return ZERO;
        }
    }
    _mainTokenInForExactWrappedOut(poolPairData, amount) {
        try {
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtScaled = this._scaleAmountTo18(amount);
            const amt = _calcMainInPerWrappedOut(
                amtScaled.toBigInt(),
                poolPairData.mainBalanceScaled.toBigInt(),
                {
                    fee: poolPairData.swapFee.toBigInt(),
                    lowerTarget: poolPairData.lowerTarget.toBigInt(),
                    upperTarget: poolPairData.upperTarget.toBigInt(),
                    rate: poolPairData.rate.toBigInt(),
                }
            );
            // return human readable number
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_DOWN mode (1)
            return scale(bnum(amt.toString()), -18).dp(
                poolPairData.decimalsOut,
                1
            );
        } catch (err) {
            return ZERO;
        }
    }
    _mainTokenInForExactBPTOut(poolPairData, amount) {
        try {
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtScaled = this._scaleAmountTo18(amount);
            // in = main
            // out = BPT
            const amt = _calcMainInPerBptOut(
                amtScaled.toBigInt(),
                poolPairData.mainBalanceScaled.toBigInt(),
                poolPairData.wrappedBalanceScaled.toBigInt(),
                poolPairData.virtualBptSupply.toBigInt(),
                {
                    fee: poolPairData.swapFee.toBigInt(),
                    lowerTarget: poolPairData.lowerTarget.toBigInt(),
                    upperTarget: poolPairData.upperTarget.toBigInt(),
                    rate: poolPairData.rate.toBigInt(),
                }
            );
            // return human readable number
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_UP mode (0)
            return scale(bnum(amt.toString()), -18).dp(
                poolPairData.decimalsIn,
                0
            );
        } catch (err) {
            return ZERO;
        }
    }
    _BPTInForExactMainTokenOut(poolPairData, amount) {
        try {
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtScaled = this._scaleAmountTo18(amount);
            const amt = _calcBptInPerMainOut(
                amtScaled.toBigInt(),
                poolPairData.mainBalanceScaled.toBigInt(),
                poolPairData.wrappedBalanceScaled.toBigInt(),
                poolPairData.virtualBptSupply.toBigInt(),
                {
                    fee: poolPairData.swapFee.toBigInt(),
                    lowerTarget: poolPairData.lowerTarget.toBigInt(),
                    upperTarget: poolPairData.upperTarget.toBigInt(),
                    rate: poolPairData.rate.toBigInt(),
                }
            );
            // return human readable number
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_UP mode (0)
            return scale(bnum(amt.toString()), -18).dp(
                poolPairData.decimalsIn,
                0
            );
        } catch (err) {
            console.log('OUCH?', err);
            return ZERO;
        }
    }
    _wrappedTokenInForExactBPTOut(poolPairData, amount) {
        try {
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtScaled = this._scaleAmountTo18(amount);
            const amt = _calcWrappedInPerBptOut(
                amtScaled.toBigInt(),
                poolPairData.mainBalanceScaled.toBigInt(),
                poolPairData.wrappedBalanceScaled.toBigInt(),
                poolPairData.virtualBptSupply.toBigInt(),
                {
                    fee: poolPairData.swapFee.toBigInt(),
                    lowerTarget: poolPairData.lowerTarget.toBigInt(),
                    upperTarget: poolPairData.upperTarget.toBigInt(),
                    rate: poolPairData.rate.toBigInt(),
                }
            );
            const amtWithRate = bignumber.BigNumber.from(amt)
                .mul(poolPairData.rate)
                .div(constants.WeiPerEther);
            // return human readable number
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_DOWN mode (1)
            return scale(bnum(amtWithRate.toString()), -18).dp(
                poolPairData.decimalsOut,
                1
            );
        } catch (err) {
            return ZERO;
        }
    }
    _BPTInForExactWrappedTokenOut(poolPairData, amount) {
        try {
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amtNoRate = this._scaleAmountTo18(amount)
                .mul(constants.WeiPerEther)
                .div(poolPairData.rate);
            const amt = _calcBptInPerWrappedOut(
                amtNoRate.toBigInt(),
                poolPairData.mainBalanceScaled.toBigInt(),
                poolPairData.wrappedBalanceScaled.toBigInt(),
                poolPairData.virtualBptSupply.toBigInt(),
                {
                    fee: poolPairData.swapFee.toBigInt(),
                    lowerTarget: poolPairData.lowerTarget.toBigInt(),
                    upperTarget: poolPairData.upperTarget.toBigInt(),
                    rate: poolPairData.rate.toBigInt(),
                }
            );
            // return human readable number
            // Using BigNumber.js decimalPlaces (dp), allows us to consider token decimal accuracy correctly,
            // i.e. when using token with 2decimals 0.002 should be returned as 0
            // Uses ROUND_DOWN mode (1)
            return scale(bnum(amt.toString()), -18).dp(
                poolPairData.decimalsOut,
                1
            );
        } catch (err) {
            return ZERO;
        }
    }
    _spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, amount) {
        // For now we used the main token eqn for wrapped token as that maths isn't written and estimate should be ok for limited available paths
        if (
            poolPairData.pairType === PairTypes$1.MainTokenToBpt ||
            poolPairData.pairType === PairTypes$1.WrappedTokenToBpt
        ) {
            return this._spotPriceAfterSwapExactTokenInForBPTOut(
                poolPairData,
                amount
            );
        } else if (
            poolPairData.pairType === PairTypes$1.BptToMainToken ||
            poolPairData.pairType === PairTypes$1.BptToWrappedToken
        ) {
            return this._spotPriceAfterSwapExactBPTInForTokenOut(
                poolPairData,
                amount
            );
        } else return _spotPriceAfterSwapExactTokenInForTokenOut$2();
    }
    _spotPriceAfterSwapExactTokenInForBPTOut(poolPairData, amount) {
        return _spotPriceAfterSwapExactTokenInForBPTOut$1(amount, poolPairData);
    }
    _spotPriceAfterSwapExactBPTInForTokenOut(poolPairData, amount) {
        return _spotPriceAfterSwapExactBPTInForTokenOut$1(amount, poolPairData);
    }
    _spotPriceAfterSwapTokenInForExactTokenOut(poolPairData, amount) {
        // For now we used the main token eqn for wrapped token as that maths isn't written and estimate should be ok for limited available paths
        if (
            poolPairData.pairType === PairTypes$1.MainTokenToBpt ||
            poolPairData.pairType === PairTypes$1.WrappedTokenToBpt
        ) {
            return this._spotPriceAfterSwapTokenInForExactBPTOut(
                poolPairData,
                amount
            );
        } else if (
            poolPairData.pairType === PairTypes$1.BptToMainToken ||
            poolPairData.pairType === PairTypes$1.BptToWrappedToken
        ) {
            return this._spotPriceAfterSwapBPTInForExactTokenOut(
                poolPairData,
                amount
            );
        } else return _spotPriceAfterSwapTokenInForExactTokenOut$2();
    }
    _spotPriceAfterSwapTokenInForExactBPTOut(poolPairData, amount) {
        return _spotPriceAfterSwapTokenInForExactBPTOut$1(amount, poolPairData);
    }
    _spotPriceAfterSwapBPTInForExactTokenOut(poolPairData, amount) {
        return _spotPriceAfterSwapBPTInForExactTokenOut$1(amount, poolPairData);
    }
    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(poolPairData, amount) {
        if (poolPairData.pairType === PairTypes$1.MainTokenToBpt) {
            return this._derivativeSpotPriceAfterSwapExactTokenInForBPTOut(
                poolPairData,
                amount
            );
        } else if (poolPairData.pairType === PairTypes$1.BptToMainToken) {
            return this._derivativeSpotPriceAfterSwapExactBPTInForTokenOut(
                poolPairData,
                amount
            );
        } else return _derivativeSpotPriceAfterSwapExactTokenInForTokenOut$2();
    }
    _derivativeSpotPriceAfterSwapExactTokenInForBPTOut(poolPairData, amount) {
        return _derivativeSpotPriceAfterSwapExactTokenInForBPTOut$1();
    }
    _derivativeSpotPriceAfterSwapExactBPTInForTokenOut(poolPairData, amount) {
        return _derivativeSpotPriceAfterSwapExactBPTInForTokenOut$1();
    }
    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(poolPairData, amount) {
        if (poolPairData.pairType === PairTypes$1.MainTokenToBpt) {
            return this._derivativeSpotPriceAfterSwapTokenInForExactBPTOut(
                poolPairData,
                amount
            );
        } else if (poolPairData.pairType === PairTypes$1.BptToMainToken) {
            return this._derivativeSpotPriceAfterSwapBPTInForExactTokenOut(
                poolPairData,
                amount
            );
        } else return _derivativeSpotPriceAfterSwapTokenInForExactTokenOut$2();
    }
    _derivativeSpotPriceAfterSwapTokenInForExactBPTOut(poolPairData, amount) {
        return _derivativeSpotPriceAfterSwapTokenInForExactBPTOut$1();
    }
    _derivativeSpotPriceAfterSwapBPTInForExactTokenOut(poolPairData, amount) {
        return _derivativeSpotPriceAfterSwapBPTInForExactTokenOut$1();
    }
    _scaleAmountTo18(amount) {
        return bignumber.parseFixed(
            amount.toFormat(18, {
                groupSeparator: '',
                decimalSeparator: '.',
            }),
            18
        );
    }
}

// calc_out_given_in (swap)
function _exactTokenInForTokenOut$1(amount, poolPairData) {
    // The formula below returns some dust (due to rounding errors) but when
    // we input zero the output should be zero
    if (amount.isZero()) return amount;
    const f = parseFloat(bignumber.formatFixed(poolPairData.swapFee, 18));
    const Bi = parseFloat(
        bignumber.formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)
    );
    const Bo = parseFloat(
        bignumber.formatFixed(poolPairData.balanceOut, poolPairData.decimalsOut)
    );
    const t = getTimeTillExpiry(
        poolPairData.expiryTime,
        poolPairData.currentBlockTimestamp,
        poolPairData.unitSeconds
    );
    const Ai = amount.toNumber();
    return bnum(
        Bo -
            (Bi ** (1 - t) - (Ai + Bi) ** (1 - t) + Bo ** (1 - t)) **
                (1 / (1 - t)) -
            Math.abs(
                Ai -
                    Bo +
                    (Bi ** (1 - t) - (Ai + Bi) ** (1 - t) + Bo ** (1 - t)) **
                        (1 / (1 - t))
            ) *
                f
    );
}
// calc_in_given_out (swap)
function _tokenInForExactTokenOut$1(amount, poolPairData) {
    // The formula below returns some dust (due to rounding errors) but when
    // we input zero the output should be zero
    if (amount.isZero()) return amount;
    const f = parseFloat(bignumber.formatFixed(poolPairData.swapFee, 18));
    const Bi = parseFloat(
        bignumber.formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)
    );
    const Bo = parseFloat(
        bignumber.formatFixed(poolPairData.balanceOut, poolPairData.decimalsOut)
    );
    const t = getTimeTillExpiry(
        poolPairData.expiryTime,
        poolPairData.currentBlockTimestamp,
        poolPairData.unitSeconds
    );
    const Ao = amount.toNumber();
    return bnum(
        -Bi +
            (Bi ** (1 - t) + Bo ** (1 - t) - (-Ao + Bo) ** (1 - t)) **
                (1 / (1 - t)) +
            Math.abs(
                -Ao -
                    Bi +
                    (Bi ** (1 - t) + Bo ** (1 - t) - (-Ao + Bo) ** (1 - t)) **
                        (1 / (1 - t))
            ) *
                f
    );
}
/////////
/// SpotPriceAfterSwap
/////////
// PairType = 'token->token'
// SwapType = 'swapExactIn'
function _spotPriceAfterSwapExactTokenInForTokenOut$1(amount, poolPairData) {
    const f = parseFloat(bignumber.formatFixed(poolPairData.swapFee, 18));
    const Bi = parseFloat(
        bignumber.formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)
    );
    const Bo = parseFloat(
        bignumber.formatFixed(poolPairData.balanceOut, poolPairData.decimalsOut)
    );
    const t = getTimeTillExpiry(
        poolPairData.expiryTime,
        poolPairData.currentBlockTimestamp,
        poolPairData.unitSeconds
    );
    const Ai = amount.toNumber();
    return bnum(
        1 /
            ((Bi ** (1 - t) - (Ai + Bi) ** (1 - t) + Bo ** (1 - t)) **
                (-1 + 1 / (1 - t)) /
                (Ai + Bi) ** t -
                Math.abs(
                    1 -
                        (Bi ** (1 - t) -
                            (Ai + Bi) ** (1 - t) +
                            Bo ** (1 - t)) **
                            (-1 + 1 / (1 - t)) /
                            (Ai + Bi) ** t
                ) *
                    f)
    );
}
// PairType = 'token->token'
// SwapType = 'swapExactOut'
function _spotPriceAfterSwapTokenInForExactTokenOut$1(amount, poolPairData) {
    const f = parseFloat(bignumber.formatFixed(poolPairData.swapFee, 18));
    const Bi = parseFloat(
        bignumber.formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)
    );
    const Bo = parseFloat(
        bignumber.formatFixed(poolPairData.balanceOut, poolPairData.decimalsOut)
    );
    const t = getTimeTillExpiry(
        poolPairData.expiryTime,
        poolPairData.currentBlockTimestamp,
        poolPairData.unitSeconds
    );
    const Ao = amount.toNumber();
    return bnum(
        (Bi ** (1 - t) + Bo ** (1 - t) - (-Ao + Bo) ** (1 - t)) **
            (-1 + 1 / (1 - t)) /
            (-Ao + Bo) ** t +
            Math.abs(
                -1 +
                    (Bi ** (1 - t) + Bo ** (1 - t) - (-Ao + Bo) ** (1 - t)) **
                        (-1 + 1 / (1 - t)) /
                        (-Ao + Bo) ** t
            ) *
                f
    );
}
/////////
///  Derivatives of spotPriceAfterSwap
/////////
// PairType = 'token->token'
// SwapType = 'swapExactIn'
function _derivativeSpotPriceAfterSwapExactTokenInForTokenOut$1(
    amount,
    poolPairData
) {
    const f = parseFloat(bignumber.formatFixed(poolPairData.swapFee, 18));
    const Bi = parseFloat(
        bignumber.formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)
    );
    const Bo = parseFloat(
        bignumber.formatFixed(poolPairData.balanceOut, poolPairData.decimalsOut)
    );
    const t = getTimeTillExpiry(
        poolPairData.expiryTime,
        poolPairData.currentBlockTimestamp,
        poolPairData.unitSeconds
    );
    const Ai = amount.toNumber();
    return bnum(
        -(
            (-(
                ((Bi ** (1 - t) - (Ai + Bi) ** (1 - t) + Bo ** (1 - t)) **
                    (-2 + 1 / (1 - t)) *
                    (-1 + 1 / (1 - t)) *
                    (1 - t)) /
                (Ai + Bi) ** (2 * t)
            ) -
                (Ai + Bi) ** (-1 - t) *
                    (Bi ** (1 - t) - (Ai + Bi) ** (1 - t) + Bo ** (1 - t)) **
                        (-1 + 1 / (1 - t)) *
                    t -
                f *
                    Math.abs(
                        ((Bi ** (1 - t) -
                            (Ai + Bi) ** (1 - t) +
                            Bo ** (1 - t)) **
                            (-2 + 1 / (1 - t)) *
                            (-1 + 1 / (1 - t)) *
                            (1 - t)) /
                            (Ai + Bi) ** (2 * t) +
                            (Ai + Bi) ** (-1 - t) *
                                (Bi ** (1 - t) -
                                    (Ai + Bi) ** (1 - t) +
                                    Bo ** (1 - t)) **
                                    (-1 + 1 / (1 - t)) *
                                t
                    )) /
            ((Bi ** (1 - t) - (Ai + Bi) ** (1 - t) + Bo ** (1 - t)) **
                (-1 + 1 / (1 - t)) /
                (Ai + Bi) ** t -
                Math.abs(
                    1 -
                        (Bi ** (1 - t) -
                            (Ai + Bi) ** (1 - t) +
                            Bo ** (1 - t)) **
                            (-1 + 1 / (1 - t)) /
                            (Ai + Bi) ** t
                ) *
                    f) **
                2
        )
    );
}
// PairType = 'token->token'
// SwapType = 'swapExactOut'
function _derivativeSpotPriceAfterSwapTokenInForExactTokenOut$1(
    amount,
    poolPairData
) {
    const f = parseFloat(bignumber.formatFixed(poolPairData.swapFee, 18));
    const Bi = parseFloat(
        bignumber.formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)
    );
    const Bo = parseFloat(
        bignumber.formatFixed(poolPairData.balanceOut, poolPairData.decimalsOut)
    );
    const t = getTimeTillExpiry(
        poolPairData.expiryTime,
        poolPairData.currentBlockTimestamp,
        poolPairData.unitSeconds
    );
    const Ao = amount.toNumber();
    return bnum(
        ((Bi ** (1 - t) + Bo ** (1 - t) - (-Ao + Bo) ** (1 - t)) **
            (-2 + 1 / (1 - t)) *
            (-1 + 1 / (1 - t)) *
            (1 - t)) /
            (-Ao + Bo) ** (2 * t) +
            (-Ao + Bo) ** (-1 - t) *
                (Bi ** (1 - t) + Bo ** (1 - t) - (-Ao + Bo) ** (1 - t)) **
                    (-1 + 1 / (1 - t)) *
                t +
            f *
                Math.abs(
                    ((Bi ** (1 - t) + Bo ** (1 - t) - (-Ao + Bo) ** (1 - t)) **
                        (-2 + 1 / (1 - t)) *
                        (-1 + 1 / (1 - t)) *
                        (1 - t)) /
                        (-Ao + Bo) ** (2 * t) +
                        (-Ao + Bo) ** (-1 - t) *
                            (Bi ** (1 - t) +
                                Bo ** (1 - t) -
                                (-Ao + Bo) ** (1 - t)) **
                                (-1 + 1 / (1 - t)) *
                            t
                )
    );
}
function getTimeTillExpiry(expiryTime, currentBlockTimestamp, unitSeconds) {
    let t =
        currentBlockTimestamp < expiryTime
            ? expiryTime - currentBlockTimestamp
            : 0;
    t = t / unitSeconds;
    return t;
}

class ElementPool {
    constructor(
        id,
        address,
        swapFee,
        totalShares,
        tokens,
        tokensList,
        expiryTime,
        unitSeconds,
        principalToken,
        baseToken
    ) {
        this.poolType = exports.PoolTypes.Element;
        this.id = id;
        this.address = address;
        this.swapFee = bignumber.parseFixed(swapFee, 18);
        this.totalShares = bignumber.parseFixed(totalShares, 18);
        this.tokens = tokens;
        this.tokensList = tokensList;
        this.expiryTime = expiryTime;
        this.unitSeconds = unitSeconds;
        this.principalToken = principalToken;
        this.baseToken = baseToken;
        this.currentBlockTimestamp = 0;
    }
    static fromPool(pool) {
        if (!pool.expiryTime) throw new Error('ElementPool missing expiryTime');
        if (!pool.unitSeconds)
            throw new Error('ElementPool missing unitSeconds');
        if (!pool.principalToken)
            throw new Error('ElementPool missing principalToken');
        if (!pool.baseToken) throw new Error('ElementPool missing baseToken');
        return new ElementPool(
            pool.id,
            pool.address,
            pool.swapFee,
            pool.totalShares,
            pool.tokens,
            pool.tokensList,
            pool.expiryTime,
            pool.unitSeconds,
            pool.principalToken,
            pool.baseToken
        );
    }
    setCurrentBlockTimestamp(timestamp) {
        this.currentBlockTimestamp = timestamp;
    }
    setTypeForSwap(type) {
        this.swapPairType = type;
    }
    parsePoolPairData(tokenIn, tokenOut) {
        const tokenIndexIn = this.tokens.findIndex(
            (t) => address.getAddress(t.address) === address.getAddress(tokenIn)
        );
        if (tokenIndexIn < 0) throw 'Pool does not contain tokenIn';
        const tI = this.tokens[tokenIndexIn];
        const decimalsIn = tI.decimals;
        const tokenIndexOut = this.tokens.findIndex(
            (t) =>
                address.getAddress(t.address) === address.getAddress(tokenOut)
        );
        if (tokenIndexOut < 0) throw 'Pool does not contain tokenOut';
        const tO = this.tokens[tokenIndexOut];
        const decimalsOut = tO.decimals;
        // We already add the virtual LP shares to the right balance
        const realBalanceIn = bignumber.parseFixed(tI.balance, decimalsIn);
        const realBalanceOut = bignumber.parseFixed(tO.balance, decimalsOut);
        let balanceIn = realBalanceIn;
        let balanceOut = realBalanceOut;
        if (tokenIn == this.principalToken) {
            balanceIn = realBalanceIn.add(this.totalShares);
        } else if (tokenOut == this.principalToken) {
            balanceOut = realBalanceOut.add(this.totalShares);
        }
        const poolPairData = {
            id: this.id,
            address: this.address,
            poolType: this.poolType,
            tokenIn: tokenIn,
            tokenOut: tokenOut,
            principalToken: this.principalToken,
            baseToken: this.baseToken,
            decimalsIn: Number(decimalsIn),
            decimalsOut: Number(decimalsOut),
            balanceIn,
            balanceOut,
            swapFee: this.swapFee,
            totalShares: this.totalShares,
            expiryTime: this.expiryTime,
            unitSeconds: this.unitSeconds,
            currentBlockTimestamp: this.currentBlockTimestamp,
        };
        return poolPairData;
    }
    // Normalized liquidity is an abstract term that can be thought of the
    // inverse of the slippage. It is proportional to the token balances in the
    // pool but also depends on the shape of the invariant curve.
    // As a standard, we define normalized liquidity in tokenOut
    getNormalizedLiquidity(poolPairData) {
        // This could be refined by using the inverse of the slippage, but
        // in practice this won't have a big impact in path selection for
        // multi-hops so not a big priority
        return bnum(
            bignumber.formatFixed(
                poolPairData.balanceOut,
                poolPairData.decimalsOut
            )
        );
    }
    getLimitAmountSwap(poolPairData, swapType) {
        const MAX_OUT_RATIO = bignumber.parseFixed('0.3', 18);
        if (swapType === exports.SwapTypes.SwapExactIn) {
            // "Ai < (Bi**(1-t)+Bo**(1-t))**(1/(1-t))-Bi" must hold in order for
            // base of root to be non-negative
            const Bi = parseFloat(
                bignumber.formatFixed(
                    poolPairData.balanceIn,
                    poolPairData.decimalsIn
                )
            );
            const Bo = parseFloat(
                bignumber.formatFixed(
                    poolPairData.balanceOut,
                    poolPairData.decimalsOut
                )
            );
            const t = getTimeTillExpiry(
                this.expiryTime,
                this.currentBlockTimestamp,
                this.unitSeconds
            );
            return bnum((Bi ** (1 - t) + Bo ** (1 - t)) ** (1 / (1 - t)) - Bi);
        } else {
            return bnum(
                bignumber.formatFixed(
                    poolPairData.balanceOut
                        .mul(MAX_OUT_RATIO)
                        .div(constants.WeiPerEther),
                    poolPairData.decimalsOut
                )
            );
        }
    }
    // Updates the balance of a given token for the pool
    updateTokenBalanceForPool(token, newBalance) {
        // token is BPT
        if (this.address == token) {
            this.totalShares = newBalance;
        } else {
            // token is underlying in the pool
            const T = this.tokens.find((t) => isSameAddress(t.address, token));
            if (!T) throw Error('Pool does not contain this token');
            T.balance = bignumber.formatFixed(newBalance, T.decimals);
        }
    }
    _exactTokenInForTokenOut(poolPairData, amount) {
        poolPairData.currentBlockTimestamp = this.currentBlockTimestamp;
        return _exactTokenInForTokenOut$1(amount, poolPairData);
    }
    _tokenInForExactTokenOut(poolPairData, amount) {
        poolPairData.currentBlockTimestamp = this.currentBlockTimestamp;
        return _tokenInForExactTokenOut$1(amount, poolPairData);
    }
    _spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, amount) {
        poolPairData.currentBlockTimestamp = this.currentBlockTimestamp;
        return _spotPriceAfterSwapExactTokenInForTokenOut$1(
            amount,
            poolPairData
        );
    }
    _spotPriceAfterSwapTokenInForExactTokenOut(poolPairData, amount) {
        poolPairData.currentBlockTimestamp = this.currentBlockTimestamp;
        return _spotPriceAfterSwapTokenInForExactTokenOut$1(
            amount,
            poolPairData
        );
    }
    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(poolPairData, amount) {
        poolPairData.currentBlockTimestamp = this.currentBlockTimestamp;
        return _derivativeSpotPriceAfterSwapExactTokenInForTokenOut$1(
            amount,
            poolPairData
        );
    }
    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(poolPairData, amount) {
        poolPairData.currentBlockTimestamp = this.currentBlockTimestamp;
        return _derivativeSpotPriceAfterSwapTokenInForExactTokenOut$1(
            amount,
            poolPairData
        );
    }
}

const MAX_TOKEN_BALANCE = bnum(2)
    .pow(112)
    .minus(1)
    .div(10 ** 18);
// All functions are adapted from the solidity ones to be found on:
// https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/pools/stable/StableMath.sol
// TODO: implement all up and down rounding variations
/**********************************************************************************************
    // invariant                                                                                 //
    // D = invariant to compute                                                                  //
    // A = amplifier                n * D^2 + A * n^n * S * (n^n * P / D^(n−1))                  //
    // S = sum of balances         ____________________________________________                  //
    // P = product of balances    (n+1) * D + ( A * n^n − 1)* (n^n * P / D^(n−1))                //
    // n = number of tokens                                                                      //
    **********************************************************************************************/
function _invariant(
    amp, // amp
    balances // balances
) {
    let sum = ZERO;
    const totalCoins = balances.length;
    for (let i = 0; i < totalCoins; i++) {
        sum = sum.plus(balances[i]);
    }
    if (sum.isZero()) {
        return ZERO;
    }
    let prevInv = ZERO;
    let inv = sum;
    // amp is passed as an ethers bignumber while maths uses bignumber.js
    const ampAdjusted = bnum(bignumber.formatFixed(amp, 3));
    const ampTimesNpowN = ampAdjusted.times(totalCoins ** totalCoins); // A*n^n
    for (let i = 0; i < 255; i++) {
        let P_D = bnum(totalCoins).times(balances[0]);
        for (let j = 1; j < totalCoins; j++) {
            //P_D is rounded up
            P_D = P_D.times(balances[j]).times(totalCoins).div(inv);
        }
        prevInv = inv;
        //inv is rounded up
        inv = bnum(totalCoins)
            .times(inv)
            .times(inv)
            .plus(ampTimesNpowN.times(sum).times(P_D))
            .div(
                bnum(totalCoins + 1)
                    .times(inv)
                    .plus(ampTimesNpowN.minus(1).times(P_D))
            );
        // Equality with the precision of 1
        if (inv.gt(prevInv)) {
            if (inv.minus(prevInv).lt(bnum(10 ** -18))) {
                break;
            }
        } else if (prevInv.minus(inv).lt(bnum(10 ** -18))) {
            break;
        }
    }
    //Result is rounded up
    return inv;
}
// // This function has to be zero if the invariant D was calculated correctly
// // It was only used for double checking that the invariant was correct
// export function _invariantValueFunction(
//     amp: BigNumber, // amp
//     balances: BigNumber[], // balances
//     D: BigNumber
// ): BigNumber {
//     let invariantValueFunction;
//     let prod = ONE;
//     let sum = ZERO;
//     for (let i = 0; i < balances.length; i++) {
//         prod = prod.times(balances[i]);
//         sum = sum.plus(balances[i]);
//     }
//     let n = bnum(balances.length);
//     // NOT! working based on Daniel's equation: https://www.notion.so/Analytical-for-2-tokens-1cd46debef6648dd81f2d75bae941fea
//     // invariantValueFunction = amp.times(sum)
//     //     .plus((ONE.div(n.pow(n)).minus(amp)).times(D))
//     //     .minus((ONE.div(n.pow(n.times(2)).times(prod))).times(D.pow(n.plus(ONE))));
//     invariantValueFunction = D.pow(n.plus(ONE))
//         .div(n.pow(n).times(prod))
//         .plus(D.times(amp.times(n.pow(n)).minus(ONE)))
//         .minus(amp.times(n.pow(n)).times(sum));
//     return invariantValueFunction;
// }
// Adapted from StableMath.sol, _outGivenIn()
// * Added swap fee at very first line
/**********************************************************************************************
    // outGivenIn token x for y - polynomial equation to solve                                   //
    // ay = amount out to calculate                                                              //
    // by = balance token out                                                                    //
    // y = by - ay                                                                               //
    // D = invariant                               D                     D^(n+1)                 //
    // A = amplifier               y^2 + ( S - ----------  - 1) * y -  ------------- = 0         //
    // n = number of tokens                    (A * n^n)               A * n^2n * P              //
    // S = sum of final balances but y                                                           //
    // P = product of final balances but y                                                       //
    **********************************************************************************************/
function _exactTokenInForTokenOut(amount, poolPairData) {
    // The formula below returns some dust (due to rounding errors) but when
    // we input zero the output should be zero
    if (amount.isZero()) return amount;
    const { amp, allBalances, tokenIndexIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    let tokenAmountIn = amount;
    tokenAmountIn = tokenAmountIn
        .times(constants.WeiPerEther.sub(swapFee).toString())
        .div(constants.WeiPerEther.toString());
    //Invariant is rounded up
    const inv = _invariant(amp, balances);
    let p = inv;
    let sum = ZERO;
    const totalCoins = bnum(balances.length);
    let n_pow_n = ONE;
    let x = ZERO;
    for (let i = 0; i < balances.length; i++) {
        n_pow_n = n_pow_n.times(totalCoins);
        if (i == tokenIndexIn) {
            x = balances[i].plus(tokenAmountIn);
        } else if (i != tokenIndexOut) {
            x = balances[i];
        } else {
            continue;
        }
        sum = sum.plus(x);
        //Round up p
        p = p.times(inv).div(x);
    }
    //Calculate out balance
    const y = _solveAnalyticalBalance(sum, inv, amp, n_pow_n, p);
    //Result is rounded down
    // return balances[tokenIndexOut] > y ? balances[tokenIndexOut].minus(y) : 0;
    return balances[tokenIndexOut].minus(y);
}
// Adapted from StableMath.sol, _inGivenOut()
// * Added swap fee at very last line
/**********************************************************************************************
    // inGivenOut token x for y - polynomial equation to solve                                   //
    // ax = amount in to calculate                                                               //
    // bx = balance token in                                                                     //
    // x = bx + ax                                                                               //
    // D = invariant                               D                     D^(n+1)                 //
    // A = amplifier               x^2 + ( S - ----------  - 1) * x -  ------------- = 0         //
    // n = number of tokens                    (A * n^n)               A * n^2n * P              //
    // S = sum of final balances but x                                                           //
    // P = product of final balances but x                                                       //
    **********************************************************************************************/
function _tokenInForExactTokenOut(amount, poolPairData) {
    // The formula below returns some dust (due to rounding errors) but when
    // we input zero the output should be zero
    if (amount.isZero()) return amount;
    const { amp, allBalances, tokenIndexIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    const tokenAmountOut = amount;
    //Invariant is rounded up
    const inv = _invariant(amp, balances);
    let p = inv;
    let sum = ZERO;
    const totalCoins = bnum(balances.length);
    let n_pow_n = ONE;
    let x = ZERO;
    for (let i = 0; i < balances.length; i++) {
        n_pow_n = n_pow_n.times(totalCoins);
        if (i == tokenIndexOut) {
            x = balances[i].minus(tokenAmountOut);
        } else if (i != tokenIndexIn) {
            x = balances[i];
        } else {
            continue;
        }
        sum = sum.plus(x);
        //Round up p
        p = p.times(inv).div(x);
    }
    //Calculate in balance
    const y = _solveAnalyticalBalance(sum, inv, amp, n_pow_n, p);
    //Result is rounded up
    return y
        .minus(balances[tokenIndexIn])
        .multipliedBy(constants.WeiPerEther.toString())
        .div(constants.WeiPerEther.sub(swapFee).toString());
}
/*
Flow of calculations:
amountBPTOut -> newInvariant -> (amountInProportional, amountInAfterFee) ->
amountInPercentageExcess -> amountIn
*/
function _tokenInForExactBPTOut(amount, poolPairData) {
    // The formula below returns some dust (due to rounding errors) but when
    // we input zero the output should be zero
    if (amount.isZero()) return amount;
    const {
        amp,
        allBalances,
        virtualBptSupply,
        decimalsOut,
        tokenIndexIn,
        swapFee,
    } = poolPairData;
    const balances = [...allBalances];
    const bptAmountOut = amount;
    // Get current invariant
    const currentInvariant = _invariant(amp, balances);
    // Calculate new invariant
    const bnumBalanceOut = bnum(
        bignumber.formatFixed(virtualBptSupply, decimalsOut)
    );
    const newInvariant = bnumBalanceOut
        .plus(bptAmountOut)
        .div(bnumBalanceOut)
        .times(currentInvariant);
    // First calculate the sum of all token balances which will be used to calculate
    // the current weight of token
    let sumBalances = bnum(0);
    for (let i = 0; i < balances.length; i++) {
        sumBalances = sumBalances.plus(balances[i]);
    }
    // get amountInAfterFee
    const newBalanceTokenIndex =
        _getTokenBalanceGivenInvariantAndAllOtherBalances(
            amp,
            balances,
            newInvariant,
            tokenIndexIn
        );
    const amountInAfterFee = newBalanceTokenIndex.minus(balances[tokenIndexIn]);
    // Get tokenBalancePercentageExcess
    const currentWeight = balances[tokenIndexIn].div(sumBalances);
    const tokenBalancePercentageExcess = bnum(1).minus(currentWeight);
    // return amountIn
    const bnumSwapFee = bnum(bignumber.formatFixed(swapFee, 18));
    return amountInAfterFee.div(
        bnum(1).minus(tokenBalancePercentageExcess.times(bnumSwapFee))
    );
}
function _BPTInForExactTokenOut(amount, poolPairData) {
    // The formula below returns some dust (due to rounding errors) but when
    // we input zero the output should be zero
    if (amount.isZero()) return amount;
    const {
        amp,
        allBalances,
        virtualBptSupply,
        decimalsIn,
        tokenIndexOut,
        swapFee,
    } = poolPairData;
    const balances = [...allBalances];
    const tokenAmountOut = amount;
    // Get current invariant
    const currentInvariant = _invariant(amp, balances);
    // First calculate the sum of all token balances which will be used to calculate
    // the current weights of each token relative to the sum of all balances
    let sumBalances = bnum(0);
    for (let i = 0; i < balances.length; i++) {
        sumBalances = sumBalances.plus(balances[i]);
    }
    // Calculate the weighted balance ratio without considering fees
    const currentWeight = balances[tokenIndexOut].div(sumBalances);
    const tokenBalanceRatioWithoutFee = balances[tokenIndexOut]
        .minus(tokenAmountOut)
        .div(balances[tokenIndexOut]);
    const weightedBalanceRatio = bnum(1).minus(
        bnum(1).minus(tokenBalanceRatioWithoutFee).times(currentWeight)
    );
    // calculate new amounts in taking into account the fee on the % excess
    const tokenBalancePercentageExcess = weightedBalanceRatio
        .minus(tokenBalanceRatioWithoutFee)
        .div(bnum(1).minus(tokenBalanceRatioWithoutFee));
    const bnumSwapFee = bnum(bignumber.formatFixed(swapFee, 18));
    const amountOutBeforeFee = tokenAmountOut.div(
        bnum(1).minus(bnumSwapFee.times(tokenBalancePercentageExcess))
    );
    balances[tokenIndexOut] = balances[tokenIndexOut].minus(amountOutBeforeFee);
    // get new invariant taking into account swap fees
    const newInvariant = _invariant(amp, balances);
    // return amountBPTIn
    const bnumBalanceIn = bnum(
        bignumber.formatFixed(virtualBptSupply, decimalsIn)
    );
    return bnumBalanceIn.times(
        bnum(1).minus(newInvariant.div(currentInvariant))
    );
}
//This function calculates the balance of a given token (tokenIndex)
// given all the other balances and the invariant
function _getTokenBalanceGivenInvariantAndAllOtherBalances(
    amp,
    balances,
    inv,
    tokenIndex
) {
    let p = inv;
    let sum = ZERO;
    const totalCoins = balances.length;
    let nPowN = ONE;
    let x = ZERO;
    for (let i = 0; i < totalCoins; i++) {
        nPowN = nPowN.times(totalCoins);
        if (i != tokenIndex) {
            x = balances[i];
        } else {
            continue;
        }
        sum = sum.plus(x);
        //Round up p
        p = p.times(inv).div(x);
    }
    // Calculate token balance
    return _solveAnalyticalBalance(sum, inv, amp, nPowN, p);
}
//This function calcuates the analytical solution to find the balance required
function _solveAnalyticalBalance(sum, inv, amp, n_pow_n, p) {
    // amp is passed as an ethers bignumber while maths uses bignumber.js
    const oldBN_amp = bnum(bignumber.formatFixed(amp, 3));
    //Round up p
    p = p.times(inv).div(oldBN_amp.times(n_pow_n).times(n_pow_n));
    //Round down b
    const b = sum.plus(inv.div(oldBN_amp.times(n_pow_n)));
    //Round up c
    // let c = inv >= b
    //     ? inv.minus(b).plus(Math.sqrtUp(inv.minus(b).times(inv.minus(b)).plus(p.times(4))))
    //     : Math.sqrtUp(b.minus(inv).times(b.minus(inv)).plus(p.times(4))).minus(b.minus(inv));
    let c;
    if (inv.gte(b)) {
        c = inv
            .minus(b)
            .plus(inv.minus(b).times(inv.minus(b)).plus(p.times(4)).sqrt());
    } else {
        c = b
            .minus(inv)
            .times(b.minus(inv))
            .plus(p.times(4))
            .sqrt()
            .minus(b.minus(inv));
    }
    //Round up y
    return c.div(2);
}
//////////////////////
////  These functions have been added exclusively for the SORv2
//////////////////////
function _exactTokenInForBPTOut(amount, poolPairData) {
    // The formula below returns some dust (due to rounding errors) but when
    // we input zero the output should be zero
    if (amount.isZero()) return amount;
    const {
        amp,
        allBalances,
        virtualBptSupply,
        tokenIndexIn,
        swapFee,
        decimalsOut,
    } = poolPairData;
    const balances = [...allBalances];
    const tokenAmountIn = amount;
    // Get current invariant
    const currentInvariant = _invariant(amp, balances);
    // First calculate the sum of all token balances which will be used to calculate
    // the current weights of each token relative to the sum of all balances
    let sumBalances = bnum(0);
    for (let i = 0; i < balances.length; i++) {
        sumBalances = sumBalances.plus(balances[i]);
    }
    // Calculate the weighted balance ratio without considering fees
    const currentWeight = balances[tokenIndexIn].div(sumBalances);
    const tokenBalanceRatioWithoutFee = balances[tokenIndexIn]
        .plus(tokenAmountIn)
        .div(balances[tokenIndexIn]);
    const weightedBalanceRatio = bnum(1).plus(
        tokenBalanceRatioWithoutFee.minus(bnum(1)).times(currentWeight)
    );
    // calculate new amountIn taking into account the fee on the % excess
    // Percentage of the amount supplied that will be implicitly swapped for other tokens in the pool
    const tokenBalancePercentageExcess = tokenBalanceRatioWithoutFee
        .minus(weightedBalanceRatio)
        .div(tokenBalanceRatioWithoutFee.minus(bnum(1)));
    const bnumSwapFee = bnum(bignumber.formatFixed(swapFee, 18));
    const amountInAfterFee = tokenAmountIn.times(
        bnum(1).minus(bnumSwapFee.times(tokenBalancePercentageExcess))
    );
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(amountInAfterFee);
    // get new invariant taking into account swap fees
    const newInvariant = _invariant(amp, balances);
    const bnumBalanceOut = bnum(
        bignumber.formatFixed(virtualBptSupply, decimalsOut)
    );
    return bnumBalanceOut.times(
        newInvariant.div(currentInvariant).minus(bnum(1))
    );
}
/*
Flow of calculations:
amountBPTin -> newInvariant -> (amountOutProportional, amountOutBeforeFee) ->
amountOutPercentageExcess -> amountOut
*/
function _exactBPTInForTokenOut(amount, poolPairData) {
    // The formula below returns some dust (due to rounding errors) but when
    // we input zero the output should be zero
    if (amount.isZero()) return amount;
    const { amp, allBalances, balanceIn, tokenIndexOut, decimalsIn, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    const bptAmountIn = amount;
    /**********************************************************************************************
    // TODO description                            //
    **********************************************************************************************/
    // Get current invariant
    const currentInvariant = _invariant(amp, balances);
    // Calculate new invariant
    const bnumBalanceIn = MAX_TOKEN_BALANCE.minus(
        bnum(bignumber.formatFixed(balanceIn, decimalsIn))
    );
    const newInvariant = bnumBalanceIn
        .minus(bptAmountIn)
        .div(bnumBalanceIn)
        .times(currentInvariant);
    // First calculate the sum of all token balances which will be used to calculate
    // the current weight of token
    let sumBalances = bnum(0);
    for (let i = 0; i < balances.length; i++) {
        sumBalances = sumBalances.plus(balances[i]);
    }
    const newBalanceTokenIndex =
        _getTokenBalanceGivenInvariantAndAllOtherBalances(
            amp,
            balances,
            newInvariant,
            tokenIndexOut
        );
    const amountOutBeforeFee =
        balances[tokenIndexOut].minus(newBalanceTokenIndex);
    // Calculate tokenBalancePercentageExcess
    const currentWeight = balances[tokenIndexOut].div(sumBalances);
    const tokenBalancePercentageExcess = bnum(1).minus(currentWeight);
    const ans = amountOutBeforeFee.times(
        ONE.minus(
            tokenBalancePercentageExcess
                .times(swapFee.toString())
                .div(constants.WeiPerEther.toString())
        )
    );
    return ans;
}
function _poolDerivatives(
    amp,
    balances,
    tokenIndexIn,
    tokenIndexOut,
    is_first_derivative,
    wrt_out
) {
    const totalCoins = balances.length;
    const D = _invariant(amp, balances);
    let S = ZERO;
    for (let i = 0; i < totalCoins; i++) {
        if (i != tokenIndexIn && i != tokenIndexOut) {
            S = S.plus(balances[i]);
        }
    }
    const x = balances[tokenIndexIn];
    const y = balances[tokenIndexOut];
    // amp is passed as an ethers bignumber while maths uses bignumber.js
    const ampAdjusted = bnum(bignumber.formatFixed(amp, 3));
    const a = ampAdjusted.times(totalCoins ** totalCoins); // = ampTimesNpowN
    const b = S.minus(D).times(a).plus(D);
    const twoaxy = bnum(2).times(a).times(x).times(y);
    const partial_x = twoaxy.plus(a.times(y).times(y)).plus(b.times(y));
    const partial_y = twoaxy.plus(a.times(x).times(x)).plus(b.times(x));
    let ans;
    if (is_first_derivative) {
        ans = partial_x.div(partial_y);
    } else {
        const partial_xx = bnum(2).times(a).times(y);
        const partial_yy = bnum(2).times(a).times(x);
        const partial_xy = partial_xx.plus(partial_yy).plus(b);
        const numerator = bnum(2)
            .times(partial_x)
            .times(partial_y)
            .times(partial_xy)
            .minus(partial_xx.times(partial_y.pow(2)))
            .minus(partial_yy.times(partial_x.pow(2)));
        const denominator = partial_x.pow(2).times(partial_y);
        ans = numerator.div(denominator);
        if (wrt_out) {
            ans = ans.times(partial_y).div(partial_x);
        }
    }
    return ans;
}
/////////
/// SpotPriceAfterSwap
/////////
function _poolDerivativesBPT(
    amp,
    balances,
    bptSupply,
    tokenIndexIn,
    is_first_derivative,
    is_BPT_out,
    wrt_out
) {
    const totalCoins = balances.length;
    const D = _invariant(amp, balances);
    let S = ZERO;
    let D_P = D.div(totalCoins);
    for (let i = 0; i < totalCoins; i++) {
        if (i != tokenIndexIn) {
            S = S.plus(balances[i]);
            D_P = D_P.times(D).div(balances[i].times(totalCoins));
        }
    }
    const x = balances[tokenIndexIn];
    const alpha = bnum(amp.toString()).times(totalCoins ** totalCoins); // = ampTimesNpowN
    const beta = alpha.times(S);
    const gamma = ONE.minus(alpha);
    const partial_x = bnum(2)
        .times(alpha)
        .times(x)
        .plus(beta)
        .plus(gamma.times(D));
    const minus_partial_D = D_P.times(totalCoins + 1).minus(gamma.times(x));
    const partial_D = ZERO.minus(minus_partial_D);
    let ans;
    if (is_first_derivative) {
        ans = partial_x.div(minus_partial_D).times(bptSupply).div(D);
    } else {
        const partial_xx = bnum(2).times(alpha);
        const partial_xD = gamma;
        const n_times_nplusone = totalCoins * (totalCoins + 1);
        const partial_DD = ZERO.minus(D_P.times(n_times_nplusone).div(D));
        if (is_BPT_out) {
            const term1 = partial_xx.times(partial_D).div(partial_x.pow(2));
            const term2 = bnum(2).times(partial_xD).div(partial_x);
            const term3 = partial_DD.div(partial_D);
            ans = term1.minus(term2).plus(term3).times(D).div(bptSupply);
            if (wrt_out) {
                const D_prime = ZERO.minus(partial_x.div(partial_D));
                ans = ans.div(D_prime).times(D).div(bptSupply);
            }
        } else {
            ans = bnum(2)
                .times(partial_xD)
                .div(partial_D)
                .minus(partial_DD.times(partial_x).div(partial_D.pow(2)))
                .minus(partial_xx.div(partial_x));
            if (wrt_out) {
                ans = ans
                    .times(partial_x)
                    .div(minus_partial_D)
                    .times(bptSupply)
                    .div(D);
            }
        }
    }
    return ans;
}
// PairType = 'token->token'
// SwapType = 'swapExactIn'
function _spotPriceAfterSwapExactTokenInForTokenOut(amount, poolPairData) {
    const { amp, allBalances, tokenIndexIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(
        amount
            .times(constants.WeiPerEther.sub(swapFee).toString())
            .div(constants.WeiPerEther.toString())
    );
    balances[tokenIndexOut] = balances[tokenIndexOut].minus(
        _exactTokenInForTokenOut(amount, poolPairData)
    );
    let ans = _poolDerivatives(
        amp,
        balances,
        tokenIndexIn,
        tokenIndexOut,
        true,
        false
    );
    ans = ONE.div(
        ans
            .times(constants.WeiPerEther.sub(swapFee).toString())
            .div(constants.WeiPerEther.toString())
    );
    return ans;
}
// PairType = 'token->token'
// SwapType = 'swapExactOut'
function _spotPriceAfterSwapTokenInForExactTokenOut(amount, poolPairData) {
    const { amp, allBalances, tokenIndexIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    const _in = _tokenInForExactTokenOut(amount, poolPairData)
        .times(constants.WeiPerEther.sub(swapFee).toString())
        .div(constants.WeiPerEther.toString());
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(_in);
    balances[tokenIndexOut] = balances[tokenIndexOut].minus(amount);
    let ans = _poolDerivatives(
        amp,
        balances,
        tokenIndexIn,
        tokenIndexOut,
        true,
        true
    );
    ans = ONE.div(
        ans
            .times(constants.WeiPerEther.sub(swapFee).toString())
            .div(constants.WeiPerEther.toString())
    );
    return ans;
}
function _feeFactor(balances, tokenIndex, swapFee) {
    let sumBalances = ZERO;
    for (let i = 0; i < balances.length; i++) {
        sumBalances = sumBalances.plus(balances[i]);
    }
    const currentWeight = balances[tokenIndex].div(sumBalances);
    const tokenBalancePercentageExcess = ONE.minus(currentWeight);
    return ONE.minus(
        tokenBalancePercentageExcess
            .times(swapFee.toString())
            .div(constants.WeiPerEther.toString())
    );
}
// PairType = 'token->BPT'
// SwapType = 'swapExactIn'
function _spotPriceAfterSwapExactTokenInForBPTOut(amount, poolPairData) {
    const {
        amp,
        allBalances,
        virtualBptSupply,
        decimalsOut,
        tokenIndexIn,
        swapFee,
    } = poolPairData;
    const balances = [...allBalances];
    const feeFactor = _feeFactor(balances, tokenIndexIn, swapFee);
    let bnumBalanceOut = bnum(
        bignumber.formatFixed(virtualBptSupply, decimalsOut)
    );
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(
        amount.times(feeFactor)
    );
    bnumBalanceOut = bnumBalanceOut.plus(
        _exactTokenInForBPTOut(amount, poolPairData)
    );
    let ans = _poolDerivativesBPT(
        amp,
        balances,
        bnumBalanceOut,
        tokenIndexIn,
        true,
        true,
        false
    );
    ans = bnum(1).div(ans.times(feeFactor));
    return ans;
}
// PairType = 'token->BPT'
// SwapType = 'swapExactOut'
function _spotPriceAfterSwapTokenInForExactBPTOut(amount, poolPairData) {
    const {
        amp,
        allBalances,
        virtualBptSupply,
        tokenIndexIn,
        decimalsOut,
        swapFee,
    } = poolPairData;
    const balances = [...allBalances];
    const _in = _tokenInForExactBPTOut(amount, poolPairData);
    const feeFactor = _feeFactor(balances, tokenIndexIn, swapFee);
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(_in.times(feeFactor));
    let bnumBalanceOut = bnum(
        bignumber.formatFixed(virtualBptSupply, decimalsOut)
    );
    bnumBalanceOut = bnumBalanceOut.plus(amount);
    let ans = _poolDerivativesBPT(
        amp,
        balances,
        bnumBalanceOut,
        tokenIndexIn,
        true,
        true,
        true
    );
    ans = ONE.div(ans.times(feeFactor));
    return ans;
}
// PairType = 'BPT->token'
// SwapType = 'swapExactIn'
function _spotPriceAfterSwapExactBPTInForTokenOut(amount, poolPairData) {
    const {
        amp,
        allBalances,
        virtualBptSupply,
        tokenIndexOut,
        swapFee,
        decimalsIn,
    } = poolPairData;
    const balances = [...allBalances];
    const _out = _exactBPTInForTokenOut(amount, poolPairData);
    const feeFactor = _feeFactor(balances, tokenIndexOut, swapFee);
    let bnumBalanceIn = bnum(
        bignumber.formatFixed(virtualBptSupply, decimalsIn)
    );
    balances[tokenIndexOut] = balances[tokenIndexOut].minus(
        _out.div(feeFactor)
    );
    bnumBalanceIn = bnumBalanceIn.minus(amount);
    const ans = _poolDerivativesBPT(
        amp,
        balances,
        bnumBalanceIn,
        tokenIndexOut,
        true,
        false,
        false
    ).div(feeFactor);
    return ans;
}
// PairType = 'BPT->token'
// SwapType = 'swapExactOut'
function _spotPriceAfterSwapBPTInForExactTokenOut(amount, poolPairData) {
    const {
        amp,
        allBalances,
        virtualBptSupply,
        decimalsIn,
        tokenIndexOut,
        swapFee,
    } = poolPairData;
    const balances = [...allBalances];
    const feeFactor = _feeFactor(balances, tokenIndexOut, swapFee);
    balances[tokenIndexOut] = balances[tokenIndexOut].minus(
        amount.div(feeFactor)
    );
    let bnumBalanceIn = bnum(
        bignumber.formatFixed(virtualBptSupply, decimalsIn)
    );
    bnumBalanceIn = bnumBalanceIn.minus(
        _BPTInForExactTokenOut(amount, poolPairData)
    );
    const ans = _poolDerivativesBPT(
        amp,
        balances,
        bnumBalanceIn,
        tokenIndexOut,
        true,
        false,
        true
    ).div(feeFactor);
    return ans;
}
/////////
///  Derivatives of spotPriceAfterSwap
/////////
// PairType = 'token->token'
// SwapType = 'swapExactIn'
function _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(
    amount,
    poolPairData
) {
    const { amp, allBalances, tokenIndexIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(
        amount
            .times(constants.WeiPerEther.sub(swapFee).toString())
            .div(constants.WeiPerEther.toString())
    );
    balances[tokenIndexOut] = balances[tokenIndexOut].minus(
        _exactTokenInForTokenOut(amount, poolPairData)
    );
    return _poolDerivatives(
        amp,
        balances,
        tokenIndexIn,
        tokenIndexOut,
        false,
        false
    );
}
// PairType = 'token->token'
// SwapType = 'swapExactOut'
function _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(
    amount,
    poolPairData
) {
    const { amp, allBalances, tokenIndexIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    const bnumSwapFee = bnum(bignumber.formatFixed(swapFee, 18));
    const _in = _tokenInForExactTokenOut(amount, poolPairData).times(
        bnum(1).minus(bnumSwapFee)
    );
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(_in);
    balances[tokenIndexOut] = balances[tokenIndexOut].minus(amount);
    const feeFactor = bnum(1).minus(bnumSwapFee);
    return _poolDerivatives(
        amp,
        balances,
        tokenIndexIn,
        tokenIndexOut,
        false,
        true
    ).div(feeFactor);
}
// PairType = 'token->BPT'
// SwapType = 'swapExactIn'
function _derivativeSpotPriceAfterSwapExactTokenInForBPTOut(
    amount,
    poolPairData
) {
    const { amp, allBalances, balanceOut, decimalsOut, tokenIndexIn, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    const feeFactor = _feeFactor(balances, tokenIndexIn, swapFee);
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(
        amount.times(feeFactor)
    );
    let bnumBalanceOut = bnum(bignumber.formatFixed(balanceOut, decimalsOut));
    bnumBalanceOut = bnumBalanceOut.plus(
        _exactTokenInForBPTOut(amount, poolPairData)
    );
    const ans = _poolDerivativesBPT(
        amp,
        balances,
        bnumBalanceOut,
        tokenIndexIn,
        false,
        true,
        false
    );
    return ans;
}
// PairType = 'token->BPT'
// SwapType = 'swapExactOut'
function _derivativeSpotPriceAfterSwapTokenInForExactBPTOut(
    amount,
    poolPairData
) {
    const { amp, allBalances, balanceOut, decimalsOut, tokenIndexIn, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    const _in = _tokenInForExactBPTOut(amount, poolPairData);
    const feeFactor = _feeFactor(balances, tokenIndexIn, swapFee);
    balances[tokenIndexIn] = balances[tokenIndexIn].plus(_in.times(feeFactor));
    let bnumBalanceOut = bnum(bignumber.formatFixed(balanceOut, decimalsOut));
    bnumBalanceOut = bnumBalanceOut.plus(amount);
    return _poolDerivativesBPT(
        amp,
        balances,
        bnumBalanceOut,
        tokenIndexIn,
        false,
        true,
        true
    ).div(feeFactor);
}
// PairType = 'BPT->token'
// SwapType = 'swapExactOut'
function _derivativeSpotPriceAfterSwapBPTInForExactTokenOut(
    amount,
    poolPairData
) {
    const { amp, allBalances, balanceIn, decimalsIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    const _in = _BPTInForExactTokenOut(amount, poolPairData);
    const feeFactor = _feeFactor(balances, tokenIndexOut, swapFee);
    balances[tokenIndexOut] = balances[tokenIndexOut].minus(
        amount.div(feeFactor)
    );
    let bnumBalanceIn = bnum(bignumber.formatFixed(balanceIn, decimalsIn));
    bnumBalanceIn = bnumBalanceIn.minus(_in);
    const ans = _poolDerivativesBPT(
        amp,
        balances,
        bnumBalanceIn,
        tokenIndexOut,
        false,
        false,
        true
    );
    return ans.div(feeFactor.pow(2));
}
// PairType = 'BPT->token'
// SwapType = 'swapExactIn'
function _derivativeSpotPriceAfterSwapExactBPTInForTokenOut(
    amount,
    poolPairData
) {
    const { amp, allBalances, balanceIn, decimalsIn, tokenIndexOut, swapFee } =
        poolPairData;
    const balances = [...allBalances];
    const _out = _exactBPTInForTokenOut(amount, poolPairData);
    const feeFactor = _feeFactor(balances, tokenIndexOut, swapFee);
    balances[tokenIndexOut] = balances[tokenIndexOut].minus(
        _out.div(feeFactor)
    );
    let bnumBalanceIn = bnum(bignumber.formatFixed(balanceIn, decimalsIn));
    bnumBalanceIn = bnumBalanceIn.minus(amount);
    const ans = _poolDerivativesBPT(
        amp,
        balances,
        bnumBalanceIn,
        tokenIndexOut,
        false,
        false,
        false
    );
    return ans.div(feeFactor);
}

var PairTypes;
(function (PairTypes) {
    PairTypes[(PairTypes['BptToToken'] = 0)] = 'BptToToken';
    PairTypes[(PairTypes['TokenToBpt'] = 1)] = 'TokenToBpt';
    PairTypes[(PairTypes['TokenToToken'] = 2)] = 'TokenToToken';
})(PairTypes || (PairTypes = {}));
class PhantomStablePool {
    constructor(id, address, amp, swapFee, totalShares, tokens, tokensList) {
        this.poolType = exports.PoolTypes.MetaStable;
        this.limitAmountCache = new Map();
        this.ALMOST_ONE = bignumber.parseFixed('0.99', 18);
        // Used for VirutalBpt and can be removed if SG is updated with VirtualBpt value
        this.MAX_TOKEN_BALANCE = bignumber.BigNumber.from('2')
            .pow('112')
            .sub('1');
        this.id = id;
        this.address = address;
        this.amp = bignumber.parseFixed(amp, PhantomStablePool.AMP_DECIMALS);
        this.swapFee = bignumber.parseFixed(swapFee, 18);
        this.totalShares = bignumber.parseFixed(totalShares, 18);
        this.tokens = tokens;
        this.tokensList = tokensList;
    }
    static fromPool(pool) {
        if (!pool.amp) throw new Error('PhantomStablePool missing amp factor');
        return new PhantomStablePool(
            pool.id,
            pool.address,
            pool.amp,
            pool.swapFee,
            pool.totalShares,
            pool.tokens,
            pool.tokensList
        );
    }
    // Remove BPT from Balances and update indices
    static removeBPT(poolPairData) {
        const poolPairDataNoBpt = cloneDeep(poolPairData);
        const bptIndex = poolPairData.bptIndex;
        if (bptIndex != -1) {
            poolPairDataNoBpt.allBalances.splice(bptIndex, 1);
            poolPairDataNoBpt.allBalancesScaled.splice(bptIndex, 1);
            if (bptIndex < poolPairData.tokenIndexIn)
                poolPairDataNoBpt.tokenIndexIn -= 1;
            if (bptIndex < poolPairData.tokenIndexOut)
                poolPairDataNoBpt.tokenIndexOut -= 1;
        }
        return poolPairDataNoBpt;
    }
    setTypeForSwap(type) {
        this.swapPairType = type;
    }
    parsePoolPairData(tokenIn, tokenOut) {
        const tokenIndexIn = this.tokens.findIndex(
            (t) => address.getAddress(t.address) === address.getAddress(tokenIn)
        );
        if (tokenIndexIn < 0) throw 'Pool does not contain tokenIn';
        const tI = this.tokens[tokenIndexIn];
        const balanceIn = bnum(tI.balance)
            .times(bnum(tI.priceRate))
            .dp(tI.decimals)
            .toString();
        const decimalsIn = tI.decimals;
        const tokenInPriceRate = bignumber.parseFixed(tI.priceRate, 18);
        const tokenIndexOut = this.tokens.findIndex(
            (t) =>
                address.getAddress(t.address) === address.getAddress(tokenOut)
        );
        if (tokenIndexOut < 0) throw 'Pool does not contain tokenOut';
        const tO = this.tokens[tokenIndexOut];
        const balanceOut = bnum(tO.balance)
            .times(bnum(tO.priceRate))
            .dp(tO.decimals)
            .toString();
        const decimalsOut = tO.decimals;
        const tokenOutPriceRate = bignumber.parseFixed(tO.priceRate, 18);
        // Get all token balances
        const allBalances = this.tokens.map(({ balance, priceRate }) =>
            bnum(balance).times(priceRate)
        );
        const allBalancesScaled = this.tokens.map(({ balance, priceRate }) =>
            bignumber
                .parseFixed(balance, 18)
                .mul(bignumber.parseFixed(priceRate, 18))
                .div(constants.WeiPerEther)
        );
        // Phantom pools allow trading between token and pool BPT
        let pairType;
        if (isSameAddress(tokenIn, this.address)) {
            pairType = PairTypes.BptToToken;
        } else if (isSameAddress(tokenOut, this.address)) {
            pairType = PairTypes.TokenToBpt;
        } else {
            pairType = PairTypes.TokenToToken;
        }
        const bptIndex = this.tokensList.indexOf(this.address);
        // VirtualBPTSupply must be used for the maths
        // TO DO - SG should be updated to so that totalShares should return VirtualSupply
        const virtualBptSupply = this.MAX_TOKEN_BALANCE.sub(
            allBalancesScaled[bptIndex]
        );
        const poolPairData = {
            id: this.id,
            address: this.address,
            poolType: this.poolType,
            pairType: pairType,
            bptIndex: bptIndex,
            tokenIn: tokenIn,
            tokenOut: tokenOut,
            balanceIn: bignumber.parseFixed(balanceIn, decimalsIn),
            balanceOut: bignumber.parseFixed(balanceOut, decimalsOut),
            swapFee: this.swapFee,
            allBalances,
            allBalancesScaled,
            amp: this.amp,
            tokenIndexIn: tokenIndexIn,
            tokenIndexOut: tokenIndexOut,
            decimalsIn: Number(decimalsIn),
            decimalsOut: Number(decimalsOut),
            tokenInPriceRate,
            tokenOutPriceRate,
            virtualBptSupply,
        };
        return PhantomStablePool.removeBPT(poolPairData);
    }
    getNormalizedLiquidity(poolPairData) {
        // This is an approximation as the actual normalized liquidity is a lot more complicated to calculate
        return bnum(
            bignumber.formatFixed(
                poolPairData.balanceOut.mul(poolPairData.amp),
                poolPairData.decimalsOut + PhantomStablePool.AMP_DECIMALS
            )
        );
    }
    getLimitAmountSwap(poolPairData, swapType) {
        const cacheKey = getPoolPairDataCacheKey(poolPairData, swapType);
        const cached = this.limitAmountCache.get(cacheKey);
        if (cached) {
            return cached;
        }
        let value;
        // PoolPairData is using balances that have already been exchanged so need to convert back
        if (swapType === exports.SwapTypes.SwapExactIn) {
            // Return max valid amount of tokenIn
            // As an approx - use almost the total balance of token out as we can add any amount of tokenIn and expect some back
            value = bnum(
                bignumber.formatFixed(
                    poolPairData.balanceOut
                        .mul(this.ALMOST_ONE)
                        .div(poolPairData.tokenOutPriceRate),
                    poolPairData.decimalsOut
                )
            );
        } else {
            // Return max amount of tokenOut - approx is almost all balance
            value = bnum(
                bignumber.formatFixed(
                    poolPairData.balanceOut
                        .mul(this.ALMOST_ONE)
                        .div(poolPairData.tokenOutPriceRate),
                    poolPairData.decimalsOut
                )
            );
        }
        this.limitAmountCache.set(cacheKey, value);
        return value;
    }
    // Updates the balance of a given token for the pool
    updateTokenBalanceForPool(token, newBalance) {
        // token is underlying in the pool
        const T = this.tokens.find((t) => isSameAddress(t.address, token));
        if (!T) throw Error('Pool does not contain this token');
        T.balance = bignumber.formatFixed(newBalance, T.decimals);
    }
    _exactTokenInForTokenOut(poolPairData, amount) {
        try {
            if (amount.isZero()) return ZERO;
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            // In Phantom Pools every time there is a swap (token per token, bpt per token or token per bpt), we substract the fee from the amount in
            const amtWithFeeEvm = this.subtractSwapFeeAmount(
                bignumber.parseFixed(amount.dp(18).toString(), 18),
                poolPairData.swapFee
            );
            const amountConvertedEvm = amtWithFeeEvm
                .mul(poolPairData.tokenInPriceRate)
                .div(constants.WeiPerEther);
            let returnEvm;
            if (poolPairData.pairType === PairTypes.TokenToBpt) {
                const amountsInBigInt = Array(
                    poolPairData.allBalancesScaled.length
                ).fill(BigInt(0));
                amountsInBigInt[poolPairData.tokenIndexIn] =
                    amountConvertedEvm.toBigInt();
                returnEvm = _calcBptOutGivenExactTokensIn(
                    this.amp.toBigInt(),
                    poolPairData.allBalancesScaled.map((b) => b.toBigInt()),
                    amountsInBigInt,
                    poolPairData.virtualBptSupply.toBigInt(),
                    BigInt(0)
                );
            } else if (poolPairData.pairType === PairTypes.BptToToken) {
                returnEvm = _calcTokenOutGivenExactBptIn(
                    this.amp.toBigInt(),
                    poolPairData.allBalancesScaled.map((b) => b.toBigInt()),
                    poolPairData.tokenIndexOut,
                    amountConvertedEvm.toBigInt(),
                    poolPairData.virtualBptSupply.toBigInt(),
                    BigInt(0)
                );
            } else {
                returnEvm = _calcOutGivenIn(
                    this.amp.toBigInt(),
                    poolPairData.allBalancesScaled.map((b) => b.toBigInt()),
                    poolPairData.tokenIndexIn,
                    poolPairData.tokenIndexOut,
                    amountConvertedEvm.toBigInt(),
                    BigInt(0)
                );
            }
            const returnEvmWithRate = bignumber.BigNumber.from(returnEvm)
                .mul(constants.WeiPerEther)
                .div(poolPairData.tokenOutPriceRate);
            // Return human scaled
            return bnum(bignumber.formatFixed(returnEvmWithRate, 18));
        } catch (err) {
            console.log(`PhantomStable _evmoutGivenIn: ${err.message}`);
            return ZERO;
        }
    }
    _tokenInForExactTokenOut(poolPairData, amount) {
        try {
            if (amount.isZero()) return ZERO;
            // All values should use 1e18 fixed point
            // i.e. 1USDC => 1e18 not 1e6
            const amountConvertedEvm = bignumber
                .parseFixed(amount.dp(18).toString(), 18)
                .mul(poolPairData.tokenOutPriceRate)
                .div(constants.WeiPerEther);
            let returnEvm;
            if (poolPairData.pairType === PairTypes.TokenToBpt) {
                returnEvm = _calcTokenInGivenExactBptOut(
                    this.amp.toBigInt(),
                    poolPairData.allBalancesScaled.map((b) => b.toBigInt()),
                    poolPairData.tokenIndexIn,
                    amountConvertedEvm.toBigInt(),
                    poolPairData.virtualBptSupply.toBigInt(),
                    BigInt(0)
                );
            } else if (poolPairData.pairType === PairTypes.BptToToken) {
                const amountsOutBigInt = Array(
                    poolPairData.allBalancesScaled.length
                ).fill(BigInt(0));
                amountsOutBigInt[poolPairData.tokenIndexOut] =
                    amountConvertedEvm.toBigInt();
                returnEvm = _calcBptInGivenExactTokensOut(
                    this.amp.toBigInt(),
                    poolPairData.allBalancesScaled.map((b) => b.toBigInt()),
                    amountsOutBigInt,
                    poolPairData.virtualBptSupply.toBigInt(),
                    BigInt(0) // Fee is handled above
                );
            } else {
                returnEvm = _calcInGivenOut(
                    this.amp.toBigInt(),
                    poolPairData.allBalancesScaled.map((b) => b.toBigInt()),
                    poolPairData.tokenIndexIn,
                    poolPairData.tokenIndexOut,
                    amountConvertedEvm.toBigInt(),
                    BigInt(0) // Fee is handled above
                );
            }
            // In Phantom Pools every time there is a swap (token per token, bpt per token or token per bpt), we substract the fee from the amount in
            const returnEvmWithRate = bignumber.BigNumber.from(returnEvm)
                .mul(constants.WeiPerEther)
                .div(poolPairData.tokenInPriceRate);
            const returnEvmWithFee = this.addSwapFeeAmount(
                returnEvmWithRate,
                poolPairData.swapFee
            );
            // return human number
            return bnum(bignumber.formatFixed(returnEvmWithFee, 18));
        } catch (err) {
            console.error(`PhantomStable _evminGivenOut: ${err.message}`);
            return ZERO;
        }
    }
    // this is the multiplicative inverse of the derivative of _exactTokenInForTokenOut
    _spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, amount) {
        const priceRateIn = bignumber.formatFixed(
            poolPairData.tokenInPriceRate,
            18
        );
        const priceRateOut = bignumber.formatFixed(
            poolPairData.tokenOutPriceRate,
            18
        );
        const amountConverted = amount.times(
            bignumber.formatFixed(poolPairData.tokenInPriceRate, 18)
        );
        let result;
        if (poolPairData.pairType === PairTypes.TokenToBpt) {
            result = _spotPriceAfterSwapExactTokenInForBPTOut(
                amountConverted,
                poolPairData
            );
        } else if (poolPairData.pairType === PairTypes.BptToToken) {
            result = _spotPriceAfterSwapExactBPTInForTokenOut(
                amountConverted,
                poolPairData
            );
        } else {
            result = _spotPriceAfterSwapExactTokenInForTokenOut(
                amountConverted,
                poolPairData
            );
        }
        return result.div(priceRateIn).times(priceRateOut);
    }
    // this is the derivative of _tokenInForExactTokenOut
    _spotPriceAfterSwapTokenInForExactTokenOut(poolPairData, amount) {
        const priceRateIn = bignumber.formatFixed(
            poolPairData.tokenInPriceRate,
            18
        );
        const priceRateOut = bignumber.formatFixed(
            poolPairData.tokenOutPriceRate,
            18
        );
        const amountConverted = amount.times(
            bignumber.formatFixed(poolPairData.tokenOutPriceRate, 18)
        );
        let result;
        if (poolPairData.pairType === PairTypes.TokenToBpt) {
            result = _spotPriceAfterSwapTokenInForExactBPTOut(
                amountConverted,
                poolPairData
            );
        } else if (poolPairData.pairType === PairTypes.BptToToken) {
            result = _spotPriceAfterSwapBPTInForExactTokenOut(
                amountConverted,
                poolPairData
            );
        } else {
            result = _spotPriceAfterSwapTokenInForExactTokenOut(
                amountConverted,
                poolPairData
            );
        }
        return result.div(priceRateIn).times(priceRateOut);
    }
    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(poolPairData, amount) {
        const priceRateOut = bignumber.formatFixed(
            poolPairData.tokenOutPriceRate,
            18
        );
        const amountConverted = amount.times(
            bignumber.formatFixed(poolPairData.tokenInPriceRate, 18)
        );
        let result;
        if (poolPairData.pairType === PairTypes.TokenToBpt) {
            result = _derivativeSpotPriceAfterSwapExactTokenInForBPTOut(
                amountConverted,
                poolPairData
            );
        } else if (poolPairData.pairType === PairTypes.BptToToken) {
            result = _derivativeSpotPriceAfterSwapExactBPTInForTokenOut(
                amountConverted,
                poolPairData
            );
        } else {
            result = _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(
                amountConverted,
                poolPairData
            );
        }
        return result.times(priceRateOut);
    }
    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(poolPairData, amount) {
        const priceRateIn = bignumber.formatFixed(
            poolPairData.tokenInPriceRate,
            18
        );
        const priceRateOut = bignumber.formatFixed(
            poolPairData.tokenOutPriceRate,
            18
        );
        const amountConverted = amount.times(
            bignumber.formatFixed(poolPairData.tokenOutPriceRate, 18)
        );
        let result;
        if (poolPairData.pairType === PairTypes.TokenToBpt) {
            result = _derivativeSpotPriceAfterSwapTokenInForExactBPTOut(
                amountConverted,
                poolPairData
            );
        } else if (poolPairData.pairType === PairTypes.BptToToken) {
            result = _derivativeSpotPriceAfterSwapBPTInForExactTokenOut(
                amountConverted,
                poolPairData
            );
        } else {
            result = _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(
                amountConverted,
                poolPairData
            );
        }
        return result.div(priceRateIn).times(priceRateOut).times(priceRateOut);
    }
    subtractSwapFeeAmount(amount, swapFee) {
        // https://github.com/balancer-labs/balancer-v2-monorepo/blob/c18ff2686c61a8cbad72cdcfc65e9b11476fdbc3/pkg/pool-utils/contracts/BasePool.sol#L466
        const feeAmount = amount.mul(swapFee).div(constants.WeiPerEther);
        return amount.sub(feeAmount);
    }
    addSwapFeeAmount(amount, swapFee) {
        // https://github.com/balancer-labs/balancer-v2-monorepo/blob/c18ff2686c61a8cbad72cdcfc65e9b11476fdbc3/pkg/pool-utils/contracts/BasePool.sol#L458
        const feeAmount = constants.WeiPerEther.sub(swapFee);
        return amount
            .mul(constants.WeiPerEther)
            .add(feeAmount.sub(1))
            .div(feeAmount);
    }
}
PhantomStablePool.AMP_DECIMALS = 3;

function parseNewPool(pool, currentBlockTimestamp = 0) {
    // We're not interested in any pools which don't allow swapping
    if (!pool.swapEnabled) return undefined;
    let newPool;
    try {
        if (
            pool.poolType === 'Weighted' ||
            pool.poolType === 'LiquidityBootstrapping' ||
            pool.poolType === 'Investment'
        ) {
            newPool = WeightedPool.fromPool(pool);
        } else if (pool.poolType === 'Stable') {
            newPool = StablePool.fromPool(pool);
        } else if (pool.poolType === 'MetaStable') {
            newPool = MetaStablePool.fromPool(pool);
        } else if (pool.poolType === 'Element') {
            newPool = ElementPool.fromPool(pool);
            newPool.setCurrentBlockTimestamp(currentBlockTimestamp);
        } else if (pool.poolType.includes('Linear'))
            newPool = LinearPool.fromPool(pool);
        else if (pool.poolType === 'StablePhantom')
            newPool = PhantomStablePool.fromPool(pool);
        else {
            console.error(
                `Unknown pool type or type field missing: ${pool.poolType} ${pool.id}`
            );
            return undefined;
        }
    } catch (err) {
        console.error(`parseNewPool: ${err.message}`);
        return undefined;
    }
    return newPool;
}
// TODO: Add cases for pairType = [BTP->token, token->BTP] and poolType = [weighted, stable]
function getOutputAmountSwap(pool, poolPairData, swapType, amount) {
    // TODO: check if necessary to check if amount > limitAmount
    if (swapType === exports.SwapTypes.SwapExactIn) {
        if (
            poolPairData.poolType !== exports.PoolTypes.Linear &&
            poolPairData.balanceIn.isZero()
        ) {
            return ZERO;
        } else {
            return pool._exactTokenInForTokenOut(poolPairData, amount);
        }
    } else {
        if (poolPairData.balanceOut.isZero()) {
            return ZERO;
        } else if (
            scale(amount, poolPairData.decimalsOut).gte(
                poolPairData.balanceOut.toString()
            )
        ) {
            return INFINITY;
        } else {
            return pool._tokenInForExactTokenOut(poolPairData, amount);
        }
    }
}

// priceErrorTolerance is how close we expect prices after swap to be in SOR
// suggested paths
const priceErrorTolerance = process.env.PRICE_ERROR_TOLERANCE || '0.00001';
const PRICE_ERROR_TOLERANCE = new BigNumber(priceErrorTolerance);
// infinitesimal is an amount that's used to initialize swap amounts so they are
// not zero or the path's limit.
// It's also used in the calculation of derivatives in pool maths
// const infinitesimal: string = process.env.INFINITESIMAL || '0.000001';
const infinitesimal = '0.01'; // Increasing INFINITESIMAL to '0.01' to test derivative sensitivity
const INFINITESIMAL = new BigNumber(infinitesimal);

function getHighestLimitAmountsForPaths(paths, maxPools) {
    if (paths.length === 0) return [];
    const limitAmounts = [];
    for (let i = 0; i < maxPools; i++) {
        if (i < paths.length) {
            const limitAmount = paths[i].limitAmount;
            limitAmounts.push(limitAmount);
        }
    }
    return limitAmounts;
}
function getEffectivePriceSwapForPath(path, swapType, amount, inputDecimals) {
    if (amount.lt(INFINITESIMAL)) {
        // Return spot price as code below would be 0/0 = undefined
        // or small_amount/0 or 0/small_amount which would cause bugs
        return getSpotPriceAfterSwapForPath(path, swapType, amount);
    }
    const outputAmountSwap = getOutputAmountSwapForPath(
        path,
        swapType,
        amount,
        inputDecimals
    );
    if (swapType === exports.SwapTypes.SwapExactIn) {
        return amount.div(outputAmountSwap); // amountIn/AmountOut
    } else {
        return outputAmountSwap.div(amount); // amountIn/AmountOut
    }
}
function getOutputAmountSwapForPath(path, swapType, amount, inputDecimals) {
    // First of all check if the amount is above limit, if so, return 0 for
    // 'swapExactIn' or Inf for swapExactOut
    if (
        amount.gt(bnum(bignumber.formatFixed(path.limitAmount, inputDecimals)))
    ) {
        if (swapType === exports.SwapTypes.SwapExactIn) {
            return ZERO;
        } else {
            return INFINITY;
        }
    }
    const amounts = getAmounts(path, swapType, amount);
    if (swapType === exports.SwapTypes.SwapExactIn) {
        return amounts[amounts.length - 1];
    } else {
        return amounts[0];
    }
}
function getAmounts(path, swapType, amount) {
    const pools = path.pools;
    const poolPairData = path.poolPairData;
    const ans = [amount];
    if (swapType === exports.SwapTypes.SwapExactIn) {
        for (let i = 0; i < pools.length; i++) {
            ans.push(
                getOutputAmountSwap(
                    pools[i],
                    poolPairData[i],
                    swapType,
                    ans[ans.length - 1]
                )
            );
        }
    } else {
        const n = pools.length;
        for (let i = 0; i < pools.length; i++) {
            ans.unshift(
                getOutputAmountSwap(
                    pools[n - 1 - i],
                    poolPairData[n - 1 - i],
                    swapType,
                    ans[0]
                )
            );
        }
    }
    return ans;
}
function getProdsSpotPrices(path, swapType, amounts) {
    const pools = path.pools;
    const poolPairData = path.poolPairData;
    const ans = [bnum(1)];
    const n = pools.length;
    let oneIfExactOut = 0;
    if (swapType === exports.SwapTypes.SwapExactOut) oneIfExactOut = 1;
    for (let i = 0; i < pools.length; i++) {
        ans.unshift(
            getSpotPriceAfterSwap(
                pools[n - 1 - i],
                poolPairData[n - 1 - i],
                swapType,
                amounts[n - 1 - i + oneIfExactOut]
            ).times(ans[0])
        );
    }
    return ans;
}
function getProdsFirstSpotPrices(path, swapType, amounts) {
    if (swapType !== exports.SwapTypes.SwapExactOut)
        // Throw error?
        return [bnum(0)];
    const pools = path.pools;
    const poolPairData = path.poolPairData;
    const ans = [bnum(1)];
    for (let i = 0; i < pools.length; i++) {
        ans.push(
            getSpotPriceAfterSwap(
                pools[i],
                poolPairData[i],
                swapType,
                amounts[i + 1]
            ).times(ans[ans.length - 1])
        );
    }
    return ans;
}
function getSpotPriceAfterSwapForPath(path, swapType, amount) {
    const amounts = getAmounts(path, swapType, amount);
    const prodsSpotPrices = getProdsSpotPrices(path, swapType, amounts);
    return prodsSpotPrices[0];
}
// TODO: Add cases for pairType = [BTP->token, token->BTP] and poolType = [weighted, stable]
function getSpotPriceAfterSwap(pool, poolPairData, swapType, amount) {
    // TODO: check if necessary to check if amount > limitAmount
    if (swapType === exports.SwapTypes.SwapExactIn) {
        if (poolPairData.balanceIn.isZero()) {
            return ZERO;
        }
    } else {
        if (poolPairData.balanceOut.isZero()) {
            return ZERO;
        }
        if (
            scale(amount, poolPairData.decimalsOut).gte(
                poolPairData.balanceOut.toString()
            )
        )
            return INFINITY;
    }
    if (swapType === exports.SwapTypes.SwapExactIn) {
        return pool._spotPriceAfterSwapExactTokenInForTokenOut(
            poolPairData,
            amount
        );
    } else {
        return pool._spotPriceAfterSwapTokenInForExactTokenOut(
            poolPairData,
            amount
        );
    }
}
function getDerivativeSpotPriceAfterSwapForPath(path, swapType, amount) {
    const poolPairData = path.poolPairData;
    const pools = path.pools;
    const n = pools.length;
    const amounts = getAmounts(path, swapType, amount);
    const prodsSpotPrices = getProdsSpotPrices(path, swapType, amounts);
    let ans = bnum(0);
    if (swapType === exports.SwapTypes.SwapExactIn) {
        for (let i = 0; i < n; i++) {
            const newTerm = getDerivativeSpotPriceAfterSwap(
                pools[i],
                poolPairData[i],
                swapType,
                amounts[i]
            ).times(prodsSpotPrices[i + 1]);
            ans = ans.plus(newTerm);
        }
    } else {
        const prodsFirstSpotPrices = getProdsFirstSpotPrices(
            path,
            swapType,
            amounts
        );
        for (let i = 0; i < n; i++) {
            let newTerm = getDerivativeSpotPriceAfterSwap(
                pools[i],
                poolPairData[i],
                swapType,
                amounts[i + 1]
            ).times(prodsSpotPrices[i + 1]);
            newTerm = newTerm
                .times(prodsSpotPrices[i + 1])
                .times(prodsFirstSpotPrices[i]);
            // The following option is more efficient but returns less precision due to the division
            /*          let thisSpotPrice = getSpotPriceAfterSwap(pools[i], poolPairData[i], swapType, amounts[i + 1]);
            newTerm = newTerm.div(thisSpotPrice).times(prodsSpotPrices[0]);*/
            ans = ans.plus(newTerm);
        }
    }
    return ans;
}
// TODO: Add cases for pairType = [BPT->token, token->BPT] and poolType = [weighted, stable]
function getDerivativeSpotPriceAfterSwap(pool, poolPairData, swapType, amount) {
    // TODO: check if necessary to check if amount > limitAmount
    if (swapType === exports.SwapTypes.SwapExactIn) {
        if (poolPairData.balanceIn.isZero()) {
            return ZERO;
        }
    } else {
        if (poolPairData.balanceOut.isZero()) {
            return ZERO;
        }
        if (
            scale(amount, poolPairData.decimalsOut).gte(
                poolPairData.balanceOut.toString()
            )
        )
            return INFINITY;
    }
    if (swapType === exports.SwapTypes.SwapExactIn) {
        return pool._derivativeSpotPriceAfterSwapExactTokenInForTokenOut(
            poolPairData,
            amount
        );
    } else {
        return pool._derivativeSpotPriceAfterSwapTokenInForExactTokenOut(
            poolPairData,
            amount
        );
    }
}
// We need do pass 'pools' here because this function has to update the pools state
// in case a pool is used twice in two different paths
function EVMgetOutputAmountSwap(pool, poolPairData, swapType, amount) {
    //we recalculate the pool pair data since balance updates are not reflected immediately in cached poolPairData
    poolPairData = pool.parsePoolPairData(
        poolPairData.tokenIn,
        poolPairData.tokenOut
    );
    const { balanceIn, balanceOut, tokenIn, tokenOut } = poolPairData;
    let returnAmount;
    if (swapType === exports.SwapTypes.SwapExactIn) {
        if (
            poolPairData.poolType !== exports.PoolTypes.Linear &&
            poolPairData.balanceIn.isZero()
        ) {
            return ZERO;
        }
    } else {
        if (poolPairData.balanceOut.isZero()) {
            return ZERO;
        }
        if (
            scale(amount, poolPairData.decimalsOut).gte(
                poolPairData.balanceOut.toString()
            )
        )
            return INFINITY;
    }
    if (swapType === exports.SwapTypes.SwapExactIn) {
        // TODO we will be able to remove pooltype check once Element EVM maths is available
        if (
            pool.poolType === exports.PoolTypes.Weighted ||
            pool.poolType === exports.PoolTypes.Stable ||
            pool.poolType === exports.PoolTypes.MetaStable ||
            pool.poolType === exports.PoolTypes.Linear
        ) {
            // Will accept/return normalised values
            returnAmount = pool._exactTokenInForTokenOut(poolPairData, amount);
        } else if (pool.poolType === exports.PoolTypes.Element) {
            // TODO this will just be part of above once maths available
            returnAmount = getOutputAmountSwap(
                pool,
                poolPairData,
                swapType,
                amount
            );
        } else {
            throw Error('Unsupported swap');
        }
    } else {
        // TODO we will be able to remove pooltype check once Element EVM maths is available
        if (
            pool.poolType === exports.PoolTypes.Weighted ||
            pool.poolType === exports.PoolTypes.Stable ||
            pool.poolType === exports.PoolTypes.MetaStable ||
            pool.poolType === exports.PoolTypes.Linear
        ) {
            returnAmount = pool._tokenInForExactTokenOut(poolPairData, amount);
        } else if (pool.poolType === exports.PoolTypes.Element) {
            // TODO this will just be part of above once maths available
            returnAmount = getOutputAmountSwap(
                pool,
                poolPairData,
                swapType,
                amount
            );
        } else {
            throw Error('Unsupported swap');
        }
    }
    const amountIn =
        swapType === exports.SwapTypes.SwapExactIn ? amount : returnAmount;
    const amountOut =
        swapType === exports.SwapTypes.SwapExactIn ? returnAmount : amount;
    // Update balances of tokenIn and tokenOut
    pool.updateTokenBalanceForPool(
        tokenIn,
        balanceIn.add(
            bignumber.parseFixed(
                amountIn.dp(poolPairData.decimalsIn).toString(),
                poolPairData.decimalsIn
            )
        )
    );
    pool.updateTokenBalanceForPool(
        tokenOut,
        balanceOut.sub(
            bignumber.parseFixed(
                amountOut.dp(poolPairData.decimalsOut).toString(),
                poolPairData.decimalsOut
            )
        )
    );
    return returnAmount;
}

const optimizeSwapAmounts = (
    paths,
    swapType,
    totalSwapAmount,
    initialSwapAmounts,
    highestLimitAmounts,
    inputDecimals,
    outputDecimals,
    initialNumPaths,
    maxPools,
    costReturnToken
) => {
    // First get the optimal totalReturn to trade 'totalSwapAmount' with
    // one path only (b=1). Then increase the number of pools as long as
    // improvementCondition is true (see more information below)
    let bestTotalReturnConsideringFees =
        swapType === exports.SwapTypes.SwapExactIn
            ? INFINITY.times(-1)
            : INFINITY;
    let bestSwapAmounts = [];
    let bestPaths = [];
    let swapAmounts = initialSwapAmounts.map((amount) =>
        bnum(bignumber.formatFixed(amount, inputDecimals))
    );
    for (let b = initialNumPaths; b <= paths.length; b++) {
        if (b != initialNumPaths) {
            // We already had a previous iteration and are adding another pool this new iteration
            // swapAmounts.push(ONE); // Initialize new swapAmount with 1 wei to
            // make sure that it won't be considered as a non viable amount (which would
            // be the case if it started at 0)
            // Start new path at 1/b of totalSwapAmount (i.e. if this is the 5th pool, we start with
            // 20% of the totalSwapAmount for this new swapAmount added). However, we need to make sure
            // that this value is not higher then the bth limit of the paths available otherwise there
            // won't be any possible path to process this swapAmount:
            const humanTotalSwapAmount = bignumber.formatFixed(
                totalSwapAmount,
                inputDecimals
            );
            const newSwapAmount = BigNumber.min.apply(null, [
                bnum(humanTotalSwapAmount).times(bnum(1 / b)),
                bignumber.formatFixed(
                    highestLimitAmounts[b - 1],
                    inputDecimals
                ),
            ]);
            // We need then to multiply all current
            // swapAmounts by 1-newSwapAmount/totalSwapAmount.
            swapAmounts.forEach((swapAmount, i) => {
                swapAmounts[i] = swapAmount.times(
                    ONE.minus(newSwapAmount.div(humanTotalSwapAmount))
                );
            });
            swapAmounts.push(newSwapAmount);
        }
        const { paths: selectedPaths, swapAmounts: bestAmounts } =
            optimizePathDistribution(
                paths,
                swapType,
                totalSwapAmount,
                swapAmounts,
                inputDecimals
            );
        swapAmounts = bestAmounts;
        const totalReturn = calcTotalReturn(
            selectedPaths,
            swapType,
            swapAmounts,
            inputDecimals
        );
        // Calculates the number of pools in all the paths to include the gas costs
        const totalNumberOfPools = selectedPaths.reduce(
            (acc, path) => acc + path.swaps.length,
            0
        );
        // improvementCondition is true if we are improving the totalReturn
        // Notice that totalReturn has to be maximized for 'swapExactIn'
        // and MINIMIZED for 'swapExactOut'
        // This is because for the case of 'swapExactOut', totalReturn means the
        // amount of tokenIn needed to buy totalSwapAmount of tokenOut
        const costReturnTokenHuman = bignumber.formatFixed(
            costReturnToken,
            outputDecimals
        );
        let improvementCondition = false;
        let totalReturnConsideringFees = ZERO;
        const gasFees = bnum(totalNumberOfPools).times(costReturnTokenHuman);
        if (swapType === exports.SwapTypes.SwapExactIn) {
            totalReturnConsideringFees = totalReturn.minus(gasFees);
            improvementCondition = totalReturnConsideringFees.isGreaterThan(
                bestTotalReturnConsideringFees
            );
        } else {
            totalReturnConsideringFees = totalReturn.plus(gasFees);
            improvementCondition = totalReturnConsideringFees.isLessThan(
                bestTotalReturnConsideringFees
            );
        }
        // Stop if improvement has stopped
        if (!improvementCondition) break;
        bestSwapAmounts = [...swapAmounts]; // Copy to avoid linking variables
        bestPaths = [...selectedPaths];
        bestTotalReturnConsideringFees = totalReturnConsideringFees;
        // Stop if max number of pools has been reached
        if (totalNumberOfPools >= maxPools) break;
    }
    // 0 swap amounts can occur due to rounding errors but we don't want to pass those on so filter out
    bestPaths = bestPaths.filter((_, i) => !bestSwapAmounts[i].isZero());
    bestSwapAmounts = bestSwapAmounts.filter(
        (swapAmount) => !swapAmount.isZero()
    );
    return [bestPaths, bestSwapAmounts, bestTotalReturnConsideringFees];
};
/**
 * For a fixed number of possible paths, finds the optimal distribution of swap amounts to maximise output
 */
const optimizePathDistribution = (
    allPaths,
    swapType,
    totalSwapAmount,
    initialSwapAmounts,
    inputDecimals
) => {
    let [selectedPaths, exceedingAmounts] = getBestPathIds(
        allPaths,
        swapType,
        initialSwapAmounts,
        inputDecimals
    );
    let swapAmounts = initialSwapAmounts;
    // Trivial case of only allowing a single path
    if (initialSwapAmounts.length === 1) {
        return {
            swapAmounts,
            paths: selectedPaths,
        };
    }
    const humanTotalSwapAmount = bnum(
        bignumber.formatFixed(totalSwapAmount, inputDecimals)
    );
    // We store the next set of paths to consider separately so that can always retrieve the previous paths
    let newSelectedPaths = selectedPaths;
    // We now loop to iterateSwapAmounts until we converge.
    const historyOfSortedPathIds = [];
    let sortedPathIdsJSON = JSON.stringify(
        newSelectedPaths.map(({ id }) => id).sort()
    );
    while (!historyOfSortedPathIds.includes(sortedPathIdsJSON)) {
        // Local minima can result in infinite loops
        // We then maintain a log of the sorted paths ids which we have already considered to prevent getting stuck
        historyOfSortedPathIds.push(sortedPathIdsJSON);
        selectedPaths = newSelectedPaths;
        [swapAmounts, exceedingAmounts] = iterateSwapAmounts(
            selectedPaths,
            swapType,
            humanTotalSwapAmount,
            swapAmounts,
            exceedingAmounts
        );
        [newSelectedPaths, exceedingAmounts] = getBestPathIds(
            allPaths,
            swapType,
            swapAmounts,
            inputDecimals
        );
        if (newSelectedPaths.length === 0) break;
        const pathIds = newSelectedPaths.map(({ id }) => id).sort();
        sortedPathIdsJSON = JSON.stringify(pathIds);
    }
    return {
        swapAmounts,
        paths: selectedPaths,
    };
};
const formatSwaps$1 = (
    bestPaths,
    swapType,
    totalSwapAmount,
    bestSwapAmounts
) => {
    //// Prepare swap data from paths
    const swaps = [];
    let highestSwapAmt = bestSwapAmounts[0];
    let largestSwapPath = bestPaths[0];
    let bestTotalReturn = ZERO; // Reset totalReturn as this time it will be
    // calculated with the EVM maths so the return is exactly what the user will get
    // after executing the transaction (given there are no front-runners)
    bestPaths.forEach((path, i) => {
        const swapAmount = bestSwapAmounts[i];
        if (swapAmount.gt(highestSwapAmt)) {
            highestSwapAmt = swapAmount;
            largestSwapPath = path;
        }
        // // TODO: remove. To debug only!
        /*
        console.log(
            'Prices should be all very close (unless one of the paths is on the limit!'
        );
        console.log(
            getSpotPriceAfterSwapForPath(path, swapType, swapAmount).toNumber()
        );
        */
        const poolPairData = path.poolPairData;
        const pathSwaps = [];
        const amounts = [];
        let returnAmount;
        const n = poolPairData.length;
        amounts.push(swapAmount);
        if (swapType === exports.SwapTypes.SwapExactIn) {
            for (let i = 0; i < n; i++) {
                amounts.push(
                    EVMgetOutputAmountSwap(
                        path.pools[i],
                        poolPairData[i],
                        exports.SwapTypes.SwapExactIn,
                        amounts[amounts.length - 1]
                    )
                );
                const swap = {
                    pool: path.swaps[i].pool,
                    tokenIn: path.swaps[i].tokenIn,
                    tokenOut: path.swaps[i].tokenOut,
                    swapAmount: amounts[i].toString(),
                    swapAmountOut: amounts[i + 1].toString(),
                    tokenInDecimals: path.poolPairData[i].decimalsIn,
                    tokenOutDecimals: path.poolPairData[i].decimalsOut,
                };
                pathSwaps.push(swap);
            }
            returnAmount = amounts[n];
        } else {
            for (let i = 0; i < n; i++) {
                amounts.unshift(
                    EVMgetOutputAmountSwap(
                        path.pools[n - 1 - i],
                        poolPairData[n - 1 - i],
                        exports.SwapTypes.SwapExactOut,
                        amounts[0]
                    )
                );
                const swap = {
                    pool: path.swaps[n - 1 - i].pool,
                    tokenIn: path.swaps[n - 1 - i].tokenIn,
                    tokenOut: path.swaps[n - 1 - i].tokenOut,
                    swapAmount: amounts[1].toString(),
                    swapAmountOut: amounts[0].toString(),
                    tokenInDecimals: path.poolPairData[n - 1 - i].decimalsIn,
                    tokenOutDecimals: path.poolPairData[n - 1 - i].decimalsOut,
                };
                pathSwaps.unshift(swap);
            }
            returnAmount = amounts[0];
        }
        swaps.push(pathSwaps);
        bestTotalReturn = bestTotalReturn.plus(returnAmount);
    });
    // Since the individual swapAmounts for each path are integers, the sum of all swapAmounts
    // might not be exactly equal to the totalSwapAmount the user requested. We need to correct that rounding error
    // and we do that by adding the rounding error to the first path.
    if (swaps.length > 0) {
        const totalSwapAmountWithRoundingErrors = bestSwapAmounts.reduce(
            (a, b) => a.plus(b),
            ZERO
        );
        const dust = totalSwapAmount.minus(totalSwapAmountWithRoundingErrors);
        if (swapType === exports.SwapTypes.SwapExactIn) {
            // As swap is ExactIn, add dust to input pool
            swaps[0][0].swapAmount = bnum(swaps[0][0].swapAmount)
                .plus(dust)
                .toString();
        } else {
            // As swap is ExactOut, add dust to output pool
            const firstPathLastPoolIndex = bestPaths[0].swaps.length - 1;
            swaps[0][firstPathLastPoolIndex].swapAmount = bnum(
                swaps[0][firstPathLastPoolIndex].swapAmount
            )
                .plus(dust)
                .toString();
        }
    }
    if (bestTotalReturn.eq(0)) return [[], ZERO, ZERO];
    const marketSp = getSpotPriceAfterSwapForPath(
        largestSwapPath,
        swapType,
        ZERO
    );
    return [swaps, bestTotalReturn, marketSp];
};
//  For a given list of swapAmounts, gets list of pools with best effective price for these amounts
//  Always choose best pool for highest swapAmount first, then 2nd swapAmount and so on. This is
//  because it's best to use the best effective price for the highest amount to be traded
function getBestPathIds(originalPaths, swapType, swapAmounts, inputDecimals) {
    const selectedPaths = [];
    const selectedPathExceedingAmounts = [];
    const paths = cloneDeep(originalPaths); // Deep copy to avoid changing the original path data
    // Sort swapAmounts in descending order without changing original: https://stackoverflow.com/a/42442909
    const sortedSwapAmounts = [...swapAmounts].sort((a, b) => {
        return b.minus(a).toNumber();
    });
    sortedSwapAmounts.forEach((swapAmount) => {
        // Find path that has best effective price
        let bestPathIndex = -1;
        let bestEffectivePrice = INFINITY; // Start with worst price possible
        paths.forEach((path, i) => {
            // Do not consider this path if its limit is below swapAmount
            if (
                bnum(
                    bignumber.formatFixed(path.limitAmount, inputDecimals)
                ).gte(swapAmount)
            ) {
                // Calculate effective price of this path for this swapAmount
                // If path.limitAmount = swapAmount we set effectivePrice as
                // Infinity because we know this path is maxed out and we want
                // to select other paths that can still be improved on
                let effectivePrice;
                if (
                    bnum(
                        bignumber.formatFixed(path.limitAmount, inputDecimals)
                    ).eq(swapAmount)
                ) {
                    effectivePrice = INFINITY;
                } else {
                    // TODO for optimization: pass already calculated limitAmount as input
                    // to getEffectivePriceSwapForPath()
                    effectivePrice = getEffectivePriceSwapForPath(
                        path,
                        swapType,
                        swapAmount,
                        inputDecimals
                    );
                }
                if (effectivePrice.lte(bestEffectivePrice)) {
                    bestEffectivePrice = effectivePrice;
                    bestPathIndex = i;
                }
            }
        });
        if (bestPathIndex === -1) {
            return [[], []];
        }
        selectedPaths.push(paths[bestPathIndex]);
        selectedPathExceedingAmounts.push(
            swapAmount.minus(
                bnum(
                    bignumber.formatFixed(
                        paths[bestPathIndex].limitAmount,
                        inputDecimals
                    )
                )
            )
        );
        paths.splice(bestPathIndex, 1); // Remove path from list
    });
    return [selectedPaths, selectedPathExceedingAmounts];
}
// This functions finds the swapAmounts such that all the paths that have viable swapAmounts (i.e.
// that are not negative or equal to limitAmount) bring their respective prices after swap to the
// same price (which means that this is the optimal solution for the paths analyzed)
function iterateSwapAmounts(
    selectedPaths,
    swapType,
    totalSwapAmount,
    swapAmounts,
    exceedingAmounts
) {
    let priceError = ONE; // Initialize priceError just so that while starts
    let prices = [];
    // // Since this is the beginning of an iteration with a new set of paths, we
    // // set any swapAmounts that were 0 previously to 1 wei or at the limit
    // // to limit minus 1 wei just so that they
    // // are considered as viable for iterateSwapAmountsApproximation(). If they were
    // // left at 0 iterateSwapAmountsApproximation() would consider them already outside
    // // the viable range and would not iterate on them. This is useful when
    // // iterateSwapAmountsApproximation() is being repeatedly called within the while loop
    // // below, but not when a new execution of iterateSwapAmounts() happens with new
    // // paths.
    // for (let i = 0; i < swapAmounts.length; ++i) {
    //     if (swapAmounts[i].isZero()) {
    //         // Very small amount: TODO put in config file
    //         const epsilon = totalSwapAmount.times(INFINITESIMAL);
    //         swapAmounts[i] = epsilon;
    //         exceedingAmounts[i] = exceedingAmounts[i].plus(epsilon);
    //     }
    //     if (exceedingAmounts[i].isZero()) {
    //         // Very small amount: TODO put in config file
    //         const epsilon = totalSwapAmount.times(INFINITESIMAL);
    //         swapAmounts[i] = swapAmounts[i].minus(epsilon); // Very small amount
    //         exceedingAmounts[i] = exceedingAmounts[i].minus(epsilon);
    //     }
    // }
    let iterationCount = 0;
    while (priceError.isGreaterThan(PRICE_ERROR_TOLERANCE)) {
        [prices, swapAmounts, exceedingAmounts] =
            iterateSwapAmountsApproximation(
                selectedPaths,
                swapType,
                totalSwapAmount,
                swapAmounts,
                exceedingAmounts,
                iterationCount
            );
        const maxPrice = BigNumber.max.apply(null, prices);
        const minPrice = BigNumber.min.apply(null, prices);
        priceError = maxPrice.minus(minPrice).div(minPrice);
        iterationCount++;
        if (iterationCount > 100) break;
    }
    return [swapAmounts, exceedingAmounts];
}
function iterateSwapAmountsApproximation(
    selectedPaths,
    swapType,
    totalSwapAmount,
    swapAmounts,
    exceedingAmounts, // This is the amount by which swapAmount exceeds the pool limit_amount
    iterationCount
) {
    let sumInverseDerivativeSPaSs = ZERO;
    let sumSPaSDividedByDerivativeSPaSs = ZERO;
    const SPaSs = [];
    const derivativeSPaSs = [];
    // We only iterate on the swapAmounts that are viable (i.e. no negative or > than path limit)
    // OR if this is the first time "iterateSwapAmountsApproximation" is called
    // within "iterateSwapAmounts()". In this case swapAmounts should be considered viable
    // also if they are on the limit.
    swapAmounts.forEach((swapAmount, i) => {
        // if (swapAmount.gt(ZERO) && exceedingAmounts[i].lt(ZERO)) {
        if (
            (iterationCount == 0 &&
                swapAmount.gte(ZERO) &&
                exceedingAmounts[i].lte(ZERO)) ||
            (iterationCount != 0 &&
                swapAmount.gt(ZERO) &&
                exceedingAmounts[i].lt(ZERO))
        ) {
            const path = selectedPaths[i];
            const SPaS = getSpotPriceAfterSwapForPath(
                path,
                swapType,
                swapAmount
            );
            SPaSs.push(SPaS);
            const derivative_SPaS = getDerivativeSpotPriceAfterSwapForPath(
                path,
                swapType,
                swapAmount
            );
            derivativeSPaSs.push(derivative_SPaS);
            sumInverseDerivativeSPaSs = sumInverseDerivativeSPaSs.plus(
                ONE.div(derivative_SPaS)
            );
            sumSPaSDividedByDerivativeSPaSs =
                sumSPaSDividedByDerivativeSPaSs.plus(SPaS.div(derivative_SPaS));
        } else {
            // This swapAmount is not viable but we push to keep list length consistent
            derivativeSPaSs.push(bnum('NaN'));
            SPaSs.push(bnum('NaN'));
        }
    });
    // // This division using BigNumber below lost precision. Its result was for example
    // 1.042818e-12 while using normal js math operations it was
    // 1.0428184989387553e-12. This loss of precision caused an important bug
    // let weighted_average_SPaS = sumSPaSDividedByDerivativeSPaSs.div(
    //     sumInverseDerivativeSPaSs
    // );
    const weighted_average_SPaS = bnum(
        sumSPaSDividedByDerivativeSPaSs.toNumber() /
            sumInverseDerivativeSPaSs.toNumber()
    );
    swapAmounts.forEach((swapAmount, i) => {
        if (
            (iterationCount == 0 &&
                swapAmount.gte(ZERO) &&
                exceedingAmounts[i].lte(ZERO)) ||
            (iterationCount != 0 &&
                swapAmount.gt(ZERO) &&
                exceedingAmounts[i].lt(ZERO))
        ) {
            const deltaSwapAmount = weighted_average_SPaS
                .minus(SPaSs[i])
                .div(derivativeSPaSs[i]);
            swapAmounts[i] = swapAmounts[i].plus(deltaSwapAmount);
            exceedingAmounts[i] = exceedingAmounts[i].plus(deltaSwapAmount);
        }
    });
    // Make sure no input amount is negative or above the path limit
    while (
        BigNumber.min.apply(null, swapAmounts).lt(ZERO) ||
        BigNumber.max.apply(null, exceedingAmounts).gt(ZERO)
    ) {
        [swapAmounts, exceedingAmounts] = redistributeInputAmounts(
            swapAmounts,
            exceedingAmounts,
            derivativeSPaSs
        );
    }
    const pricesForViableAmounts = []; // Get prices for all non-negative AND below-limit input amounts
    let swapAmountsSumWithRoundingErrors = ZERO;
    swapAmounts.forEach((swapAmount, i) => {
        swapAmountsSumWithRoundingErrors =
            swapAmountsSumWithRoundingErrors.plus(swapAmount);
        if (
            (iterationCount == 0 &&
                swapAmount.gte(ZERO) &&
                exceedingAmounts[i].lte(ZERO)) ||
            (iterationCount != 0 &&
                swapAmount.gt(ZERO) &&
                exceedingAmounts[i].lt(ZERO))
        )
            pricesForViableAmounts.push(
                getSpotPriceAfterSwapForPath(
                    selectedPaths[i],
                    swapType,
                    swapAmount
                )
            );
    });
    const roundingError = totalSwapAmount.minus(
        swapAmountsSumWithRoundingErrors
    );
    // console.log("Rounding error")
    // console.log(roundingError.div(totalSwapAmount).toNumber())
    // // let errorLimit = totalSwapAmount.times(bnum(0.001))
    // // if(roundingError>errorLimit)
    // //     throw "Rounding error in iterateSwapAmountsApproximation() too large";
    // Add rounding error to make sum be exactly equal to totalSwapAmount to avoid error compounding
    // Add to the first swapAmount that is already not zero or at the limit
    // AND only if swapAmount would not leave the viable range (i.e. swapAmoung
    // would still be >0 and <limit) after adding the error
    // I.d. we need: (swapAmount+error)>0 AND (exceedingAmount+error)<0
    for (let i = 0; i < swapAmounts.length; ++i) {
        if (swapAmounts[i].gt(ZERO) && exceedingAmounts[i].lt(ZERO)) {
            if (
                swapAmounts[i].plus(roundingError).gt(ZERO) &&
                exceedingAmounts[i].plus(roundingError).lt(ZERO)
            ) {
                swapAmounts[i] = swapAmounts[i].plus(roundingError);
                exceedingAmounts[i] = exceedingAmounts[i].plus(roundingError);
                break;
            }
        }
    }
    return [pricesForViableAmounts, swapAmounts, exceedingAmounts];
}
function redistributeInputAmounts(
    swapAmounts,
    exceedingAmounts,
    derivativeSPaSs
) {
    let sumInverseDerivativeSPaSsForViableAmounts = ZERO;
    let sumInverseDerivativeSPaSsForNegativeAmounts = ZERO;
    let sumInverseDerivativeSPaSsForExceedingAmounts = ZERO;
    let sumNegativeOrExceedingSwapAmounts = ZERO;
    swapAmounts.forEach((swapAmount, i) => {
        // Amount is negative
        if (swapAmount.lte(ZERO)) {
            sumNegativeOrExceedingSwapAmounts =
                sumNegativeOrExceedingSwapAmounts.plus(swapAmount);
            sumInverseDerivativeSPaSsForNegativeAmounts =
                sumInverseDerivativeSPaSsForNegativeAmounts.plus(
                    ONE.div(derivativeSPaSs[i])
                );
        }
        // Amount is above limit (exceeding > 0)
        else if (exceedingAmounts[i].gte(ZERO)) {
            sumNegativeOrExceedingSwapAmounts =
                sumNegativeOrExceedingSwapAmounts.plus(exceedingAmounts[i]);
            sumInverseDerivativeSPaSsForExceedingAmounts =
                sumInverseDerivativeSPaSsForExceedingAmounts.plus(
                    ONE.div(derivativeSPaSs[i])
                );
        }
        // Sum the inverse of the derivative if the swapAmount is viable,
        // i.e. if swapAmount > 0 or swapAmount < limit
        else
            sumInverseDerivativeSPaSsForViableAmounts =
                sumInverseDerivativeSPaSsForViableAmounts.plus(
                    ONE.div(derivativeSPaSs[i])
                );
    });
    // Now redestribute sumNegativeOrExceedingSwapAmounts
    // to non-exceeding pools if sumNegativeOrExceedingSwapAmounts > 0
    // or to non zero swapAmount pools if sumNegativeOrExceedingSwapAmounts < 0
    swapAmounts.forEach((swapAmount, i) => {
        if (swapAmount.lte(ZERO)) {
            swapAmounts[i] = ZERO;
            exceedingAmounts[i] = exceedingAmounts[i].minus(swapAmount);
        } else if (exceedingAmounts[i].gte(ZERO)) {
            swapAmounts[i] = swapAmounts[i].minus(exceedingAmounts[i]); // This is the same as swapAmounts[i] = pathLimitAmounts[i]
            exceedingAmounts[i] = ZERO;
        } else {
            const deltaSwapAmount = sumNegativeOrExceedingSwapAmounts
                .times(ONE.div(derivativeSPaSs[i]))
                .div(sumInverseDerivativeSPaSsForViableAmounts);
            swapAmounts[i] = swapAmounts[i].plus(deltaSwapAmount);
            exceedingAmounts[i] = exceedingAmounts[i].plus(deltaSwapAmount);
        }
    });
    // If there were no viable amounts (i.e all amounts were either negative or above limit)
    // We run this extra loop to redistribute the excess
    if (sumInverseDerivativeSPaSsForViableAmounts.isZero()) {
        if (sumNegativeOrExceedingSwapAmounts.lt(ZERO)) {
            // This means we need to redistribute to the exceeding amounts that
            // were now set to the limit
            swapAmounts.forEach((swapAmount, i) => {
                if (exceedingAmounts[i].isZero()) {
                    const deltaSwapAmount = sumNegativeOrExceedingSwapAmounts
                        .times(ONE.div(derivativeSPaSs[i]))
                        .div(sumInverseDerivativeSPaSsForExceedingAmounts);
                    swapAmounts[i] = swapAmounts[i].plus(deltaSwapAmount);
                    exceedingAmounts[i] =
                        exceedingAmounts[i].plus(deltaSwapAmount);
                }
            });
        } else {
            // This means we need to redistribute to the negative amounts that
            // were now set to zero
            swapAmounts.forEach((swapAmount, i) => {
                if (swapAmounts[i].isZero()) {
                    const deltaSwapAmount = sumNegativeOrExceedingSwapAmounts
                        .times(ONE.div(derivativeSPaSs[i]))
                        .div(sumInverseDerivativeSPaSsForNegativeAmounts);
                    swapAmounts[i] = swapAmounts[i].plus(deltaSwapAmount);
                    exceedingAmounts[i] =
                        exceedingAmounts[i].plus(deltaSwapAmount);
                }
            });
        }
    }
    return [swapAmounts, exceedingAmounts];
}
// TODO: calculate EVM return (use bmath) and update pool balances like current SOR
const calcTotalReturn = (paths, swapType, swapAmounts, inputDecimals) => {
    let totalReturn = new BigNumber(0);
    // changing the contents of pools (parameter passed as reference)
    paths.forEach((path, i) => {
        totalReturn = totalReturn.plus(
            getOutputAmountSwapForPath(
                path,
                swapType,
                swapAmounts[i],
                inputDecimals
            )
        );
    });
    return totalReturn;
};

const getBestPaths = (
    paths,
    swapType,
    totalSwapAmount,
    inputDecimals,
    outputDecimals,
    maxPools,
    costReturnToken
) => {
    // No paths available or totalSwapAmount == 0, return empty solution
    if (paths.length == 0 || totalSwapAmount.isZero()) {
        return [[], ZERO, ZERO, ZERO];
    }
    // Before we start the main loop, we first check if there is enough liquidity for this totalSwapAmount
    const highestLimitAmounts = getHighestLimitAmountsForPaths(paths, maxPools);
    const sumLimitAmounts = highestLimitAmounts.reduce((r, pathLimit) => {
        r.push(pathLimit.add(r[r.length - 1] || constants.Zero));
        return r;
    }, []);
    // If the cumulative limit across all paths is lower than totalSwapAmount then no solution is possible
    if (totalSwapAmount.gt(sumLimitAmounts[sumLimitAmounts.length - 1])) {
        return [[], ZERO, ZERO, ZERO]; // Not enough liquidity, return empty
    }
    // We use the highest limits to define the initial number of pools considered and the initial guess for swapAmounts.
    const initialNumPaths =
        sumLimitAmounts.findIndex((cumulativeLimit) =>
            // If below is true, it means we have enough liquidity
            totalSwapAmount.lte(cumulativeLimit)
        ) + 1;
    const initialSwapAmounts = highestLimitAmounts.slice(0, initialNumPaths);
    //  Since the sum of the first i highest limits will be less than totalSwapAmount, we remove the difference to the last swapAmount
    //  so we are sure that the sum of swapAmounts will be equal to totalSwapAmount
    const difference =
        sumLimitAmounts[initialNumPaths - 1].sub(totalSwapAmount);
    initialSwapAmounts[initialSwapAmounts.length - 1] =
        initialSwapAmounts[initialSwapAmounts.length - 1].sub(difference);
    const [bestPaths, bestSwapAmounts, bestTotalReturnConsideringFees] =
        optimizeSwapAmounts(
            paths,
            swapType,
            totalSwapAmount,
            initialSwapAmounts,
            highestLimitAmounts,
            inputDecimals,
            outputDecimals,
            initialNumPaths,
            maxPools,
            costReturnToken
        );
    const [swaps, bestTotalReturn, marketSp] = formatSwaps$1(
        bestPaths,
        swapType,
        bnum(bignumber.formatFixed(totalSwapAmount, inputDecimals)),
        bestSwapAmounts
    );
    if (bestTotalReturn.eq(0)) return [[], ZERO, ZERO, ZERO];
    return [swaps, bestTotalReturn, marketSp, bestTotalReturnConsideringFees];
};

var vaultAbi = [
    {
        inputs: [
            {
                internalType: 'contract IAuthorizer',
                name: 'authorizer',
                type: 'address',
            },
            {
                internalType: 'contract IWETH',
                name: 'weth',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: 'pauseWindowDuration',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'bufferPeriodDuration',
                type: 'uint256',
            },
        ],
        stateMutability: 'nonpayable',
        type: 'constructor',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'contract IAuthorizer',
                name: 'newAuthorizer',
                type: 'address',
            },
        ],
        name: 'AuthorizerChanged',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'contract IERC20',
                name: 'token',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'sender',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'address',
                name: 'recipient',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
            },
        ],
        name: 'ExternalBalanceTransfer',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'contract IFlashLoanRecipient',
                name: 'recipient',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'contract IERC20',
                name: 'token',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'feeAmount',
                type: 'uint256',
            },
        ],
        name: 'FlashLoan',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'user',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'contract IERC20',
                name: 'token',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'int256',
                name: 'delta',
                type: 'int256',
            },
        ],
        name: 'InternalBalanceChanged',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'bool',
                name: 'paused',
                type: 'bool',
            },
        ],
        name: 'PausedStateChanged',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'bytes32',
                name: 'poolId',
                type: 'bytes32',
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'liquidityProvider',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'contract IERC20[]',
                name: 'tokens',
                type: 'address[]',
            },
            {
                indexed: false,
                internalType: 'int256[]',
                name: 'deltas',
                type: 'int256[]',
            },
            {
                indexed: false,
                internalType: 'uint256[]',
                name: 'protocolFeeAmounts',
                type: 'uint256[]',
            },
        ],
        name: 'PoolBalanceChanged',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'bytes32',
                name: 'poolId',
                type: 'bytes32',
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'assetManager',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'contract IERC20',
                name: 'token',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'int256',
                name: 'cashDelta',
                type: 'int256',
            },
            {
                indexed: false,
                internalType: 'int256',
                name: 'managedDelta',
                type: 'int256',
            },
        ],
        name: 'PoolBalanceManaged',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'bytes32',
                name: 'poolId',
                type: 'bytes32',
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'poolAddress',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'enum IVault.PoolSpecialization',
                name: 'specialization',
                type: 'uint8',
            },
        ],
        name: 'PoolRegistered',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'relayer',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'sender',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'bool',
                name: 'approved',
                type: 'bool',
            },
        ],
        name: 'RelayerApprovalChanged',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'bytes32',
                name: 'poolId',
                type: 'bytes32',
            },
            {
                indexed: true,
                internalType: 'contract IERC20',
                name: 'tokenIn',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'contract IERC20',
                name: 'tokenOut',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'amountIn',
                type: 'uint256',
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'amountOut',
                type: 'uint256',
            },
        ],
        name: 'Swap',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'bytes32',
                name: 'poolId',
                type: 'bytes32',
            },
            {
                indexed: false,
                internalType: 'contract IERC20[]',
                name: 'tokens',
                type: 'address[]',
            },
        ],
        name: 'TokensDeregistered',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'bytes32',
                name: 'poolId',
                type: 'bytes32',
            },
            {
                indexed: false,
                internalType: 'contract IERC20[]',
                name: 'tokens',
                type: 'address[]',
            },
            {
                indexed: false,
                internalType: 'address[]',
                name: 'assetManagers',
                type: 'address[]',
            },
        ],
        name: 'TokensRegistered',
        type: 'event',
    },
    {
        inputs: [],
        name: 'WETH',
        outputs: [
            {
                internalType: 'contract IWETH',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'enum IVault.SwapKind',
                name: 'kind',
                type: 'uint8',
            },
            {
                components: [
                    {
                        internalType: 'bytes32',
                        name: 'poolId',
                        type: 'bytes32',
                    },
                    {
                        internalType: 'uint256',
                        name: 'assetInIndex',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'assetOutIndex',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'bytes',
                        name: 'userData',
                        type: 'bytes',
                    },
                ],
                internalType: 'struct IVault.BatchSwapStep[]',
                name: 'swaps',
                type: 'tuple[]',
            },
            {
                internalType: 'contract IAsset[]',
                name: 'assets',
                type: 'address[]',
            },
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'sender',
                        type: 'address',
                    },
                    {
                        internalType: 'bool',
                        name: 'fromInternalBalance',
                        type: 'bool',
                    },
                    {
                        internalType: 'address payable',
                        name: 'recipient',
                        type: 'address',
                    },
                    {
                        internalType: 'bool',
                        name: 'toInternalBalance',
                        type: 'bool',
                    },
                ],
                internalType: 'struct IVault.FundManagement',
                name: 'funds',
                type: 'tuple',
            },
            {
                internalType: 'int256[]',
                name: 'limits',
                type: 'int256[]',
            },
            {
                internalType: 'uint256',
                name: 'deadline',
                type: 'uint256',
            },
        ],
        name: 'batchSwap',
        outputs: [
            {
                internalType: 'int256[]',
                name: 'assetDeltas',
                type: 'int256[]',
            },
        ],
        stateMutability: 'payable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'poolId',
                type: 'bytes32',
            },
            {
                internalType: 'contract IERC20[]',
                name: 'tokens',
                type: 'address[]',
            },
        ],
        name: 'deregisterTokens',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'poolId',
                type: 'bytes32',
            },
            {
                internalType: 'address',
                name: 'sender',
                type: 'address',
            },
            {
                internalType: 'address payable',
                name: 'recipient',
                type: 'address',
            },
            {
                components: [
                    {
                        internalType: 'contract IAsset[]',
                        name: 'assets',
                        type: 'address[]',
                    },
                    {
                        internalType: 'uint256[]',
                        name: 'minAmountsOut',
                        type: 'uint256[]',
                    },
                    {
                        internalType: 'bytes',
                        name: 'userData',
                        type: 'bytes',
                    },
                    {
                        internalType: 'bool',
                        name: 'toInternalBalance',
                        type: 'bool',
                    },
                ],
                internalType: 'struct IVault.ExitPoolRequest',
                name: 'request',
                type: 'tuple',
            },
        ],
        name: 'exitPool',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'contract IFlashLoanRecipient',
                name: 'recipient',
                type: 'address',
            },
            {
                internalType: 'contract IERC20[]',
                name: 'tokens',
                type: 'address[]',
            },
            {
                internalType: 'uint256[]',
                name: 'amounts',
                type: 'uint256[]',
            },
            {
                internalType: 'bytes',
                name: 'userData',
                type: 'bytes',
            },
        ],
        name: 'flashLoan',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'bytes4',
                name: 'selector',
                type: 'bytes4',
            },
        ],
        name: 'getActionId',
        outputs: [
            {
                internalType: 'bytes32',
                name: '',
                type: 'bytes32',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'getAuthorizer',
        outputs: [
            {
                internalType: 'contract IAuthorizer',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'getDomainSeparator',
        outputs: [
            {
                internalType: 'bytes32',
                name: '',
                type: 'bytes32',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'user',
                type: 'address',
            },
            {
                internalType: 'contract IERC20[]',
                name: 'tokens',
                type: 'address[]',
            },
        ],
        name: 'getInternalBalance',
        outputs: [
            {
                internalType: 'uint256[]',
                name: 'balances',
                type: 'uint256[]',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'user',
                type: 'address',
            },
        ],
        name: 'getNextNonce',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'getPausedState',
        outputs: [
            {
                internalType: 'bool',
                name: 'paused',
                type: 'bool',
            },
            {
                internalType: 'uint256',
                name: 'pauseWindowEndTime',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'bufferPeriodEndTime',
                type: 'uint256',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'poolId',
                type: 'bytes32',
            },
        ],
        name: 'getPool',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address',
            },
            {
                internalType: 'enum IVault.PoolSpecialization',
                name: '',
                type: 'uint8',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'poolId',
                type: 'bytes32',
            },
            {
                internalType: 'contract IERC20',
                name: 'token',
                type: 'address',
            },
        ],
        name: 'getPoolTokenInfo',
        outputs: [
            {
                internalType: 'uint256',
                name: 'cash',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'managed',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'lastChangeBlock',
                type: 'uint256',
            },
            {
                internalType: 'address',
                name: 'assetManager',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'poolId',
                type: 'bytes32',
            },
        ],
        name: 'getPoolTokens',
        outputs: [
            {
                internalType: 'contract IERC20[]',
                name: 'tokens',
                type: 'address[]',
            },
            {
                internalType: 'uint256[]',
                name: 'balances',
                type: 'uint256[]',
            },
            {
                internalType: 'uint256',
                name: 'lastChangeBlock',
                type: 'uint256',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'getProtocolFeesCollector',
        outputs: [
            {
                internalType: 'contract ProtocolFeesCollector',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'user',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'relayer',
                type: 'address',
            },
        ],
        name: 'hasApprovedRelayer',
        outputs: [
            {
                internalType: 'bool',
                name: '',
                type: 'bool',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'poolId',
                type: 'bytes32',
            },
            {
                internalType: 'address',
                name: 'sender',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'recipient',
                type: 'address',
            },
            {
                components: [
                    {
                        internalType: 'contract IAsset[]',
                        name: 'assets',
                        type: 'address[]',
                    },
                    {
                        internalType: 'uint256[]',
                        name: 'maxAmountsIn',
                        type: 'uint256[]',
                    },
                    {
                        internalType: 'bytes',
                        name: 'userData',
                        type: 'bytes',
                    },
                    {
                        internalType: 'bool',
                        name: 'fromInternalBalance',
                        type: 'bool',
                    },
                ],
                internalType: 'struct IVault.JoinPoolRequest',
                name: 'request',
                type: 'tuple',
            },
        ],
        name: 'joinPool',
        outputs: [],
        stateMutability: 'payable',
        type: 'function',
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'enum IVault.PoolBalanceOpKind',
                        name: 'kind',
                        type: 'uint8',
                    },
                    {
                        internalType: 'bytes32',
                        name: 'poolId',
                        type: 'bytes32',
                    },
                    {
                        internalType: 'contract IERC20',
                        name: 'token',
                        type: 'address',
                    },
                    {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                    },
                ],
                internalType: 'struct IVault.PoolBalanceOp[]',
                name: 'ops',
                type: 'tuple[]',
            },
        ],
        name: 'managePoolBalance',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'enum IVault.UserBalanceOpKind',
                        name: 'kind',
                        type: 'uint8',
                    },
                    {
                        internalType: 'contract IAsset',
                        name: 'asset',
                        type: 'address',
                    },
                    {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'address',
                        name: 'sender',
                        type: 'address',
                    },
                    {
                        internalType: 'address payable',
                        name: 'recipient',
                        type: 'address',
                    },
                ],
                internalType: 'struct IVault.UserBalanceOp[]',
                name: 'ops',
                type: 'tuple[]',
            },
        ],
        name: 'manageUserBalance',
        outputs: [],
        stateMutability: 'payable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'enum IVault.SwapKind',
                name: 'kind',
                type: 'uint8',
            },
            {
                components: [
                    {
                        internalType: 'bytes32',
                        name: 'poolId',
                        type: 'bytes32',
                    },
                    {
                        internalType: 'uint256',
                        name: 'assetInIndex',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'assetOutIndex',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'bytes',
                        name: 'userData',
                        type: 'bytes',
                    },
                ],
                internalType: 'struct IVault.BatchSwapStep[]',
                name: 'swaps',
                type: 'tuple[]',
            },
            {
                internalType: 'contract IAsset[]',
                name: 'assets',
                type: 'address[]',
            },
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'sender',
                        type: 'address',
                    },
                    {
                        internalType: 'bool',
                        name: 'fromInternalBalance',
                        type: 'bool',
                    },
                    {
                        internalType: 'address payable',
                        name: 'recipient',
                        type: 'address',
                    },
                    {
                        internalType: 'bool',
                        name: 'toInternalBalance',
                        type: 'bool',
                    },
                ],
                internalType: 'struct IVault.FundManagement',
                name: 'funds',
                type: 'tuple',
            },
        ],
        name: 'queryBatchSwap',
        outputs: [
            {
                internalType: 'int256[]',
                name: '',
                type: 'int256[]',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'enum IVault.PoolSpecialization',
                name: 'specialization',
                type: 'uint8',
            },
        ],
        name: 'registerPool',
        outputs: [
            {
                internalType: 'bytes32',
                name: '',
                type: 'bytes32',
            },
        ],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'poolId',
                type: 'bytes32',
            },
            {
                internalType: 'contract IERC20[]',
                name: 'tokens',
                type: 'address[]',
            },
            {
                internalType: 'address[]',
                name: 'assetManagers',
                type: 'address[]',
            },
        ],
        name: 'registerTokens',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'contract IAuthorizer',
                name: 'newAuthorizer',
                type: 'address',
            },
        ],
        name: 'setAuthorizer',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'bool',
                name: 'paused',
                type: 'bool',
            },
        ],
        name: 'setPaused',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'sender',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'relayer',
                type: 'address',
            },
            {
                internalType: 'bool',
                name: 'approved',
                type: 'bool',
            },
        ],
        name: 'setRelayerApproval',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'bytes32',
                        name: 'poolId',
                        type: 'bytes32',
                    },
                    {
                        internalType: 'enum IVault.SwapKind',
                        name: 'kind',
                        type: 'uint8',
                    },
                    {
                        internalType: 'contract IAsset',
                        name: 'assetIn',
                        type: 'address',
                    },
                    {
                        internalType: 'contract IAsset',
                        name: 'assetOut',
                        type: 'address',
                    },
                    {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'bytes',
                        name: 'userData',
                        type: 'bytes',
                    },
                ],
                internalType: 'struct IVault.SingleSwap',
                name: 'singleSwap',
                type: 'tuple',
            },
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'sender',
                        type: 'address',
                    },
                    {
                        internalType: 'bool',
                        name: 'fromInternalBalance',
                        type: 'bool',
                    },
                    {
                        internalType: 'address payable',
                        name: 'recipient',
                        type: 'address',
                    },
                    {
                        internalType: 'bool',
                        name: 'toInternalBalance',
                        type: 'bool',
                    },
                ],
                internalType: 'struct IVault.FundManagement',
                name: 'funds',
                type: 'tuple',
            },
            {
                internalType: 'uint256',
                name: 'limit',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'deadline',
                type: 'uint256',
            },
        ],
        name: 'swap',
        outputs: [
            {
                internalType: 'uint256',
                name: 'amountCalculated',
                type: 'uint256',
            },
        ],
        stateMutability: 'payable',
        type: 'function',
    },
    {
        stateMutability: 'payable',
        type: 'receive',
    },
];

const EMPTY_SWAPINFO = {
    tokenAddresses: [],
    swaps: [],
    swapAmount: constants.Zero,
    swapAmountForSwaps: constants.Zero,
    tokenIn: '',
    tokenOut: '',
    returnAmount: constants.Zero,
    returnAmountConsideringFees: constants.Zero,
    returnAmountFromSwaps: constants.Zero,
    marketSp: constants.Zero.toString(),
    routes: [],
};

const Lido = {
    Networks: [1, 42],
    stETH: {
        1: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',
        42: '0x4803bb90d18a1cb7a2187344fe4feb0e07878d05',
    },
    wstETH: {
        1: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',
        42: '0xa387b91e393cfb9356a460370842bc8dbb2f29af',
    },
    WETH: {
        1: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
        42: '0xdfcea9088c8a88a76ff74892c1457c17dfeef9c1',
    },
    DAI: {
        1: '0x6b175474e89094c44da98b954eedeac495271d0f',
        42: '0x04df6e4121c27713ed22341e7c7df330f56f289b',
    },
    USDC: {
        1: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
        42: '0xc2569dd7d0fd715b054fbf16e75b001e5c0c1115',
    },
    USDT: {
        1: '0xdac17f958d2ee523a2206206994597c13d831ec7',
        42: '0xcc08220af469192c53295fdd34cfb8df29aa17ab',
    },
    StaticPools: {
        // DAI/USDC/USDT
        staBal: {
            1: '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063',
            42: '0x45f78862bd3aa5205e63141fa7f2d35f38eb87c30000000000000000000000fd',
        },
        // WETH/DAI (WETH/USDC on Kovan)
        wethDai: {
            1: '0x0b09dea16768f0799065c475be02919503cb2a3500020000000000000000001a',
            42: '0x3a19030ed746bd1c3f2b0f996ff9479af04c5f0a000200000000000000000004',
        },
        // WETH/wstETH Lido Pool
        wstEthWeth: {
            1: '0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080',
            42: '0xe08590bde837eb9b2d42aa1196469d6e08fe96ec000200000000000000000101',
        },
    },
};
const Routes = {
    1: {},
    42: {},
};
// MAINNET STATIC ROUTES FOR LIDO <> Stable
// DAI/wstETH: DAI > WETH > wstETH
Routes[1][`${Lido.DAI[1]}${Lido.wstETH[1]}0`] = {
    name: 'DAI/wstETH-SwapExactIn',
    tokenInDecimals: 18,
    tokenOutDecimals: 18,
    tokenAddresses: [Lido.DAI[1], Lido.WETH[1], Lido.wstETH[1]],
    swaps: [
        {
            poolId: Lido.StaticPools.wethDai[1],
            amount: '',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wstEthWeth[1],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
    ],
};
// wstETH/DAI: wstETH > WETH > DAI
Routes[1][`${Lido.wstETH[1]}${Lido.DAI[1]}0`] = {
    name: 'wstETH/DAI-SwapExactIn',
    tokenInDecimals: 18,
    tokenOutDecimals: 18,
    tokenAddresses: [Lido.wstETH[1], Lido.WETH[1], Lido.DAI[1]],
    swaps: [
        {
            poolId: Lido.StaticPools.wstEthWeth[1],
            amount: '',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[1],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
    ],
};
// DAI/wstETH: DAI > WETH > wstETH
Routes[1][`${Lido.DAI[1]}${Lido.wstETH[1]}1`] = {
    name: 'DAI/wstETH-SwapExactOut',
    tokenInDecimals: 18,
    tokenOutDecimals: 18,
    tokenAddresses: [Lido.DAI[1], Lido.WETH[1], Lido.wstETH[1]],
    swaps: [
        {
            poolId: Lido.StaticPools.wstEthWeth[1],
            amount: '',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[1],
            amount: '0',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
    ],
};
// wstETH/DAI: wstETH > WETH > DAI
Routes[1][`${Lido.wstETH[1]}${Lido.DAI[1]}1`] = {
    name: 'wstETH/DAI-SwapExactOut',
    tokenInDecimals: 18,
    tokenOutDecimals: 18,
    tokenAddresses: [Lido.wstETH[1], Lido.WETH[1], Lido.DAI[1]],
    swaps: [
        {
            poolId: Lido.StaticPools.wethDai[1],
            amount: '',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wstEthWeth[1],
            amount: '0',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
    ],
};
// USDC/wstETH: USDC > DAI > WETH > wstETH
Routes[1][`${Lido.USDC[1]}${Lido.wstETH[1]}0`] = {
    name: 'USDC/wstETH-SwapExactIn',
    tokenInDecimals: 6,
    tokenOutDecimals: 18,
    tokenAddresses: [Lido.USDC[1], Lido.DAI[1], Lido.WETH[1], Lido.wstETH[1]],
    swaps: [
        {
            poolId: Lido.StaticPools.staBal[1],
            amount: '',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[1],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wstEthWeth[1],
            amount: '0',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
    ],
};
Routes[1][`${Lido.USDC[1]}${Lido.wstETH[1]}1`] = {
    name: 'USDC/wstETH-SwapExactOut',
    tokenInDecimals: 6,
    tokenOutDecimals: 18,
    tokenAddresses: [Lido.USDC[1], Lido.DAI[1], Lido.WETH[1], Lido.wstETH[1]],
    swaps: [
        {
            poolId: Lido.StaticPools.wstEthWeth[1],
            amount: '',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[1],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.staBal[1],
            amount: '0',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
    ],
};
// wstETH/USDC: wstETH > WETH > DAI > USDC
Routes[1][`${Lido.wstETH[1]}${Lido.USDC[1]}0`] = {
    name: 'wstETH/USDC-SwapExactIn',
    tokenInDecimals: 18,
    tokenOutDecimals: 6,
    tokenAddresses: [Lido.wstETH[1], Lido.WETH[1], Lido.DAI[1], Lido.USDC[1]],
    swaps: [
        {
            poolId: Lido.StaticPools.wstEthWeth[1],
            amount: '',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[1],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.staBal[1],
            amount: '0',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
    ],
};
Routes[1][`${Lido.wstETH[1]}${Lido.USDC[1]}1`] = {
    name: 'wstETH/USDC-SwapExactOut',
    tokenInDecimals: 18,
    tokenOutDecimals: 6,
    tokenAddresses: [Lido.wstETH[1], Lido.WETH[1], Lido.DAI[1], Lido.USDC[1]],
    swaps: [
        {
            poolId: Lido.StaticPools.staBal[1],
            amount: '',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[1],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wstEthWeth[1],
            amount: '0',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
    ],
};
// USDT/wstETH: USDT > DAI > WETH > wstETH
Routes[1][`${Lido.USDT[1]}${Lido.wstETH[1]}0`] = {
    name: 'USDT/wstETH-SwapExactIn',
    tokenInDecimals: 6,
    tokenOutDecimals: 18,
    tokenAddresses: [Lido.USDT[1], Lido.DAI[1], Lido.WETH[1], Lido.wstETH[1]],
    swaps: [
        {
            poolId: Lido.StaticPools.staBal[1],
            amount: '',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[1],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wstEthWeth[1],
            amount: '0',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
    ],
};
Routes[1][`${Lido.USDT[1]}${Lido.wstETH[1]}1`] = {
    name: 'USDT/wstETH-SwapExactOut',
    tokenInDecimals: 6,
    tokenOutDecimals: 18,
    tokenAddresses: [Lido.USDT[1], Lido.DAI[1], Lido.WETH[1], Lido.wstETH[1]],
    swaps: [
        {
            poolId: Lido.StaticPools.wstEthWeth[1],
            amount: '',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[1],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.staBal[1],
            amount: '0',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
    ],
};
// wstETH/USDT: wstETH > WETH > DAI > USDT
Routes[1][`${Lido.wstETH[1]}${Lido.USDT[1]}0`] = {
    name: 'wstETH/USDT-SwapExactIn',
    tokenInDecimals: 18,
    tokenOutDecimals: 6,
    tokenAddresses: [Lido.wstETH[1], Lido.WETH[1], Lido.DAI[1], Lido.USDT[1]],
    swaps: [
        {
            poolId: Lido.StaticPools.wstEthWeth[1],
            amount: '',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[1],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.staBal[1],
            amount: '0',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
    ],
};
Routes[1][`${Lido.wstETH[1]}${Lido.USDT[1]}1`] = {
    name: 'wstETH/USDT-SwapExactOut',
    tokenInDecimals: 18,
    tokenOutDecimals: 6,
    tokenAddresses: [Lido.wstETH[1], Lido.WETH[1], Lido.DAI[1], Lido.USDT[1]],
    swaps: [
        {
            poolId: Lido.StaticPools.staBal[1],
            amount: '',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[1],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wstEthWeth[1],
            amount: '0',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
    ],
};
// KOVAN STATIC ROUTES FOR LIDO <> Stable
// USDC/wstETH: USDC > WETH > wstETH
Routes[42][`${Lido.USDC[42]}${Lido.wstETH[42]}0`] = {
    name: 'USDC/wstETH-SwapExactIn',
    tokenInDecimals: 6,
    tokenOutDecimals: 18,
    tokenAddresses: [Lido.USDC[42], Lido.WETH[42], Lido.wstETH[42]],
    swaps: [
        {
            poolId: Lido.StaticPools.wethDai[42],
            amount: '',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wstEthWeth[42],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
    ],
};
// wstETH/USDC: wstETH > WETH > USDC
Routes[42][`${Lido.wstETH[42]}${Lido.USDC[42]}0`] = {
    name: 'wstETH/USDC-SwapExactIn',
    tokenInDecimals: 18,
    tokenOutDecimals: 6,
    tokenAddresses: [Lido.wstETH[42], Lido.WETH[42], Lido.USDC[42]],
    swaps: [
        {
            poolId: Lido.StaticPools.wstEthWeth[42],
            amount: '',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[42],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
    ],
};
// USDC/wstETH: USDC > WETH > wstETH
Routes[42][`${Lido.USDC[42]}${Lido.wstETH[42]}1`] = {
    name: 'USDC/wstETH-SwapExactOut',
    tokenInDecimals: 6,
    tokenOutDecimals: 18,
    tokenAddresses: [Lido.USDC[42], Lido.WETH[42], Lido.wstETH[42]],
    swaps: [
        {
            poolId: Lido.StaticPools.wstEthWeth[42],
            amount: '',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[42],
            amount: '0',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
    ],
};
// wstETH/USDC: wstETH > WETH > USDC
Routes[42][`${Lido.wstETH[42]}${Lido.USDC[42]}1`] = {
    name: 'wstETH/USDC-SwapExactOut',
    tokenInDecimals: 18,
    tokenOutDecimals: 6,
    tokenAddresses: [Lido.wstETH[42], Lido.WETH[42], Lido.USDC[42]],
    swaps: [
        {
            poolId: Lido.StaticPools.wethDai[42],
            amount: '',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wstEthWeth[42],
            amount: '0',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
    ],
};
// DAI/wstETH: DAI > USDC > WETH > wstETH
Routes[42][`${Lido.DAI[42]}${Lido.wstETH[42]}0`] = {
    name: 'DAI/wstETH-SwapExactIn',
    tokenInDecimals: 18,
    tokenOutDecimals: 18,
    tokenAddresses: [
        Lido.DAI[42],
        Lido.USDC[42],
        Lido.WETH[42],
        Lido.wstETH[42],
    ],
    swaps: [
        {
            poolId: Lido.StaticPools.staBal[42],
            amount: '',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[42],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wstEthWeth[42],
            amount: '0',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
    ],
};
Routes[42][`${Lido.DAI[42]}${Lido.wstETH[42]}1`] = {
    name: 'DAI/wstETH-SwapExactOut',
    tokenInDecimals: 18,
    tokenOutDecimals: 18,
    tokenAddresses: [
        Lido.DAI[42],
        Lido.USDC[42],
        Lido.WETH[42],
        Lido.wstETH[42],
    ],
    swaps: [
        {
            poolId: Lido.StaticPools.wstEthWeth[42],
            amount: '',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[42],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.staBal[42],
            amount: '0',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
    ],
};
// wstETH/DAI: wstETH > WETH > USDC > DAI
Routes[42][`${Lido.wstETH[42]}${Lido.DAI[42]}0`] = {
    name: 'wstETH/DAI-SwapExactIn',
    tokenInDecimals: 18,
    tokenOutDecimals: 18,
    tokenAddresses: [
        Lido.wstETH[42],
        Lido.WETH[42],
        Lido.USDC[42],
        Lido.DAI[42],
    ],
    swaps: [
        {
            poolId: Lido.StaticPools.wstEthWeth[42],
            amount: '',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[42],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.staBal[42],
            amount: '0',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
    ],
};
Routes[42][`${Lido.wstETH[42]}${Lido.DAI[42]}1`] = {
    name: 'wstETH/DAI-SwapExactOut',
    tokenInDecimals: 18,
    tokenOutDecimals: 18,
    tokenAddresses: [
        Lido.wstETH[42],
        Lido.WETH[42],
        Lido.USDC[42],
        Lido.DAI[42],
    ],
    swaps: [
        {
            poolId: Lido.StaticPools.staBal[42],
            amount: '',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[42],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wstEthWeth[42],
            amount: '0',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
    ],
};
// USDT/wstETH: USDT > USDC > WETH > wstETH
Routes[42][`${Lido.USDT[42]}${Lido.wstETH[42]}0`] = {
    name: 'USDT/wstETH-SwapExactIn',
    tokenInDecimals: 6,
    tokenOutDecimals: 18,
    tokenAddresses: [
        Lido.USDT[42],
        Lido.USDC[42],
        Lido.WETH[42],
        Lido.wstETH[42],
    ],
    swaps: [
        {
            poolId: Lido.StaticPools.staBal[42],
            amount: '',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[42],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wstEthWeth[42],
            amount: '0',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
    ],
};
Routes[42][`${Lido.USDT[42]}${Lido.wstETH[42]}1`] = {
    name: 'USDT/wstETH-SwapExactOut',
    tokenInDecimals: 6,
    tokenOutDecimals: 18,
    tokenAddresses: [
        Lido.USDT[42],
        Lido.USDC[42],
        Lido.WETH[42],
        Lido.wstETH[42],
    ],
    swaps: [
        {
            poolId: Lido.StaticPools.wstEthWeth[42],
            amount: '',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[42],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.staBal[42],
            amount: '0',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
    ],
};
// wstETH/USDT: wstETH > WETH > USDC > USDT
Routes[42][`${Lido.wstETH[42]}${Lido.USDT[42]}0`] = {
    name: 'wstETH/USDT-SwapExactIn',
    tokenInDecimals: 18,
    tokenOutDecimals: 6,
    tokenAddresses: [
        Lido.wstETH[42],
        Lido.WETH[42],
        Lido.USDC[42],
        Lido.USDT[42],
    ],
    swaps: [
        {
            poolId: Lido.StaticPools.wstEthWeth[42],
            amount: '',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[42],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.staBal[42],
            amount: '0',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
    ],
};
Routes[42][`${Lido.wstETH[42]}${Lido.USDT[42]}1`] = {
    name: 'wstETH/USDT-SwapExactOut',
    tokenInDecimals: 18,
    tokenOutDecimals: 6,
    tokenAddresses: [
        Lido.wstETH[42],
        Lido.WETH[42],
        Lido.USDC[42],
        Lido.USDT[42],
    ],
    swaps: [
        {
            poolId: Lido.StaticPools.staBal[42],
            amount: '',
            assetInIndex: '2',
            assetOutIndex: '3',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wethDai[42],
            amount: '0',
            assetInIndex: '1',
            assetOutIndex: '2',
            userData: '0x',
        },
        {
            poolId: Lido.StaticPools.wstEthWeth[42],
            amount: '0',
            assetInIndex: '0',
            assetOutIndex: '1',
            userData: '0x',
        },
    ],
};
// Only want static routes for Lido <> Stable
function isLidoStableSwap(chainId, tokenIn, tokenOut) {
    if (!Lido.Networks.includes(chainId)) return false;
    tokenIn = tokenIn.toLowerCase();
    tokenOut = tokenOut.toLowerCase();
    if (
        (tokenIn === Lido.wstETH[chainId] && tokenOut === Lido.DAI[chainId]) ||
        (tokenIn === Lido.wstETH[chainId] && tokenOut === Lido.USDC[chainId]) ||
        (tokenIn === Lido.wstETH[chainId] && tokenOut === Lido.USDT[chainId]) ||
        (tokenIn === Lido.DAI[chainId] && tokenOut === Lido.wstETH[chainId]) ||
        (tokenIn === Lido.USDC[chainId] && tokenOut === Lido.wstETH[chainId]) ||
        (tokenIn === Lido.USDT[chainId] && tokenOut === Lido.wstETH[chainId]) ||
        (tokenIn === Lido.stETH[chainId] && tokenOut === Lido.DAI[chainId]) ||
        (tokenIn === Lido.stETH[chainId] && tokenOut === Lido.USDC[chainId]) ||
        (tokenIn === Lido.stETH[chainId] && tokenOut === Lido.USDT[chainId]) ||
        (tokenIn === Lido.DAI[chainId] && tokenOut === Lido.stETH[chainId]) ||
        (tokenIn === Lido.USDC[chainId] && tokenOut === Lido.stETH[chainId]) ||
        (tokenIn === Lido.USDT[chainId] && tokenOut === Lido.stETH[chainId])
    )
        return true;
    else return false;
}
// Uses Vault queryBatchSwap to get return amount for swap
function queryBatchSwap$1(swapType, swaps, assets, provider) {
    return __awaiter(this, void 0, void 0, function* () {
        const vaultAddr = '0xBA12222222228d8Ba445958a75a0704d566BF2C8';
        const vaultContract = new contracts.Contract(
            vaultAddr,
            vaultAbi,
            provider
        );
        const funds = {
            sender: constants.AddressZero,
            recipient: constants.AddressZero,
            fromInternalBalance: false,
            toInternalBalance: false,
        };
        try {
            const deltas = yield vaultContract.callStatic.queryBatchSwap(
                swapType,
                swaps,
                assets,
                funds
            );
            // negative amounts represent tokens (or ETH) sent by the Vault
            if (swapType === exports.SwapTypes.SwapExactIn)
                return deltas[assets.length - 1].mul(-1);
            else return deltas[0];
        } catch (err) {
            console.error(
                `SOR - Lido Static Route QueryBatchSwap Error. No swaps.`
            );
            return constants.Zero;
        }
    });
}
/*
Spot Price for path is product of each pools SP for relevant tokens.
(See helpersClass getSpotPriceAfterSwapForPath)
*/
function calculateMarketSp(swapType, swaps, assets, pools) {
    const spotPrices = [];
    for (let i = 0; i < swaps.length; i++) {
        const swap = swaps[i];
        // Find matching pool from list so we can use balances, etc
        const pool = pools.filter((p) => p.id === swap.poolId);
        if (pool.length !== 1) return bnum(0);
        // This will get a specific pool type so we can call parse and spot price functions
        const newPool = parseNewPool(pool[0]);
        if (!newPool) return bnum(0);
        // Parses relevant balances, etc
        const poolPairData = newPool.parsePoolPairData(
            assets[swap.assetInIndex],
            assets[swap.assetOutIndex]
        );
        // Calculate current spot price
        let spotPrice;
        if (swapType === exports.SwapTypes.SwapExactIn)
            spotPrice = newPool._spotPriceAfterSwapExactTokenInForTokenOut(
                poolPairData,
                ZERO
            );
        // Amount = 0 to just get current SP
        else
            spotPrice = newPool._spotPriceAfterSwapTokenInForExactTokenOut(
                poolPairData,
                ZERO
            ); // Amount = 0 to just get current SP
        // console.log(`${swap.poolId} ${spotPrice.toString()}`);
        spotPrices.push(spotPrice);
    }
    // SP for Path is product of all
    return spotPrices.reduce((a, b) => a.times(b));
}
function getStEthRate(provider, chainId) {
    return __awaiter(this, void 0, void 0, function* () {
        // Call stEthPerToken or tokensPerStETH to get the scaling factors in each direction.
        const wstETHContract = new contracts.Contract(
            Lido.wstETH[chainId],
            ['function tokensPerStEth() external view returns (uint256)'],
            provider
        );
        const rate = yield wstETHContract.tokensPerStEth();
        return rate;
    });
}
/*
Used when SOR doesn't support paths with more than one hop.
Enables swapping of stables <> wstETH via WETH/DAI pool which has good liquidity.
*/
function getLidoStaticSwaps(
    pools,
    chainId,
    tokenIn,
    tokenOut,
    swapType,
    swapAmount,
    provider
) {
    return __awaiter(this, void 0, void 0, function* () {
        // Check for stETH tokens and convert to use wstETH for routing
        let isWrappingIn,
            isWrappingOut = false;
        if (tokenIn === Lido.stETH[chainId]) {
            tokenIn = Lido.wstETH[chainId];
            isWrappingIn = true;
        }
        if (tokenOut === Lido.stETH[chainId]) {
            tokenOut = Lido.wstETH[chainId];
            isWrappingOut = true;
        }
        const swapInfo = cloneDeep(EMPTY_SWAPINFO);
        const staticRoute = Routes[chainId][`${tokenIn}${tokenOut}${swapType}`];
        if (!staticRoute) return swapInfo;
        swapInfo.tokenAddresses = staticRoute.tokenAddresses;
        swapInfo.swaps = staticRoute.swaps;
        swapInfo.swapAmount = swapAmount;
        // if (swapType === SwapTypes.SwapExactIn)
        //     swapInfo.swapAmount = scale(swapAmount, staticRoute.tokenInDecimals).dp(
        //         0
        //     );
        // else
        //     swapInfo.swapAmount = scale(
        //         swapAmount,
        //         staticRoute.tokenOutDecimals
        //     ).dp(0);
        swapInfo.swaps[0].amount = swapInfo.swapAmount.toString();
        if (isWrappingIn) swapInfo.tokenIn = Lido.stETH[chainId];
        else swapInfo.tokenIn = tokenIn;
        if (isWrappingOut) swapInfo.tokenOut = Lido.stETH[chainId];
        else swapInfo.tokenOut = tokenOut;
        // Calculate SP as product of all pool SP in path
        swapInfo.marketSp = calculateMarketSp(
            swapType,
            swapInfo.swaps,
            swapInfo.tokenAddresses,
            pools
        ).toString();
        // Unlike main SOR here we haven't calculated the return amount for swaps so use query call on Vault to get value.
        swapInfo.returnAmount = yield queryBatchSwap$1(
            swapType,
            swapInfo.swaps,
            swapInfo.tokenAddresses,
            provider
        );
        if (swapInfo.returnAmount.isZero()) {
            return cloneDeep(EMPTY_SWAPINFO);
        }
        // Considering fees shouldn't matter as there won't be alternative options on V1
        swapInfo.returnAmountConsideringFees = swapInfo.returnAmount;
        return swapInfo;
    });
}

// The unbutton ERC-20 wrapper is a generic wrapper which wraps any rebasing token
// into a fixed balance version.
// https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/UnbuttonToken.sol#L18
const TokensToUnbuttonWrapperMap = {
    Networks: [1],
    1: {
        // underlying => wrapper
        // AMPL => WAMPL
        '0xd46ba6d942050d489dbd938a2c909a5d5039a161':
            '0xedb171c18ce90b633db442f2a6f72874093b49ef',
        // aAMPL -> ubAAMPL
        '0x1e6bb68acec8fefbd87d192be09bb274170a0548':
            '0xF03387d8d0FF326ab586A58E0ab4121d106147DF',
    },
};
// Returns the current wrapper exchange rate,
// ie) number of wrapper tokens for 1e18 (ONE) underlying token
function getWrapperRate(provider, wrapperAddress) {
    return __awaiter(this, void 0, void 0, function* () {
        const ubWrapper = new contracts.Contract(
            wrapperAddress,
            [
                'function underlyingToWrapper(uint256 amount) external view returns (uint256)',
            ],
            provider
        );
        return ubWrapper.underlyingToWrapper(constants.WeiPerEther);
    });
}

var WrapTypes;
(function (WrapTypes) {
    WrapTypes[(WrapTypes['None'] = 0)] = 'None';
    WrapTypes[(WrapTypes['ETH'] = 1)] = 'ETH';
    WrapTypes[(WrapTypes['stETH'] = 2)] = 'stETH';
    WrapTypes[(WrapTypes['Unbutton'] = 3)] = 'Unbutton';
})(WrapTypes || (WrapTypes = {}));
function getWrappedInfo(
    provider,
    swapType,
    tokenIn,
    tokenOut,
    config,
    swapAmount
) {
    return __awaiter(this, void 0, void 0, function* () {
        // The Subgraph returns tokens in lower case format so we must match this
        tokenIn = tokenIn.toLowerCase();
        tokenOut = tokenOut.toLowerCase();
        let swapAmountForSwaps = swapAmount;
        let tokenInForSwaps = tokenIn;
        let tokenInWrapType = WrapTypes.None;
        let tokenOutForSwaps = tokenOut;
        let tokenOutWrapType = WrapTypes.None;
        let tokenInRate = constants.WeiPerEther;
        let tokenOutRate = constants.WeiPerEther;
        //--------------------------------------------------------------------------
        // ETH/WETH
        // Handle ETH wrapping
        if (tokenIn === constants.AddressZero) {
            tokenInForSwaps = config.weth.toLowerCase();
            tokenInWrapType = WrapTypes.ETH;
        }
        // Handle WETH unwrapping
        if (tokenOut === constants.AddressZero) {
            tokenOutForSwaps = config.weth.toLowerCase();
            tokenOutWrapType = WrapTypes.ETH;
        }
        //--------------------------------------------------------------------------
        // stETH/wstETH
        // Handle stETH wrapping
        if (tokenIn === Lido.stETH[config.chainId]) {
            tokenInForSwaps = Lido.wstETH[config.chainId];
            tokenInWrapType = WrapTypes.stETH;
            const rate = yield getStEthRate(provider, config.chainId);
            tokenInRate = rate;
            if (swapType === exports.SwapTypes.SwapExactIn)
                swapAmountForSwaps = swapAmount
                    .mul(rate)
                    .div(constants.WeiPerEther);
        }
        // Handle wstETH unwrapping
        if (tokenOut === Lido.stETH[config.chainId]) {
            tokenOutForSwaps = Lido.wstETH[config.chainId];
            tokenOutWrapType = WrapTypes.stETH;
            const rate = yield getStEthRate(provider, config.chainId);
            tokenOutRate = rate;
            if (swapType === exports.SwapTypes.SwapExactOut)
                swapAmountForSwaps = swapAmount
                    .mul(rate)
                    .div(constants.WeiPerEther);
        }
        //--------------------------------------------------------------------------
        // ubTokens
        // Gets a list of all the tokens and their unbutton wrappers
        const tokensToUBWrapperMap =
            TokensToUnbuttonWrapperMap[config.chainId] || {};
        // Handle token unbutton wrapping
        if (tokensToUBWrapperMap[tokenIn]) {
            tokenInForSwaps = tokensToUBWrapperMap[tokenIn];
            tokenInWrapType = WrapTypes.Unbutton;
            tokenInRate = yield getWrapperRate(provider, tokenInForSwaps);
            if (swapType === exports.SwapTypes.SwapExactIn)
                swapAmountForSwaps = swapAmount
                    .mul(tokenInRate)
                    .div(constants.WeiPerEther);
        }
        // Handle unbutton token unwrapping
        if (tokensToUBWrapperMap[tokenOut]) {
            tokenOutForSwaps = tokensToUBWrapperMap[tokenOut];
            tokenOutWrapType = WrapTypes.Unbutton;
            tokenOutRate = yield getWrapperRate(provider, tokenOutForSwaps);
            if (swapType === exports.SwapTypes.SwapExactOut)
                swapAmountForSwaps = swapAmount
                    .mul(tokenOutRate)
                    .div(constants.WeiPerEther);
        }
        //--------------------------------------------------------------------------
        return {
            swapAmountOriginal: swapAmount,
            swapAmountForSwaps: swapAmountForSwaps,
            tokenIn: {
                addressOriginal: tokenIn,
                addressForSwaps: tokenInForSwaps,
                wrapType: tokenInWrapType,
                rate: tokenInRate,
            },
            tokenOut: {
                addressOriginal: tokenOut,
                addressForSwaps: tokenOutForSwaps,
                wrapType: tokenOutWrapType,
                rate: tokenOutRate,
            },
        };
    });
}
function setWrappedInfo(swapInfo, swapType, wrappedInfo, config) {
    if (swapInfo.swaps.length === 0) return swapInfo;
    swapInfo.tokenIn = wrappedInfo.tokenIn.addressOriginal;
    swapInfo.tokenOut = wrappedInfo.tokenOut.addressOriginal;
    swapInfo.swapAmountForSwaps = swapInfo.swapAmount;
    swapInfo.returnAmountFromSwaps = swapInfo.returnAmount;
    // No wrapping required
    if (
        wrappedInfo.tokenIn.wrapType === WrapTypes.None &&
        wrappedInfo.tokenOut.wrapType === WrapTypes.None
    ) {
        return swapInfo;
    }
    //--------------------------------------------------------------------------
    // Wrappers which are 1:1 (ETH/WETH), ie UnscaledWrappers
    // Replace weth with ZERO/ETH in assets for Vault to handle ETH directly
    if (
        wrappedInfo.tokenIn.wrapType === WrapTypes.ETH ||
        wrappedInfo.tokenOut.wrapType === WrapTypes.ETH
    ) {
        swapInfo.tokenAddresses = swapInfo.tokenAddresses.map((addr) =>
            isSameAddress(addr, config.weth) ? constants.AddressZero : addr
        );
    }
    //--------------------------------------------------------------------------
    // Wrappers which are NOT 1:1 (stETH/wstETH, AMPL/WAMPL, all ubTokens etc)
    // ie ScaledWrappers
    const isScaledWrapper = (wrapType) =>
        wrapType === WrapTypes.stETH || wrapType === WrapTypes.Unbutton;
    // Scaling required for wrappers which don't scale 1:1 with the underlying token
    // swap amount and return amounts are scaled if swap type is SwapExact
    // Handle swap amount scaling
    if (
        (isScaledWrapper(wrappedInfo.tokenIn.wrapType) &&
            swapType === exports.SwapTypes.SwapExactIn) ||
        (isScaledWrapper(wrappedInfo.tokenOut.wrapType) &&
            swapType === exports.SwapTypes.SwapExactOut)
    ) {
        swapInfo.swapAmount = wrappedInfo.swapAmountOriginal;
        swapInfo.swapAmountForSwaps = wrappedInfo.swapAmountForSwaps;
    }
    // Handle return amount scaling
    // SwapExactIn, unwrapped out, returnAmount is unwrapped amount out, returnAmountForSwaps is wrapped amount out
    if (
        swapType === exports.SwapTypes.SwapExactIn &&
        isScaledWrapper(wrappedInfo.tokenOut.wrapType)
    ) {
        swapInfo.returnAmount = swapInfo.returnAmount
            .mul(constants.WeiPerEther)
            .div(wrappedInfo.tokenOut.rate);
        swapInfo.returnAmountConsideringFees =
            swapInfo.returnAmountConsideringFees
                .mul(constants.WeiPerEther)
                .div(wrappedInfo.tokenOut.rate);
    }
    // SwapExactOut, unwrapped in, returnAmount us unwrapped amount in, returnAmountForSwaps is wrapped amount in
    if (
        swapType === exports.SwapTypes.SwapExactOut &&
        isScaledWrapper(wrappedInfo.tokenIn.wrapType)
    ) {
        swapInfo.returnAmount = swapInfo.returnAmount
            .mul(constants.WeiPerEther)
            .div(wrappedInfo.tokenIn.rate);
        swapInfo.returnAmountConsideringFees =
            swapInfo.returnAmountConsideringFees
                .mul(constants.WeiPerEther)
                .div(wrappedInfo.tokenIn.rate);
    }
    return swapInfo;
}

/**
 * @returns an array of deduplicated token addresses used in the provided swaps
 */
const getTokenAddresses = (swaps) => {
    const tokenAddressesSet = new Set(
        swaps.flatMap((sequence) =>
            sequence.flatMap((swap) => [swap.tokenIn, swap.tokenOut])
        )
    );
    return [...tokenAddressesSet];
};
/**
 * @dev Assumes that intermediate swaps have been properly formatted using the zero sentinel value
 * @returns the total amount of tokens used in the described batchSwap
 */
const getTotalSwapAmount = (swaps) => {
    return swaps.reduce((acc, { amount }) => acc.add(amount), constants.Zero);
};
/**
 * Formats a sequence of swaps to the format expected by the Balance Vault.
 * @dev Intermediate swaps' amounts are replaced with the sentinel value of zero
 *      and exact output sequences are reversed.
 * @param swapKind - a SwapTypes enum for whether the swap has an exact input or exact output
 * @param sequence - a sequence of swaps which form a path from the input token to the output token
 * @param tokenAddresses - an array of all the token address which are involved in the batchSwap
 * @returns
 */
const formatSequence = (swapKind, sequence, tokenAddresses) => {
    if (swapKind === exports.SwapTypes.SwapExactOut) {
        // GIVEN_OUT sequences must be passed to the vault in reverse order.
        // After reversing the sequence we can treat them almost equivalently to GIVEN_IN sequences
        sequence = sequence.reverse();
    }
    return sequence.map((swap, i) => {
        // Multihop swaps can be executed by passing an `amountIn` value of zero for a swap. This will cause the amount out
        // of the previous swap to be used as the amount in of the current one. In such a scenario, `tokenIn` must equal the
        // previous swap's `tokenOut`.
        let amountScaled = '0';
        // First swap needs to be given a value so we inject this from SOR solution
        if (i === 0) {
            // If it's a GIVEN_IN swap then swapAmount is in terms of tokenIn
            // and vice versa for GIVEN_OUT
            const scalingFactor =
                swapKind === exports.SwapTypes.SwapExactIn
                    ? swap.tokenInDecimals
                    : swap.tokenOutDecimals;
            amountScaled = scale(bnum(swap.swapAmount), scalingFactor)
                .decimalPlaces(0, 1)
                .toString();
        }
        const assetInIndex = tokenAddresses.indexOf(swap.tokenIn);
        const assetOutIndex = tokenAddresses.indexOf(swap.tokenOut);
        return {
            poolId: swap.pool,
            assetInIndex,
            assetOutIndex,
            amount: amountScaled,
            userData: '0x',
        };
    });
};
function formatSwaps(
    swapsOriginal,
    swapType,
    swapAmount,
    tokenIn,
    tokenOut,
    returnAmount,
    returnAmountConsideringFees,
    marketSp
) {
    if (swapsOriginal.length === 0) {
        return cloneDeep(EMPTY_SWAPINFO);
    }
    const swapsClone = cloneDeep(swapsOriginal);
    const tokenAddresses = getTokenAddresses(swapsClone);
    const swaps = swapsClone.flatMap((sequence) =>
        formatSequence(swapType, sequence, tokenAddresses)
    );
    // We need to account for any rounding losses by adding dust to first path
    const dust = swapAmount.sub(getTotalSwapAmount(swaps));
    if (dust.gt(0)) {
        swaps[0].amount = bignumber.BigNumber.from(swaps[0].amount)
            .add(dust)
            .toString();
    }
    const routes = formatRoutes(swapsOriginal, swapAmount);
    const swapInfo = {
        swapAmount,
        returnAmount,
        returnAmountConsideringFees,
        swaps,
        tokenAddresses,
        tokenIn,
        tokenOut,
        marketSp,
        routes,
    };
    return swapInfo;
}
/**
 * Formats a sequence of swaps to a format that is useful for displaying the routes in user interfaces.
 * @dev The swaps are converted to an array of routes, where each route has an array of hops
 * @param routes - The original Swaps
 * @param swapAmount - The total amount being swapped
 * @returns SwapInfoRoute[] - The swaps formatted as routes with hops
 */
function formatRoutes(routes, swapAmount) {
    return routes.map((swaps) => {
        const first = swaps[0];
        const last = swaps[swaps.length - 1];
        const tokenInAmountScaled = scale(
            bnum(first.swapAmount || '0'),
            first.tokenInDecimals
        );
        return {
            tokenIn: first.tokenIn,
            tokenOut: last.tokenOut,
            tokenInAmount: first.swapAmount || '0',
            tokenOutAmount: last.swapAmountOut || '0',
            share: tokenInAmountScaled
                .div(bnum(swapAmount.toString()))
                .toNumber(),
            hops: swaps.map((swap) => {
                return {
                    tokenIn: swap.tokenIn,
                    tokenOut: swap.tokenOut,
                    tokenInAmount: swap.swapAmount || '0',
                    tokenOutAmount: swap.swapAmountOut || '0',
                    poolId: swap.pool,
                };
            }),
        };
    });
}

class PoolCacher {
    constructor(poolDataService) {
        this.poolDataService = poolDataService;
        this.pools = [];
        this._finishedFetching = false;
    }
    get finishedFetching() {
        return this._finishedFetching;
    }
    getPools() {
        return cloneDeep(this.pools);
    }
    /*
     * Saves updated pools data to internal cache.
     */
    fetchPools() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.pools = yield this.poolDataService.getPools();
                this._finishedFetching = true;
                return true;
            } catch (err) {
                // On error clear all caches and return false so user knows to try again.
                this._finishedFetching = false;
                this.pools = [];
                console.error(`Error: fetchPools(): ${err.message}`);
                return false;
            }
        });
    }
}

const filterPoolsByType = (pools, poolTypeFilter) => {
    if (poolTypeFilter === exports.PoolFilter.All) return pools;
    return pools.filter((p) => p.poolType === poolTypeFilter);
};
// Creates a path with pools.length hops
// i.e. tokens[0]>[Pool0]>tokens[1]>[Pool1]>tokens[2]>[Pool2]>tokens[3]
function createPath(tokens, pools, allPools, pathCache) {
    let tI, tO;
    let swaps = [];
    let pairData = [];
    for (let i = 0; i < pools.length; i++) {
        tI = tokens[i];
        tO = tokens[i + 1];
        if (pathCache && pathCache[`${pools[i].id}-${tI}-${tO}`]) {
            const cached = pathCache[`${pools[i].id}-${tI}-${tO}`];
            swaps = [...swaps, ...cached.swaps];
            pairData = [...pairData, ...cached.pairData];
            continue;
        }
        let poolSwaps = [];
        let poolPairData = [];
        //nested linearPools arrive here with tI or tO mapped to the main token
        //we expand the path to accommodate the additional swaps needed for a nested linear pool
        const nestedLinearPools = getNestedLinearPoolsMap(pools[i], allPools);
        //TODO: if a hop token is a nested BPT (linear of stable phantom), we don't need to unwind it, we can just use the BPT
        if (nestedLinearPools[tI] || nestedLinearPools[tO]) {
            const result = createNestedSwapPath(
                tI,
                tO,
                pools[i],
                nestedLinearPools,
                allPools
            );
            poolSwaps = result.map((item) => item.swap);
            poolPairData = result.map((item) => item.poolPair);
        } else {
            const poolPair = pools[i].parsePoolPairData(tI, tO);
            poolPairData.push(poolPair);
            const swap = {
                pool: pools[i].id,
                tokenIn: tI,
                tokenOut: tO,
                tokenInDecimals: poolPair.decimalsIn,
                tokenOutDecimals: poolPair.decimalsOut,
            };
            poolSwaps.push(swap);
        }
        if (pathCache) {
            pathCache[`${pools[i].id}-${tI}-${tO}`] = {
                swaps: poolSwaps,
                pairData: poolPairData,
            };
        }
        swaps = [...swaps, ...poolSwaps];
        pairData = [...pairData, ...poolPairData];
    }
    const path = {
        id: pairData.map((item) => item.id).join(''),
        swaps,
        limitAmount: constants.Zero,
        poolPairData: pairData,
        pools: pairData.map((data) => allPools[data.address]),
    };
    return path;
}
function parseToPoolsDict(pools, timestamp) {
    return Object.fromEntries(
        cloneDeep(pools)
            .filter(
                (pool) =>
                    pool.tokensList.length > 0 && pool.tokens[0].balance !== '0'
            )
            .map((pool) => [pool.id, parseNewPool(pool, timestamp)])
            .filter(([, pool]) => pool !== undefined)
    );
}

function calculatePathLimits(paths, swapType) {
    let maxLiquidityAvailable = constants.Zero;
    paths.forEach((path) => {
        // Original parsedPoolPairForPath here but this has already been done.
        path.limitAmount = getLimitAmountSwapForPath(path, swapType);
        // if (path.limitAmount.isNaN()) throw 'path.limitAmount.isNaN';
        maxLiquidityAvailable = maxLiquidityAvailable.add(path.limitAmount);
    });
    const sortedPaths = paths.sort((a, b) => {
        return b.limitAmount.gt(a.limitAmount) ? 1 : -1;
    });
    return [sortedPaths, maxLiquidityAvailable];
}
function getLimitAmountSwapForPath(path, swapType) {
    const poolPairData = path.poolPairData;
    let limit;
    if (swapType === exports.SwapTypes.SwapExactIn) {
        limit = path.pools[poolPairData.length - 1].getLimitAmountSwap(
            poolPairData[poolPairData.length - 1],
            exports.SwapTypes.SwapExactIn
        );
        for (let i = poolPairData.length - 2; i >= 0; i--) {
            const poolLimitExactIn = path.pools[i].getLimitAmountSwap(
                poolPairData[i],
                exports.SwapTypes.SwapExactIn
            );
            const poolLimitExactOut = path.pools[i].getLimitAmountSwap(
                poolPairData[i],
                exports.SwapTypes.SwapExactOut
            );
            if (poolLimitExactOut.lte(limit)) {
                limit = poolLimitExactIn;
            } else {
                const pulledLimit = getOutputAmountSwap(
                    path.pools[i],
                    path.poolPairData[i],
                    exports.SwapTypes.SwapExactOut,
                    limit
                );
                limit = BigNumber.min(pulledLimit, poolLimitExactIn);
            }
        }
        if (limit.isZero()) return constants.Zero;
        const result = bignumber.parseFixed(
            limit.dp(poolPairData[0].decimalsIn).toString(),
            poolPairData[0].decimalsIn
        );
        return result;
    } else {
        limit = path.pools[0].getLimitAmountSwap(
            poolPairData[0],
            exports.SwapTypes.SwapExactOut
        );
        for (let i = 1; i < poolPairData.length; i++) {
            const poolLimitExactIn = path.pools[i].getLimitAmountSwap(
                poolPairData[i],
                exports.SwapTypes.SwapExactIn
            );
            const poolLimitExactOut = path.pools[i].getLimitAmountSwap(
                poolPairData[i],
                exports.SwapTypes.SwapExactOut
            );
            if (poolLimitExactIn.lte(limit)) {
                limit = poolLimitExactOut;
            } else {
                const pushedLimit = getOutputAmountSwap(
                    path.pools[i],
                    path.poolPairData[i],
                    exports.SwapTypes.SwapExactIn,
                    limit
                );
                limit = BigNumber.min(pushedLimit, poolLimitExactOut);
            }
        }
        if (limit.isZero()) return constants.Zero;
        return bignumber.parseFixed(
            limit
                .dp(poolPairData[poolPairData.length - 1].decimalsOut)
                .toString(),
            poolPairData[poolPairData.length - 1].decimalsOut
        );
    }
}

class RouteProposer {
    constructor(config) {
        this.config = config;
        this.graph = null;
        this.cache = {};
    }
    initGraph(pools, timestamp) {
        const poolsAllDict = parseToPoolsDict(pools, timestamp);
        const poolsAllAddressDict = lodash.exports.mapKeys(
            poolsAllDict,
            (pool) => pool.address
        );
        this.graph = createGraph(poolsAllAddressDict);
        //clear the cache
        this.cache = {};
    }
    /**
     * Given a list of pools and a desired input/output, returns a set of possible paths to route through
     */
    getCandidatePaths(tokenIn, tokenOut, swapType, pools, swapOptions) {
        if (pools.length === 0) return [];
        // If token pair has been processed before that info can be reused to speed up execution
        const cache =
            this.cache[
                `${tokenIn}${tokenOut}${swapType}${swapOptions.timestamp}`
            ];
        // forceRefresh can be set to force fresh processing of paths/prices
        if (!swapOptions.forceRefresh && !!cache) {
            // Using pre-processed data from cache
            return cache.paths;
        }
        const poolsAllDict = parseToPoolsDict(pools, swapOptions.timestamp);
        const poolsAllAddressDict = lodash.exports.mapKeys(
            poolsAllDict,
            (pool) => pool.address
        );
        if (this.graph === null) {
            this.graph = createGraph(poolsAllAddressDict);
        }
        let graphPaths = [];
        const isRelayerRoute = !!(
            poolsAllAddressDict[tokenIn] || poolsAllAddressDict[tokenOut]
        );
        findPaths(
            this.graph,
            poolsAllAddressDict,
            tokenIn,
            tokenOut,
            [tokenIn],
            1,
            2,
            isRelayerRoute,
            (foundPaths) => {
                graphPaths = [...graphPaths, ...foundPaths];
            }
        );
        if (graphPaths.length < 3) {
            findPaths(
                this.graph,
                poolsAllAddressDict,
                tokenIn,
                tokenOut,
                [tokenIn],
                1,
                3,
                isRelayerRoute,
                (foundPaths) => {
                    graphPaths = [...graphPaths, ...foundPaths];
                }
            );
        }
        const sortedPaths = sortAndFilterPaths(
            graphPaths,
            poolsAllAddressDict,
            swapOptions
        );
        const pathCache = {};
        const paths = sortedPaths.map((path) => {
            const tokens = [
                path[0].tokenIn,
                ...path.map((segment) => segment.tokenOut),
            ];
            return createPath(
                tokens,
                path.map((segment) => poolsAllDict[segment.poolId]),
                poolsAllAddressDict,
                pathCache
            );
        });
        const [pathsWithLimits] = calculatePathLimits(paths, swapType);
        this.cache[`${tokenIn}${tokenOut}${swapType}${swapOptions.timestamp}`] =
            { paths: pathsWithLimits };
        return pathsWithLimits;
    }
}

class SwapCostCalculator {
    constructor(config, tokenPriceService) {
        this.tokenPriceService = tokenPriceService;
        this.tokenPriceCache = {
            AddressZero: '1',
            [config.weth.toLowerCase()]: '1',
        };
    }
    /**
     * Calculate the cost of spending a certain amount of gas in terms of a token.
     * This allows us to determine whether an increased amount of tokens gained
     * is worth spending this extra gas (e.g. by including an extra pool in a swap)
     */
    convertGasCostToToken(
        tokenAddress,
        tokenDecimals,
        gasPriceWei,
        swapGas = bignumber.BigNumber.from('35000')
    ) {
        return __awaiter(this, void 0, void 0, function* () {
            if (gasPriceWei.isZero() || swapGas.isZero()) return constants.Zero;
            const tokenPrice = yield this.getNativeAssetPriceInToken(
                tokenAddress
            );
            const tokenPriceWei = bignumber.BigNumber.from(
                scale(bnum(tokenPrice), tokenDecimals).dp(0).toString()
            );
            return gasPriceWei
                .mul(swapGas)
                .mul(tokenPriceWei)
                .div(constants.WeiPerEther);
        });
    }
    /**
     * @param tokenAddress - the address of the token for which to express the native asset in terms of
     * @param tokenPrice - the price of the native asset in terms of the provided token
     */
    setNativeAssetPriceInToken(tokenAddress, tokenPrice) {
        this.tokenPriceCache[tokenAddress.toLowerCase()] = tokenPrice;
    }
    /**
     * @param tokenAddress - the address of the token for which to express the native asset in terms of
     */
    getNativeAssetPriceInToken(tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            // Check if we have token price cached
            const cachedTokenPrice =
                this.tokenPriceCache[tokenAddress.toLowerCase()];
            if (cachedTokenPrice) return cachedTokenPrice;
            try {
                const ethPriceInToken =
                    yield this.tokenPriceService.getNativeAssetPriceInToken(
                        tokenAddress
                    );
                //cache the price so we don't need to refetch it
                this.setNativeAssetPriceInToken(tokenAddress, ethPriceInToken);
                return ethPriceInToken;
            } catch (err) {
                console.log('Error Getting Token Price. Defaulting to 0.');
                console.log(err);
                return '0';
            }
        });
    }
}

class SOR {
    /**
     * @param {Provider} provider - Provider.
     * @param {SorConfig} config - Chain specific configuration for the SOR.
     * @param {PoolDataService} poolDataService - Generic service that fetches pool data from an external data source.
     * @param {TokenPriceService} tokenPriceService - Generic service that fetches token prices from an external price feed. Used in calculating swap cost.
     */
    constructor(provider, config, poolDataService, tokenPriceService) {
        this.provider = provider;
        this.config = config;
        this.defaultSwapOptions = {
            gasPrice: bignumber.parseFixed('50', 9),
            swapGas: bignumber.BigNumber.from('35000'),
            poolTypeFilter: exports.PoolFilter.All,
            maxPools: 4,
            timestamp: Math.floor(Date.now() / 1000),
            forceRefresh: false,
        };
        this.poolCacher = new PoolCacher(poolDataService);
        this.routeProposer = new RouteProposer(config);
        this.swapCostCalculator = new SwapCostCalculator(
            config,
            tokenPriceService
        );
    }
    getPools() {
        return this.poolCacher.getPools();
    }
    /**
     * fetchPools Retrieves pools information and saves to internal pools cache.
     * @returns {boolean} True if pools fetched successfully, False if not.
     */
    fetchPools() {
        return __awaiter(this, void 0, void 0, function* () {
            const success = yield this.poolCacher.fetchPools();
            //initialize the graph it is hasn't been yet
            if (success && this.routeProposer.graph === null) {
                this.routeProposer.initGraph(
                    this.getPools(),
                    this.defaultSwapOptions.timestamp
                );
            }
            return success;
        });
    }
    /**
     * reloadGraph Reloads the route graph to reflect more recent pool data
     */
    reloadGraph() {
        this.routeProposer.initGraph(
            this.getPools(),
            this.defaultSwapOptions.timestamp
        );
    }
    /**
     * getSwaps Retrieve information for best swap tokenIn>tokenOut.
     * @param {string} tokenIn - Address of tokenIn.
     * @param {string} tokenOut - Address of tokenOut.
     * @param {SwapTypes} swapType - SwapExactIn where the amount of tokens in (sent to the Pool) is known or SwapExactOut where the amount of tokens out (received from the Pool) is known.
     * @param {BigNumberish} swapAmount - Either amountIn or amountOut depending on the `swapType` value.
     * @returns {SwapInfo} Swap information including return amount and swaps structure to be submitted to Vault.
     */
    getSwaps(tokenIn, tokenOut, swapType, swapAmount, swapOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.poolCacher.finishedFetching)
                return cloneDeep(EMPTY_SWAPINFO);
            // Set any unset options to their defaults
            const options = Object.assign(
                Object.assign({}, this.defaultSwapOptions),
                swapOptions
            );
            const pools = this.poolCacher.getPools();
            const filteredPools = filterPoolsByType(
                pools,
                options.poolTypeFilter
            );
            const wrappedInfo = yield getWrappedInfo(
                this.provider,
                swapType,
                tokenIn,
                tokenOut,
                this.config,
                bignumber.BigNumber.from(swapAmount)
            );
            let swapInfo;
            if (isLidoStableSwap(this.config.chainId, tokenIn, tokenOut)) {
                swapInfo = yield getLidoStaticSwaps(
                    filteredPools,
                    this.config.chainId,
                    wrappedInfo.tokenIn.addressForSwaps,
                    wrappedInfo.tokenOut.addressForSwaps,
                    swapType,
                    wrappedInfo.swapAmountForSwaps,
                    this.provider
                );
            } else {
                swapInfo = yield this.processSwaps(
                    wrappedInfo.tokenIn.addressForSwaps,
                    wrappedInfo.tokenOut.addressForSwaps,
                    swapType,
                    wrappedInfo.swapAmountForSwaps,
                    filteredPools,
                    options
                );
            }
            if (swapInfo.returnAmount.isZero()) return swapInfo;
            swapInfo = setWrappedInfo(
                swapInfo,
                swapType,
                wrappedInfo,
                this.config
            );
            return swapInfo;
        });
    }
    /**
     * getCostOfSwapInToken Calculates and saves price of a swap in outputToken denomination. Used to determine if extra swaps are cost effective.
     * @param {string} outputToken - Address of outputToken.
     * @param {number} outputTokenDecimals - Decimals of outputToken.
     * @param {BigNumber} gasPrice - Gas price used to calculate cost.
     * @param {BigNumber} swapGas - Gas cost of a swap. Default=35000.
     * @returns {BigNumber} Price of a swap in outputToken denomination.
     */
    getCostOfSwapInToken(outputToken, outputTokenDecimals, gasPrice, swapGas) {
        return __awaiter(this, void 0, void 0, function* () {
            if (gasPrice.isZero()) return constants.Zero;
            return this.swapCostCalculator.convertGasCostToToken(
                outputToken,
                outputTokenDecimals,
                gasPrice,
                swapGas
            );
        });
    }
    // Will process swap/pools data and return best swaps
    processSwaps(tokenIn, tokenOut, swapType, swapAmount, pools, swapOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (pools.length === 0) return cloneDeep(EMPTY_SWAPINFO);
            const paths = this.routeProposer.getCandidatePaths(
                tokenIn,
                tokenOut,
                swapType,
                pools,
                swapOptions
            );
            if (paths.length == 0) return cloneDeep(EMPTY_SWAPINFO);
            // Path is guaranteed to contain both tokenIn and tokenOut
            let tokenInDecimals;
            let tokenOutDecimals;
            paths[0].swaps.forEach((swap) => {
                // Inject token decimals to avoid having to query onchain
                if (isSameAddress(swap.tokenIn, tokenIn)) {
                    tokenInDecimals = swap.tokenInDecimals;
                }
                if (isSameAddress(swap.tokenOut, tokenOut)) {
                    tokenOutDecimals = swap.tokenOutDecimals;
                }
            });
            const costOutputToken = yield this.getCostOfSwapInToken(
                swapType === exports.SwapTypes.SwapExactIn ? tokenOut : tokenIn,
                swapType === exports.SwapTypes.SwapExactIn
                    ? tokenOutDecimals
                    : tokenInDecimals,
                swapOptions.gasPrice,
                swapOptions.swapGas
            );
            const [swaps, total, marketSp, totalConsideringFees] =
                this.getBestPaths(
                    paths,
                    swapAmount,
                    swapType,
                    tokenInDecimals,
                    tokenOutDecimals,
                    costOutputToken,
                    swapOptions.maxPools
                );
            const swapInfo = formatSwaps(
                swaps,
                swapType,
                swapAmount,
                tokenIn,
                tokenOut,
                total,
                totalConsideringFees,
                marketSp
            );
            return swapInfo;
        });
    }
    /**
     * Find optimal routes for trade from given candidate paths
     */
    getBestPaths(
        paths,
        swapAmount,
        swapType,
        tokenInDecimals,
        tokenOutDecimals,
        costOutputToken,
        maxPools
    ) {
        // swapExactIn - total = total amount swap will return of tokenOut
        // swapExactOut - total = total amount of tokenIn required for swap
        const [inputDecimals, outputDecimals] =
            swapType === exports.SwapTypes.SwapExactIn
                ? [tokenInDecimals, tokenOutDecimals]
                : [tokenOutDecimals, tokenInDecimals];
        const [swaps, total, marketSp, totalConsideringFees] = getBestPaths(
            paths,
            swapType,
            swapAmount,
            inputDecimals,
            outputDecimals,
            maxPools,
            costOutputToken
        );
        return [
            swaps,
            bignumber.parseFixed(
                total.dp(outputDecimals, BigNumber.ROUND_FLOOR).toString(),
                outputDecimals
            ),
            marketSp.toString(),
            bignumber.parseFixed(
                totalConsideringFees
                    .dp(outputDecimals, BigNumber.ROUND_FLOOR)
                    .toString(),
                outputDecimals
            ),
        ];
    }
}

/////////
/// UI Helpers
/////////
// Get BPT amount for token amounts with zero-price impact
// This function is the same regardless of whether we are considering
// an Add or Remove liquidity operation: The spot prices of BPT in tokens
// are the same regardless.
function BPTForTokensZeroPriceImpact$2(
    balances,
    decimals,
    normalizedWeights,
    amounts,
    bptTotalSupply
) {
    const amountBPTOut = amounts.reduce((totalBptOut, amountIn, i) => {
        // Calculate amount of BPT gained per token in
        const poolPairData = {
            balanceIn: balances[i],
            decimalsIn: decimals[i],
            balanceOut: bptTotalSupply,
            weightIn: normalizedWeights[i],
            swapFee: constants.Zero,
        };
        const BPTPrice = _spotPriceAfterSwapTokenInForExactBPTOut$3(
            ZERO,
            poolPairData
        );
        // Multiply by amountIn to get contribution to total bpt out
        const downscaledAmountIn = bignumber.formatFixed(amountIn, decimals[i]);
        const downscaledBptOut = bnum(downscaledAmountIn)
            .div(BPTPrice)
            .toString();
        return bignumber.BigNumber.from(totalBptOut).add(
            bignumber.parseFixed(downscaledBptOut, 18)
        );
    }, constants.Zero);
    return bignumber.BigNumber.from(amountBPTOut);
}

/////////
/// UI Helpers
/////////
// Get BPT amount for token amounts with zero-price impact
// This function is the same regardless of whether we are considering
// an Add or Remove liquidity operation: The spot prices of BPT in tokens
// are the same regardless.
function BPTForTokensZeroPriceImpact$1(
    allBalances,
    decimals,
    amounts, // This has to have the same lenght as allBalances
    bptTotalSupply,
    amp
) {
    if (allBalances.length != amounts.length)
        throw 'allBalances and amounts have to have same length';
    // Calculate the amount of BPT adding this liquidity would result in
    // if there were no price impact, i.e. using the spot price of tokenIn/BPT
    // We downscale the pool balances once as this will be reused across tokens
    const allBalancesDownScaled = allBalances.map((balance, i) =>
        bnum(bignumber.formatFixed(balance, decimals[i]))
    );
    const amountBPTOut = amounts.reduce((totalBptOut, amountIn, i) => {
        // Calculate amount of BPT gained per token in
        const poolPairData = {
            amp: amp,
            allBalances: allBalancesDownScaled,
            tokenIndexIn: i,
            balanceOut: bptTotalSupply,
            decimalsOut: 18,
            swapFee: constants.Zero,
        };
        const BPTPrice = _spotPriceAfterSwapTokenInForExactBPTOut$2(
            ZERO,
            poolPairData
        );
        // Multiply by amountIn to get contribution to total bpt out
        const downscaledAmountIn = bignumber.formatFixed(amountIn, decimals[i]);
        const downscaledBptOut = bnum(downscaledAmountIn)
            .div(BPTPrice)
            .toString();
        return bignumber.BigNumber.from(totalBptOut).add(
            bignumber.parseFixed(downscaledBptOut, 18)
        );
    }, constants.Zero);
    return bignumber.BigNumber.from(amountBPTOut);
}

/////////
/// UI Helpers
/////////
// Get BPT amount for token amounts with zero-price impact
// Amounts are stablecoin amounts (DAI, USDT, USDC)
// Since the phantom stable pool is actually metastable
// and their components are bDAI, bUSDT, bUSDC,
// we transform its balances according to the price rates
// to obtain units of DAI, USDT, USDC.
function BPTForTokensZeroPriceImpact(
    allBalances, // assuming that BPT balance was removed
    decimals, // This should be [18, 18, 18]
    amounts, // This has to have the same length as allBalances
    virtualBptSupply,
    amp,
    fee,
    rates
) {
    const amountsAfterFee = amounts.map((amountIn, i) => {
        const amount = bignumber.BigNumber.from(amountIn);
        const feeAmount = amount.mul(fee).div(constants.WeiPerEther);
        return amount.sub(feeAmount);
    });
    const transformedBalances = allBalances.map((balance, i) => {
        return bignumber.BigNumber.from(balance)
            .mul(rates[i])
            .div(constants.WeiPerEther);
    });
    return BPTForTokensZeroPriceImpact$1(
        transformedBalances,
        decimals,
        amountsAfterFee,
        virtualBptSupply,
        amp
    );
}

/*
 * queryBatchSwap simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be
 * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.
 *
 * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)
 * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it
 * receives are the same that an equivalent `batchSwap` call would receive.
 *
 * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.
 * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,
 * approve them for the Vault, or even know a user's address.
 */
function queryBatchSwap(vaultContract, swapType, swaps, assets) {
    return __awaiter(this, void 0, void 0, function* () {
        const funds = {
            sender: constants.AddressZero,
            recipient: constants.AddressZero,
            fromInternalBalance: false,
            toInternalBalance: false,
        };
        return yield vaultContract.queryBatchSwap(
            swapType,
            swaps,
            assets,
            funds
        );
    });
}
/*
Use SOR to get swapInfo for tokenIn>tokenOut.
SwapInfos.swaps has path information.
*/
function getSorSwapInfo(tokenIn, tokenOut, swapType, amount, sor) {
    return __awaiter(this, void 0, void 0, function* () {
        const swapInfo = yield sor.getSwaps(
            tokenIn.toLowerCase(),
            tokenOut.toLowerCase(),
            swapType,
            amount
        );
        return swapInfo;
    });
}
/*
Format multiple individual swaps/assets into a single swap/asset.
*/
function batchSwaps(assetArray, swaps) {
    // assest addresses without duplicates
    const newAssetArray = [...new Set(assetArray.flat())];
    // Update indices of each swap to use new asset array
    swaps.forEach((swap, i) => {
        swap.forEach((poolSwap) => {
            poolSwap.assetInIndex = newAssetArray.indexOf(
                assetArray[i][poolSwap.assetInIndex]
            );
            poolSwap.assetOutIndex = newAssetArray.indexOf(
                assetArray[i][poolSwap.assetOutIndex]
            );
        });
    });
    // Join Swaps into a single batchSwap
    const batchedSwaps = swaps.flat();
    return { swaps: batchedSwaps, assets: newAssetArray };
}
/*
Uses SOR to create and query a batchSwap for multiple tokens in > single tokenOut.
For example can be used to join staBal3 with DAI/USDC/USDT.
*/
function queryBatchSwapTokensIn(
    sor,
    vaultContract,
    tokensIn,
    amountsIn,
    tokenOut
) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const swaps = [];
        const assetArray = [];
        // get path information for each tokenIn
        for (let i = 0; i < tokensIn.length; i++) {
            const swap = yield getSorSwapInfo(
                tokensIn[i],
                tokenOut,
                exports.SwapTypes.SwapExactIn,
                amountsIn[i].toString(),
                sor
            );
            swaps.push(swap.swaps);
            assetArray.push(swap.tokenAddresses);
        }
        // Join swaps and assets together correctly
        const batchedSwaps = batchSwaps(assetArray, swaps);
        let amountTokenOut = '0';
        try {
            // Onchain query
            const deltas = yield queryBatchSwap(
                vaultContract,
                exports.SwapTypes.SwapExactIn,
                batchedSwaps.swaps,
                batchedSwaps.assets
            );
            amountTokenOut =
                (_a =
                    deltas[
                        batchedSwaps.assets.indexOf(tokenOut.toLowerCase())
                    ]) !== null && _a !== void 0
                    ? _a
                    : '0';
        } catch (err) {
            console.error(`queryBatchSwapTokensIn error: ${err.message}`);
        }
        return {
            amountTokenOut,
            swaps: batchedSwaps.swaps,
            assets: batchedSwaps.assets,
        };
    });
}
/*
Uses SOR to create and query a batchSwap for a single token in > multiple tokens out.
For example can be used to exit staBal3 to DAI/USDC/USDT.
*/
function queryBatchSwapTokensOut(
    sor,
    vaultContract,
    tokenIn,
    amountsIn,
    tokensOut
) {
    return __awaiter(this, void 0, void 0, function* () {
        const swaps = [];
        const assetArray = [];
        // get path information for each tokenOut
        for (let i = 0; i < tokensOut.length; i++) {
            const swap = yield getSorSwapInfo(
                tokenIn,
                tokensOut[i],
                exports.SwapTypes.SwapExactIn,
                amountsIn[i].toString(),
                sor
            );
            swaps.push(swap.swaps);
            assetArray.push(swap.tokenAddresses);
        }
        // Join swaps and assets together correctly
        const batchedSwaps = batchSwaps(assetArray, swaps);
        const amountTokensOut = Array(tokensOut.length).fill('0');
        try {
            // Onchain query
            const deltas = yield queryBatchSwap(
                vaultContract,
                exports.SwapTypes.SwapExactIn,
                batchedSwaps.swaps,
                batchedSwaps.assets
            );
            tokensOut.forEach((t, i) => {
                const amount =
                    deltas[batchedSwaps.assets.indexOf(t.toLowerCase())];
                if (amount) amountTokensOut[i] = amount.toString();
            });
        } catch (err) {
            console.error(`queryBatchSwapTokensOut error: ${err.message}`);
        }
        return {
            amountTokensOut,
            swaps: batchedSwaps.swaps,
            assets: batchedSwaps.assets,
        };
    });
}

exports.SOR = SOR;
exports.parseToPoolsDict = parseToPoolsDict;
exports.phantomStableBPTForTokensZeroPriceImpact = BPTForTokensZeroPriceImpact;
exports.queryBatchSwapTokensIn = queryBatchSwapTokensIn;
exports.queryBatchSwapTokensOut = queryBatchSwapTokensOut;
exports.stableBPTForTokensZeroPriceImpact = BPTForTokensZeroPriceImpact$1;
exports.weightedBPTForTokensZeroPriceImpact = BPTForTokensZeroPriceImpact$2;
//# sourceMappingURL=index.js.map
